/*! For license information please see davbet.bundle.js.LICENSE.txt */
(()=>{var t={368:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".form__affiliates"),e=document.querySelector(".form__advertisers"),n=document.getElementsByName("purpose");document.getElementById("advertiseModal").checked&&(t.style.display="none"),document.getElementById("affiliateModal").checked&&(e.style.display="none"),n.forEach((function(n){n.addEventListener("change",(function(){document.getElementById("advertiseModal").checked?(t.style.display="none",e.style.display="block"):document.getElementById("affiliateModal").checked?(e.style.display="none",t.style.display="block"):(t.style.display="block",e.style.display="block")}))}))}))},416:()=>{var t=document.querySelector(".formGeneral"),e=t.querySelectorAll(".form__radio"),n=t.querySelector(".location"),r=t.querySelector(".email");e.forEach((function(t){t.addEventListener("change",(function(){"affiliateModal"===t.value?(n.required=!1,r.required=!1):"advertiseModal"===t.value&&(n.required=!0,r.required=!0)}))}))},120:()=>{window.addEventListener("load",(function(){document.querySelector("body").classList.add("loaded")}))},680:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".videoSection__video");t.addEventListener("click",(function(){t.paused?t.play():t.pause()}))}))}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{"use strict";function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var e="(prefers-reduced-motion: reduce)",r={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function i(t){t.length=0}function o(t,e,n){return Array.prototype.slice.call(t,e,n)}function a(t){return t.bind.apply(t,[null].concat(o(arguments,1)))}var u=setTimeout,s=function(){};function c(t){return requestAnimationFrame(t)}function l(t,e){return typeof e===t}function f(t){return!g(t)&&l("object",t)}var d=Array.isArray,h=a(l,"function"),v=a(l,"string"),p=a(l,"undefined");function g(t){return null===t}function m(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function y(t){return d(t)?t:[t]}function b(t,e){y(t).forEach(e)}function w(t,e){return t.indexOf(e)>-1}function E(t,e){return t.push.apply(t,y(e)),t}function L(t,e,n){t&&b(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function S(t,e){L(t,v(e)?e.split(" "):e,!0)}function x(t,e){b(e,t.appendChild.bind(t))}function _(t,e){b(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function k(t,e){return m(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function P(t,e){var n=t?o(t.children):[];return e?n.filter((function(t){return k(t,e)})):n}function C(t,e){return e?P(t,e)[0]:t.firstElementChild}var M=Object.keys;function O(t,e,n){return t&&(n?M(t).reverse():M(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function A(t){return o(arguments,1).forEach((function(e){O(e,(function(n,r){t[r]=e[r]}))})),t}function D(t){return o(arguments,1).forEach((function(e){O(e,(function(e,n){d(e)?t[n]=e.slice():f(e)?t[n]=D({},f(t[n])?t[n]:{},e):t[n]=e}))})),t}function N(t,e){b(e||M(t),(function(e){delete t[e]}))}function q(t,e){b(t,(function(t){b(e,(function(e){t&&t.removeAttribute(e)}))}))}function j(t,e,n){f(e)?O(e,(function(e,n){j(t,n,e)})):b(t,(function(t){g(n)||""===n?q(t,e):t.setAttribute(e,String(n))}))}function I(t,e,n){var r=document.createElement(t);return e&&(v(e)?S(r,e):j(r,e)),n&&x(n,r),r}function T(t,e,n){if(p(n))return getComputedStyle(t)[e];g(n)||(t.style[e]=""+n)}function z(t,e){T(t,"display",e)}function F(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function G(t,e){return t.getAttribute(e)}function B(t,e){return t&&t.classList.contains(e)}function R(t){return t.getBoundingClientRect()}function Y(t){b(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function H(t){return C((new DOMParser).parseFromString(t,"text/html").body)}function W(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function X(t,e){return t&&t.querySelector(e)}function V(t,e){return e?o(t.querySelectorAll(e)):[]}function U(t,e){L(t,e,!1)}function J(t){return t.timeStamp}function K(t){return v(t)?t:t?t+"px":""}var Q="splide",Z="data-"+Q;function $(t,e){if(!t)throw new Error("["+Q+"] "+(e||""))}var tt=Math.min,et=Math.max,nt=Math.floor,rt=Math.ceil,it=Math.abs;function ot(t,e,n){return it(t-e)<n}function at(t,e,n,r){var i=tt(e,n),o=et(e,n);return r?i<t&&t<o:i<=t&&t<=o}function ut(t,e,n){var r=tt(e,n),i=et(e,n);return tt(et(r,t),i)}function st(t){return+(t>0)-+(t<0)}function ct(t,e){return b(e,(function(e){t=t.replace("%s",""+e)})),t}function lt(t){return t<10?"0"+t:""+t}var ft={};function dt(){var t=[];function e(t,e,n){b(t,(function(t){t&&b(e,(function(e){e.split(" ").forEach((function(e){var r=e.split(".");n(t,r[0],r[1])}))}))}))}return{bind:function(n,r,i,o){e(n,r,(function(e,n,r){var a="addEventListener"in e,u=a?e.removeEventListener.bind(e,n,i,o):e.removeListener.bind(e,i);a?e.addEventListener(n,i,o):e.addListener(i),t.push([e,n,r,i,u])}))},unbind:function(n,r,i){e(n,r,(function(e,n,r){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==r||i&&t[3]!==i)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var r;return"function"==typeof CustomEvent?r=new CustomEvent(e,{bubbles:!0,detail:n}):(r=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(r),r},destroy:function(){t.forEach((function(t){t[4]()})),i(t)}}}var ht="mounted",vt="ready",pt="move",gt="moved",mt="click",yt="refresh",bt="updated",wt="resize",Et="resized",Lt="scroll",St="scrolled",xt="destroy",_t="navigation:mounted",kt="autoplay:play",Pt="autoplay:pause",Ct="lazyload:loaded",Mt="ei";function Ot(t){var e=t?t.event.bus:document.createDocumentFragment(),n=dt();return t&&t.event.on(xt,n.destroy),A(n,{bus:e,on:function(t,r){n.bind(e,y(t).join(" "),(function(t){r.apply(r,d(t.detail)?t.detail:[])}))},off:a(n.unbind,e),emit:function(t){n.dispatch(e,t,o(arguments,1))}})}function At(t,e,n,r){var i,o,a=Date.now,u=0,s=!0,l=0;function f(){if(!s){if(u=t?tt((a()-i)/t,1):1,n&&n(u),u>=1&&(e(),i=a(),r&&++l>=r))return d();o=c(f)}}function d(){s=!0}function h(){o&&cancelAnimationFrame(o),u=0,o=0,s=!0}return{start:function(e){e||h(),i=a()-(e?u*t:0),s=!1,o=c(f)},rewind:function(){i=a(),u=0,n&&n(u)},pause:d,cancel:h,set:function(e){t=e},isPaused:function(){return s}}}var Dt="Arrow",Nt=Dt+"Left",qt=Dt+"Right",jt=Dt+"Up",It=Dt+"Down",Tt="ttb",zt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[jt,qt],ArrowRight:[It,Nt]};var Ft="role",Gt="tabindex",Bt="aria-",Rt=Bt+"controls",Yt=Bt+"current",Ht=Bt+"selected",Wt=Bt+"label",Xt=Bt+"labelledby",Vt=Bt+"hidden",Ut=Bt+"orientation",Jt=Bt+"roledescription",Kt=Bt+"live",Qt=Bt+"busy",Zt=Bt+"atomic",$t=[Ft,Gt,"disabled",Rt,Yt,Wt,Xt,Vt,Ut,Jt],te=Q+"__",ee="is-",ne=Q,re=te+"track",ie=te+"list",oe=te+"slide",ae=oe+"--clone",ue=oe+"__container",se=te+"arrows",ce=te+"arrow",le=ce+"--prev",fe=ce+"--next",de=te+"pagination",he=de+"__page",ve=te+"progress__bar",pe=te+"toggle",ge=te+"sr",me=ee+"initialized",ye=ee+"active",be=ee+"prev",we=ee+"next",Ee=ee+"visible",Le=ee+"loading",Se=ee+"focus-in",xe=ee+"overflow",_e=[ye,Ee,be,we,Le,Se,xe],ke={slide:oe,clone:ae,arrows:se,arrow:ce,prev:le,next:fe,pagination:de,page:he,spinner:te+"spinner"},Pe="touchstart mousedown",Ce="touchmove mousemove",Me="touchend touchcancel mouseup click",Oe="slide",Ae="loop",De="fade";var Ne=Z+"-interval",qe={passive:!1,capture:!0},je={Spacebar:" ",Right:qt,Left:Nt,Up:jt,Down:It};function Ie(t){return t=v(t)?t:t.key,je[t]||t}var Te="keydown",ze=Z+"-lazy",Fe=ze+"-srcset",Ge="["+ze+"], ["+Fe+"]",Be=[" ","Enter"],Re=Object.freeze({__proto__:null,Media:function(t,n,r){var i=t.state,o=r.breakpoints||{},a=r.reducedMotion||{},u=dt(),s=[];function c(t){t&&u.destroy()}function l(t,e){var n=matchMedia(e);u.bind(n,"change",f),s.push([t,n])}function f(){var e=i.is(7),n=r.direction,o=s.reduce((function(t,e){return D(t,e[1].matches?e[0]:{})}),{});N(r),d(o),r.destroy?t.destroy("completely"===r.destroy):e?(c(!0),t.mount()):n!==r.direction&&t.refresh()}function d(e,n,o){D(r,e),n&&D(Object.getPrototypeOf(r),e),!o&&i.is(1)||t.emit(bt,r)}return{setup:function(){var t="min"===r.mediaQuery;M(o).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){l(o[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),l(a,e),f()},destroy:c,reduce:function(t){matchMedia(e).matches&&(t?D(r,a):N(r,M(a)))},set:d}},Direction:function(t,e,n){return{resolve:function(t,e,r){var i="rtl"!==(r=r||n.direction)||e?r===Tt?0:-1:1;return zt[t]&&zt[t][i]||t.replace(/width|left|right/i,(function(t,e){var n=zt[t.toLowerCase()][i]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var r,o,a,u=Ot(t),s=u.on,c=u.bind,l=t.root,f=n.i18n,d={},v=[],p=[],g=[];function m(){var t,e,i;r=w("."+re),o=C(r,"."+ie),$(r&&o,"A track/list element is missing."),E(v,P(o,"."+oe+":not(."+ae+")")),O({arrows:se,pagination:de,prev:le,next:fe,bar:ve,toggle:pe},(function(t,e){d[e]=w("."+t)})),A(d,{root:l,track:r,list:o,slides:v}),e=l.id||""+(t=Q)+lt(ft[t]=(ft[t]||0)+1),i=n.role,l.id=e,r.id=r.id||e+"-track",o.id=o.id||e+"-list",!G(l,Ft)&&"SECTION"!==l.tagName&&i&&j(l,Ft,i),j(l,Jt,f.carousel),j(o,Ft,"presentation"),b()}function y(t){var e=$t.concat("style");i(v),U(l,p),U(r,g),q([r,o],e),q(l,t?e:["style",Jt])}function b(){U(l,p),U(r,g),p=x(ne),g=x(re),S(l,p),S(r,g),j(l,Wt,n.label),j(l,Xt,n.labelledby)}function w(t){var e=X(l,t);return e&&function(t,e){if(h(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!k(n,e);)n=n.parentElement;return n}(e,"."+ne)===l?e:void 0}function x(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===ne&&ye]}return A(d,{setup:m,mount:function(){s(yt,y),s(yt,m),s(bt,b),c(document,Pe+" keydown",(function(t){a="keydown"===t.type}),{capture:!0}),c(l,"focusin",(function(){L(l,Se,!!a)}))},destroy:y})},Slides:function(t,e,n){var r=Ot(t),o=r.on,u=r.emit,s=r.bind,c=e.Elements,l=c.slides,f=c.list,d=[];function p(){l.forEach((function(t,e){E(t,e,-1)}))}function g(){M((function(t){t.destroy()})),i(d)}function E(e,n,r){var i=function(t,e,n,r){var i,o=Ot(t),u=o.on,s=o.emit,c=o.bind,l=t.Components,f=t.root,d=t.options,h=d.isNavigation,v=d.updateOnMove,p=d.i18n,g=d.pagination,m=d.slideFocus,y=l.Direction.resolve,b=G(r,"style"),w=G(r,Wt),E=n>-1,S=C(r,"."+ue);function x(){var i=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");j(r,Wt,ct(p.slideX,(E?n:e)+1)),j(r,Rt,i),j(r,Ft,m?"button":""),m&&q(r,Jt)}function _(){i||k()}function k(){if(!i){var n=t.index;(o=P())!==B(r,ye)&&(L(r,ye,o),j(r,Yt,h&&o||""),s(o?"active":"inactive",M)),function(){var e=function(){if(t.is(De))return P();var e=R(l.Elements.track),n=R(r),i=y("left",!0),o=y("right",!0);return nt(e[i])<=rt(n[i])&&nt(n[o])<=rt(e[o])}(),n=!e&&(!P()||E);if(t.state.is([4,5])||j(r,Vt,n||""),j(V(r,d.focusableNodes||""),Gt,n?-1:""),m&&j(r,Gt,n?-1:0),e!==B(r,Ee)&&(L(r,Ee,e),s(e?"visible":"hidden",M)),!e&&document.activeElement===r){var i=l.Slides.getAt(t.index);i&&F(i.slide)}}(),L(r,be,e===n-1),L(r,we,e===n+1)}var o}function P(){var r=t.index;return r===e||d.cloneStatus&&r===n}var M={index:e,slideIndex:n,slide:r,container:S,isClone:E,mount:function(){E||(r.id=f.id+"-slide"+lt(e+1),j(r,Ft,g?"tabpanel":"group"),j(r,Jt,p.slide),j(r,Wt,w||ct(p.slideLabel,[e+1,t.length]))),c(r,"click",a(s,mt,M)),c(r,"keydown",a(s,"sk",M)),u([gt,"sh",St],k),u(_t,x),v&&u(pt,_)},destroy:function(){i=!0,o.destroy(),U(r,_e),q(r,$t),j(r,"style",b),j(r,Wt,w||"")},update:k,style:function(t,e,n){T(n&&S||r,t,e)},isWithin:function(n,r){var i=it(n-e);return E||!d.rewind&&!t.is(Ae)||(i=tt(i,t.length-i)),i<=r}};return M}(t,n,r,e);i.mount(),d.push(i),d.sort((function(t,e){return t.index-e.index}))}function P(t){return t?O((function(t){return!t.isClone})):d}function M(t,e){P(e).forEach(t)}function O(t){return d.filter(h(t)?t:function(e){return v(t)?k(e.slide,t):w(y(t),e.index)})}return{mount:function(){p(),o(yt,g),o(yt,p)},destroy:g,update:function(){M((function(t){t.update()}))},register:E,get:P,getIn:function(t){var r=e.Controller,i=r.toIndex(t),o=r.hasFocus()?1:n.perPage;return O((function(t){return at(t.index,i,i+o-1)}))},getAt:function(t){return O(t)[0]},add:function(t,e){b(t,(function(t){if(v(t)&&(t=H(t)),m(t)){var r=l[e];r?_(t,r):x(f,t),S(t,n.classes.slide),i=t,o=a(u,wt),c=V(i,"img"),(d=c.length)?c.forEach((function(t){s(t,"load error",(function(){--d||o()}))})):o()}var i,o,c,d})),u(yt)},remove:function(t){Y(O(t).map((function(t){return t.slide}))),u(yt)},forEach:M,filter:O,style:function(t,e,n){M((function(r){r.style(t,e,n)}))},getLength:function(t){return t?l.length:d.length},isEnough:function(){return d.length>n.perPage}}},Layout:function(t,e,n){var r,i,o,u=Ot(t),s=u.on,c=u.bind,l=u.emit,d=e.Slides,h=e.Direction.resolve,v=e.Elements,p=v.root,g=v.track,m=v.list,y=d.getAt,b=d.style;function w(){r=n.direction===Tt,T(p,"maxWidth",K(n.width)),T(g,h("paddingLeft"),S(!1)),T(g,h("paddingRight"),S(!0)),E(!0)}function E(t){var e,a=R(p);(t||i.width!==a.width||i.height!==a.height)&&(T(g,"height",(e="",r&&($(e=x(),"height or heightRatio is missing."),e="calc("+e+" - "+S(!1)+" - "+S(!0)+")"),e)),b(h("marginRight"),K(n.gap)),b("width",n.autoWidth?null:K(n.fixedWidth)||(r?"":_())),b("height",K(n.fixedHeight)||(r?n.autoHeight?null:_():x()),!0),i=a,l(Et),o!==(o=A())&&(L(p,xe,o),l("overflow",o)))}function S(t){var e=n.padding,r=h(t?"right":"left");return e&&K(e[r]||(f(e)?0:e))||"0px"}function x(){return K(n.height||R(m).width*n.heightRatio)}function _(){var t=K(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function k(){return R(m)[h("width")]}function P(t,e){var n=y(t||0);return n?R(n.slide)[h("width")]+(e?0:O()):0}function C(t,e){var n=y(t);if(n){var r=R(n.slide)[h("right")],i=R(m)[h("left")];return it(r-i)+(e?0:O())}return 0}function M(e){return C(t.length-1)-C(0)+P(0,e)}function O(){var t=y(0);return t&&parseFloat(T(t.slide,h("marginRight")))||0}function A(){return t.is(De)||M(!0)>k()}return{mount:function(){var t,e;w(),c(window,"resize load",(t=a(l,wt),e=At(0,t,null,1),function(){e.isPaused()&&e.start()})),s([bt,yt],w),s(wt,E)},resize:E,listSize:k,slideSize:P,sliderSize:M,totalSize:C,getPadding:function(t){return parseFloat(T(g,h("padding"+(t?"Right":"Left"))))||0},isOverflow:A}},Clones:function(t,e,n){var r,o=Ot(t),a=o.on,u=e.Elements,s=e.Slides,c=e.Direction.resolve,l=[];function f(){a(yt,d),a([bt,wt],v),(r=g())&&(function(e){var r=s.get().slice(),i=r.length;if(i){for(;r.length<e;)E(r,r);E(r.slice(-e),r.slice(0,e)).forEach((function(o,a){var c=a<e,f=function(e,r){var i=e.cloneNode(!0);return S(i,n.classes.clone),i.id=t.root.id+"-clone"+lt(r+1),i}(o.slide,a);c?_(f,r[0].slide):x(u.list,f),E(l,f),s.register(f,a-e+(c?0:i),o.index)}))}}(r),e.Layout.resize(!0))}function d(){h(),f()}function h(){Y(l),i(l),o.destroy()}function v(){var t=g();r!==t&&(r<t||!t)&&o.emit(yt)}function g(){var r=n.clones;if(t.is(Ae)){if(p(r)){var i=n[c("fixedWidth")]&&e.Layout.slideSize(0);r=i&&rt(R(u.track)[c("width")]/i)||n[c("autoWidth")]&&t.length||2*n.perPage}}else r=0;return r}return{mount:f,destroy:h}},Move:function(t,e,n){var r,i=Ot(t),o=i.on,a=i.emit,u=t.state.set,s=e.Layout,c=s.slideSize,l=s.getPadding,f=s.totalSize,d=s.listSize,h=s.sliderSize,v=e.Direction,g=v.resolve,m=v.orient,y=e.Elements,b=y.list,w=y.track;function E(){e.Controller.isBusy()||(e.Scroll.cancel(),L(t.index),e.Slides.update())}function L(t){S(P(t,!0))}function S(n,r){if(!t.is(De)){var i=r?n:function(n){if(t.is(Ae)){var r=k(n),i=r>e.Controller.getEnd();(r<0||i)&&(n=x(n,i))}return n}(n);T(b,"transform","translate"+g("X")+"("+i+"px)"),n!==i&&a("sh")}}function x(t,e){var n=t-M(e),r=h();return t-m(r*(rt(it(n)/r)||1))*(e?1:-1)}function _(){S(C(),!0),r.cancel()}function k(t){for(var n=e.Slides.get(),r=0,i=1/0,o=0;o<n.length;o++){var a=n[o].index,u=it(P(a,!0)-t);if(!(u<=i))break;i=u,r=a}return r}function P(e,r){var i=m(f(e-1)-function(t){var e=n.focus;return"center"===e?(d()-c(t,!0))/2:+e*c(t)||0}(e));return r?function(e){return n.trimSpace&&t.is(Oe)&&(e=ut(e,0,m(h(!0)-d()))),e}(i):i}function C(){var t=g("left");return R(b)[t]-R(w)[t]+m(l(!1))}function M(t){return P(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){r=e.Transition,o([ht,Et,bt,yt],E)},move:function(t,e,n,i){var o,s;t!==e&&(o=t>n,s=m(x(C(),o)),o?s>=0:s<=b[g("scrollWidth")]-R(w)[g("width")])&&(_(),S(x(C(),t>n),!0)),u(4),a(pt,e,n,t),r.start(e,(function(){u(3),a(gt,e,n,t),i&&i()}))},jump:L,translate:S,shift:x,cancel:_,toIndex:k,toPosition:P,getPosition:C,getLimit:M,exceededLimit:function(t,e){e=p(e)?C():e;var n=!0!==t&&m(e)<m(M(!1)),r=!1!==t&&m(e)>m(M(!0));return n||r},reposition:E}},Controller:function(t,e,n){var r,i,o,u,s=Ot(t),c=s.on,l=s.emit,f=e.Move,d=f.getPosition,h=f.getLimit,g=f.toPosition,m=e.Slides,y=m.isEnough,b=m.getLength,w=n.omitEnd,E=t.is(Ae),L=t.is(Oe),S=a(M,!1),x=a(M,!0),_=n.start||0,k=_;function P(){i=b(!0),o=n.perMove,u=n.perPage,r=D();var t=ut(_,0,w?r:i-1);t!==_&&(_=t,f.reposition())}function C(){r!==D()&&l(Mt)}function M(t,e){var n=o||(I()?1:u),i=O(_+n*(t?-1:1),_,!(o||I()));return-1===i&&L&&!ot(d(),h(!t),1)?t?0:r:e?i:A(i)}function O(e,a,s){if(y()||I()){var c=function(e){if(L&&"move"===n.trimSpace&&e!==_)for(var r=d();r===g(e,!0)&&at(e,0,t.length-1,!n.rewind);)e<_?--e:++e;return e}(e);c!==e&&(a=e,e=c,s=!1),e<0||e>r?e=o||!at(0,e,a,!0)&&!at(r,a,e,!0)?E?s?e<0?-(i%u||u):i:e:n.rewind?e<0?r:0:-1:N(q(e)):s&&e!==a&&(e=N(q(a)+(e<a?-1:1)))}else e=-1;return e}function A(t){return E?(t+i)%i||0:t}function D(){for(var t=i-(I()||E&&o?1:u);w&&t-- >0;)if(g(i-1,!0)!==g(t,!0)){t++;break}return ut(t,0,i-1)}function N(t){return ut(I()?t:u*t,0,r)}function q(t){return I()?tt(t,r):nt((t>=r?i-1:t)/u)}function j(t){t!==_&&(k=_,_=t)}function I(){return!p(n.focus)||n.isNavigation}function T(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){P(),c([bt,yt,Mt],P),c(Et,C)},go:function(t,e,n){if(!T()){var i=function(t){var e=_;if(v(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],i=n[1],o=n[2];"+"===i||"-"===i?e=O(_+ +(""+i+(+o||1)),_):">"===i?e=o?N(+o):S(!0):"<"===i&&(e=x(!0))}else e=E?t:ut(t,0,r);return e}(t),o=A(i);o>-1&&(e||o!==_)&&(j(o),f.move(i,o,k,n))}},scroll:function(t,n,i,o){e.Scroll.scroll(t,n,i,(function(){var t=A(f.toIndex(d()));j(w?tt(t,r):t),o&&o()}))},getNext:S,getPrev:x,getAdjacent:M,getEnd:D,setIndex:j,getIndex:function(t){return t?k:_},toIndex:N,toPage:q,toDest:function(t){var e=f.toIndex(t);return L?ut(e,0,r):e},hasFocus:I,isBusy:T}},Arrows:function(t,e,n){var r,i,o=Ot(t),u=o.on,s=o.bind,c=o.emit,l=n.classes,f=n.i18n,d=e.Elements,h=e.Controller,v=d.arrows,p=d.track,g=v,m=d.prev,y=d.next,b={};function w(){var t;!(t=n.arrows)||m&&y||(g=v||I("div",l.arrows),m=P(!0),y=P(!1),r=!0,x(g,[m,y]),!v&&_(g,p)),m&&y&&(A(b,{prev:m,next:y}),z(g,t?"":"none"),S(g,i=se+"--"+n.direction),t&&(u([ht,gt,yt,St,Mt],C),s(y,"click",a(k,">")),s(m,"click",a(k,"<")),C(),j([m,y],Rt,p.id),c("arrows:mounted",m,y))),u(bt,E)}function E(){L(),w()}function L(){o.destroy(),U(g,i),r?(Y(v?[m,y]:g),m=y=null):q([m,y],$t)}function k(t){h.go(t,!0)}function P(t){return H('<button class="'+l.arrow+" "+(t?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function C(){if(m&&y){var e=t.index,n=h.getPrev(),r=h.getNext(),i=n>-1&&e<n?f.last:f.prev,o=r>-1&&e>r?f.first:f.next;m.disabled=n<0,y.disabled=r<0,j(m,Wt,i),j(y,Wt,o),c("arrows:updated",m,y,n,r)}}return{arrows:b,mount:w,destroy:L,update:C}},Autoplay:function(t,e,n){var r,i,o=Ot(t),a=o.on,u=o.bind,s=o.emit,c=At(n.interval,t.go.bind(t,">"),(function(t){var e=f.bar;e&&T(e,"width",100*t+"%"),s("autoplay:playing",t)})),l=c.isPaused,f=e.Elements,d=e.Elements,h=d.root,v=d.toggle,p=n.autoplay,g="pause"===p;function m(){l()&&e.Slides.isEnough()&&(c.start(!n.resetProgress),i=r=g=!1,w(),s(kt))}function y(t){void 0===t&&(t=!0),g=!!t,w(),l()||(c.pause(),s(Pt))}function b(){g||(r||i?y(!1):m())}function w(){v&&(L(v,ye,!g),j(v,Wt,n.i18n[g?"play":"pause"]))}function E(t){var r=e.Slides.getAt(t);c.set(r&&+G(r.slide,Ne)||n.interval)}return{mount:function(){p&&(n.pauseOnHover&&u(h,"mouseenter mouseleave",(function(t){r="mouseenter"===t.type,b()})),n.pauseOnFocus&&u(h,"focusin focusout",(function(t){i="focusin"===t.type,b()})),v&&u(v,"click",(function(){g?m():y(!0)})),a([pt,Lt,yt],c.rewind),a(pt,E),v&&j(v,Rt,f.track.id),g||m(),w())},destroy:c.cancel,play:m,pause:y,isPaused:l}},Cover:function(t,e,n){var r=Ot(t).on;function i(t){e.Slides.forEach((function(e){var n=C(e.container||e.slide,"img");n&&n.src&&o(t,n,e)}))}function o(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),z(e,t?"none":"")}return{mount:function(){n.cover&&(r(Ct,a(o,!0)),r([ht,bt,yt],a(i,!0)))},destroy:a(i,!1)}},Scroll:function(t,e,n){var r,i,o=Ot(t),u=o.on,s=o.emit,c=t.state.set,l=e.Move,f=l.getPosition,d=l.getLimit,h=l.exceededLimit,v=l.translate,p=t.is(Oe),g=1;function m(t,n,o,u,d){var v=f();if(w(),o&&(!p||!h())){var m=e.Layout.sliderSize(),E=st(t)*m*nt(it(t)/m)||0;t=l.toPosition(e.Controller.toDest(t%m))+E}var L=ot(v,t,1);g=1,n=L?0:n||et(it(t-v)/1.5,800),i=u,r=At(n,y,a(b,v,t,d),1),c(5),s(Lt),r.start()}function y(){c(3),i&&i(),s(St)}function b(t,e,r,o){var a,u,s=f(),c=(t+(e-t)*(a=o,(u=n.easingFunc)?u(a):1-Math.pow(1-a,4))-s)*g;v(s+c),p&&!r&&h()&&(g*=.6,it(c)<10&&m(d(h(!0)),600,!1,i,!0))}function w(){r&&r.cancel()}function E(){r&&!r.isPaused()&&(w(),y())}return{mount:function(){u(pt,w),u([bt,yt],E)},destroy:w,scroll:m,cancel:E}},Drag:function(t,e,n){var r,i,o,a,u,c,l,d,h=Ot(t),v=h.on,p=h.emit,g=h.bind,m=h.unbind,y=t.state,b=e.Move,w=e.Scroll,E=e.Controller,L=e.Elements.track,S=e.Media.reduce,x=e.Direction,_=x.resolve,P=x.orient,C=b.getPosition,M=b.exceededLimit,O=!1;function A(){var t=n.drag;R(!t),a="free"===t}function D(t){if(c=!1,!l){var e=B(t);r=t.target,i=n.noDrag,k(r,"."+he+", ."+ce)||i&&k(r,i)||!e&&t.button||(E.isBusy()?W(t,!0):(d=e?L:window,u=y.is([4,5]),o=null,g(d,Ce,N,qe),g(d,Me,q,qe),b.cancel(),w.cancel(),I(t)))}var r,i}function N(e){if(y.is(6)||(y.set(6),p("drag")),e.cancelable)if(u){b.translate(r+T(e)/(O&&t.is(Oe)?5:1));var i=z(e)>200,o=O!==(O=M());(i||o)&&I(e),c=!0,p("dragging"),W(e)}else(function(t){return it(T(t))>it(T(t,!0))})(e)&&(u=function(t){var e=n.dragMinThreshold,r=f(e),i=r&&e.mouse||0,o=(r?e.touch:+e)||10;return it(T(t))>(B(t)?o:i)}(e),W(e))}function q(r){y.is(6)&&(y.set(3),p("dragged")),u&&(function(r){var i=function(e){if(t.is(Ae)||!O){var n=z(e);if(n&&n<200)return T(e)/n}return 0}(r),o=function(t){return C()+st(t)*tt(it(t)*(n.flickPower||600),a?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(i),u=n.rewind&&n.rewindByDrag;S(!1),a?E.scroll(o,0,n.snap):t.is(De)?E.go(P(st(i))<0?u?"<":"-":u?">":"+"):t.is(Oe)&&O&&u?E.go(M(!0)?">":"<"):E.go(E.toDest(o),!0),S(!0)}(r),W(r)),m(d,Ce,N),m(d,Me,q),u=!1}function j(t){!l&&c&&W(t,!0)}function I(t){o=i,i=t,r=C()}function T(t,e){return G(t,e)-G(F(t),e)}function z(t){return J(t)-J(F(t))}function F(t){return i===t&&o||i}function G(t,e){return(B(t)?t.changedTouches[0]:t)["page"+_(e?"Y":"X")]}function B(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function R(t){l=t}return{mount:function(){g(L,Ce,s,qe),g(L,Me,s,qe),g(L,Pe,D,qe),g(L,"click",j,{capture:!0}),g(L,"dragstart",W),v([ht,bt],A)},disable:R,isDragging:function(){return u}}},Keyboard:function(t,e,n){var r,i,o=Ot(t),a=o.on,s=o.bind,c=o.unbind,l=t.root,f=e.Direction.resolve;function d(){var t=n.keyboard;t&&(r="global"===t?window:l,s(r,Te,p))}function h(){c(r,Te)}function v(){var t=i;i=!0,u((function(){i=t}))}function p(e){if(!i){var n=Ie(e);n===f(Nt)?t.go("<"):n===f(qt)&&t.go(">")}}return{mount:function(){d(),a(bt,h),a(bt,d),a(pt,v)},destroy:h,disable:function(t){i=t}}},LazyLoad:function(t,e,n){var r=Ot(t),o=r.on,u=r.off,s=r.bind,c=r.emit,l="sequential"===n.lazyLoad,f=[gt,St],d=[];function h(){i(d),e.Slides.forEach((function(t){V(t.slide,Ge).forEach((function(e){var r=G(e,ze),i=G(e,Fe);if(r!==e.src||i!==e.srcset){var o=n.classes.spinner,a=e.parentElement,u=C(a,"."+o)||I("span",o,a);d.push([e,t,u]),e.src||z(e,"none")}}))})),l?m():(u(f),o(f,v),v())}function v(){(d=d.filter((function(e){var r=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,r)||p(e)}))).length||u(f)}function p(t){var e=t[0];S(t[1].slide,Le),s(e,"load error",a(g,t)),j(e,"src",G(e,ze)),j(e,"srcset",G(e,Fe)),q(e,ze),q(e,Fe)}function g(t,e){var n=t[0],r=t[1];U(r.slide,Le),"error"!==e.type&&(Y(t[2]),z(n,""),c(Ct,n,r),c(wt)),l&&m()}function m(){d.length&&p(d.shift())}return{mount:function(){n.lazyLoad&&(h(),o(yt,h))},destroy:a(i,d),check:v}},Pagination:function(t,e,n){var r,u,s=Ot(t),c=s.on,l=s.emit,f=s.bind,d=e.Slides,h=e.Elements,v=e.Controller,p=v.hasFocus,g=v.getIndex,m=v.go,y=e.Direction.resolve,b=h.pagination,w=[];function E(){r&&(Y(b?o(r.children):r),U(r,u),i(w),r=null),s.destroy()}function L(t){m(">"+t,!0)}function x(t,e){var n=w.length,r=Ie(e),i=_(),o=-1;r===y(qt,!1,i)?o=++t%n:r===y(Nt,!1,i)?o=(--t+n)%n:"Home"===r?o=0:"End"===r&&(o=n-1);var a=w[o];a&&(F(a.button),m(">"+o),W(e,!0))}function _(){return n.paginationDirection||n.direction}function k(t){return w[v.toPage(t)]}function P(){var t=k(g(!0)),e=k(g());if(t){var n=t.button;U(n,ye),q(n,Ht),j(n,Gt,-1)}if(e){var i=e.button;S(i,ye),j(i,Ht,!0),j(i,Gt,"")}l("pagination:updated",{list:r,items:w},t,e)}return{items:w,mount:function e(){E(),c([bt,yt,Mt],e);var i=n.pagination;b&&z(b,i?"":"none"),i&&(c([pt,Lt,St],P),function(){var e=t.length,i=n.classes,o=n.i18n,s=n.perPage,c=p()?v.getEnd()+1:rt(e/s);S(r=b||I("ul",i.pagination,h.track.parentElement),u=de+"--"+_()),j(r,Ft,"tablist"),j(r,Wt,o.select),j(r,Ut,_()===Tt?"vertical":"");for(var l=0;l<c;l++){var g=I("li",null,r),m=I("button",{class:i.page,type:"button"},g),y=d.getIn(l).map((function(t){return t.slide.id})),E=!p()&&s>1?o.pageX:o.slideX;f(m,"click",a(L,l)),n.paginationKeyboard&&f(m,"keydown",a(x,l)),j(g,Ft,"presentation"),j(m,Ft,"tab"),j(m,Rt,y.join(" ")),j(m,Wt,ct(E,l+1)),j(m,Gt,-1),w.push({li:g,button:m,page:l})}}(),P(),l("pagination:mounted",{list:r,items:w},k(t.index)))},destroy:E,getAt:k,update:P}},Sync:function(t,e,n){var r=n.isNavigation,o=n.slideFocus,u=[];function s(){var e,n;t.splides.forEach((function(e){e.isParent||(l(t,e.splide),l(e.splide,t))})),r&&((n=(e=Ot(t)).on)(mt,d),n("sk",h),n([ht,bt],f),u.push(e),e.emit(_t,t.splides))}function c(){u.forEach((function(t){t.destroy()})),i(u)}function l(t,e){var n=Ot(t);n.on(pt,(function(t,n,r){e.go(e.is(Ae)?r:t)})),u.push(n)}function f(){j(e.Elements.list,Ut,n.direction===Tt?"vertical":"")}function d(e){t.go(e.index)}function h(t,e){w(Be,Ie(e))&&(d(t),W(e))}return{setup:a(e.Media.set,{slideFocus:p(o)?r:o},!0),mount:s,destroy:c,remount:function(){c(),s()}}},Wheel:function(t,e,n){var r=Ot(t).bind,i=0;function o(r){if(r.cancelable){var o=r.deltaY,a=o<0,u=J(r),s=n.wheelMinThreshold||0,c=n.wheelSleep||0;it(o)>s&&u-i>c&&(t.go(a?"<":">"),i=u),function(r){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(r)}(a)&&W(r)}}return{mount:function(){n.wheel&&r(e.Elements.track,"wheel",o,qe)}}},Live:function(t,e,n){var r=Ot(t).on,i=e.Elements.track,o=n.live&&!n.isNavigation,u=I("span",ge),s=At(90,a(c,!1));function c(t){j(i,Qt,t),t?(x(i,u),s.start()):(Y(u),s.cancel())}function l(t){o&&j(i,Kt,t?"off":"polite")}return{mount:function(){o&&(l(!e.Autoplay.isPaused()),j(i,Zt,!0),u.textContent="…",r(kt,a(l,!0)),r(Pt,a(l,!1)),r([gt,St],a(c,!0)))},disable:l,destroy:function(){q(i,[Kt,Zt,Qt]),Y(u)}}}}),Ye={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:ke,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function He(t,e,n){var r=e.Slides;function i(){r.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){Ot(t).on([ht,yt],i)},start:function(t,e){r.style("transition","opacity "+n.speed+"ms "+n.easing),u(e)},cancel:s}}function We(t,e,n){var r,i=e.Move,o=e.Controller,u=e.Scroll,s=e.Elements.list,c=a(T,s,"transition");function l(){c(""),u.cancel()}return{mount:function(){Ot(t).bind(s,"transitionend",(function(t){t.target===s&&r&&(l(),r())}))},start:function(e,a){var s=i.toPosition(e,!0),l=i.getPosition(),f=function(e){var r=n.rewindSpeed;if(t.is(Oe)&&r){var i=o.getIndex(!0),a=o.getEnd();if(0===i&&e>=a||i>=a&&0===e)return r}return n.speed}(e);it(s-l)>=1&&f>=1?n.useScroll?u.scroll(s,f,!1,a):(c("transform "+f+"ms "+n.easing),i.translate(s,!0),r=a):(i.jump(e),a())},cancel:l}}var Xe=function(){function e(t,n){var r;this.event=Ot(),this.Components={},this.state=(r=1,{set:function(t){r=t},is:function(t){return w(y(t),r)}}),this.splides=[],this._o={},this._E={};var i=v(t)?X(document,t):t;$(i,i+" is invalid."),this.root=i,n=D({label:G(i,Wt)||"",labelledby:G(i,Xt)||""},Ye,e.defaults,n||{});try{D(n,JSON.parse(G(i,Z)))}catch(t){$(!1,"Invalid JSON")}this._o=Object.create(D({},n))}var n,r,a=e.prototype;return a.mount=function(t,e){var n=this,r=this.state,i=this.Components;return $(r.is([1,7]),"Already mounted!"),r.set(1),this._C=i,this._T=e||this._T||(this.is(De)?He:We),this._E=t||this._E,O(A({},Re,this._E,{Transition:this._T}),(function(t,e){var r=t(n,i,n._o);i[e]=r,r.setup&&r.setup()})),O(i,(function(t){t.mount&&t.mount()})),this.emit(ht),S(this.root,me),r.set(3),this.emit(vt),this},a.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},a.go=function(t){return this._C.Controller.go(t),this},a.on=function(t,e){return this.event.on(t,e),this},a.off=function(t){return this.event.off(t),this},a.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(o(arguments,1))),this},a.add=function(t,e){return this._C.Slides.add(t,e),this},a.remove=function(t){return this._C.Slides.remove(t),this},a.is=function(t){return this._o.type===t},a.refresh=function(){return this.emit(yt),this},a.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?Ot(this).on(vt,this.destroy.bind(this,t)):(O(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(xt),e.destroy(),t&&i(this.splides),n.set(7)),this},n=e,(r=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}(),Ve=Xe;Ve.defaults={},Ve.STATES=r;var Ue=function(t){null!==t&&new Ve(t,{type:"slide",rewind:!0,autoplay:!0,perPage:5,arrows:!1,pagination:!1,pauseOnFocus:!0,updateOnMove:!0,drag:!0,swipe:!0,gap:72,focus:"center",breakpoints:{1120:{perPage:5},992:{perPage:3}}}).mount()};function Je(t){return Je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Je(t)}function Ke(){Ke=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,i=Object.defineProperty||function(t,e,n){t[e]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var o=e&&e.prototype instanceof m?e:m,a=Object.create(o.prototype),u=new O(r||[]);return i(a,"_invoke",{value:k(t,n,u)}),a}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var d="suspendedStart",h="suspendedYield",v="executing",p="completed",g={};function m(){}function y(){}function b(){}var w={};c(w,a,(function(){return this}));var E=Object.getPrototypeOf,L=E&&E(E(A([])));L&&L!==n&&r.call(L,a)&&(w=L);var S=b.prototype=m.prototype=Object.create(w);function x(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function n(i,o,a,u){var s=f(t[i],t,o);if("throw"!==s.type){var c=s.arg,l=c.value;return l&&"object"==Je(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(l).then((function(t){c.value=t,a(c)}),(function(t){return n("throw",t,a,u)}))}u(s.arg)}var o;i(this,"_invoke",{value:function(t,r){function i(){return new e((function(e,i){n(t,r,e,i)}))}return o=o?o.then(i,i):i()}})}function k(e,n,r){var i=d;return function(o,a){if(i===v)throw new Error("Generator is already running");if(i===p){if("throw"===o)throw a;return{value:t,done:!0}}for(r.method=o,r.arg=a;;){var u=r.delegate;if(u){var s=P(u,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(i===d)throw i=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);i=v;var c=f(e,n,r);if("normal"===c.type){if(i=r.done?p:h,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(i=p,r.method="throw",r.arg=c.arg)}}}function P(e,n){var r=n.method,i=e.iterator[r];if(i===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,P(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=f(i,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function M(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function A(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,o=function n(){for(;++i<e.length;)if(r.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=t,n.done=!0,n};return o.next=o}}throw new TypeError(Je(e)+" is not iterable")}return y.prototype=b,i(S,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,s,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},x(_.prototype),c(_.prototype,u,(function(){return this})),e.AsyncIterator=_,e.async=function(t,n,r,i,o){void 0===o&&(o=Promise);var a=new _(l(t,n,r,i),o);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(S),c(S,s,"Generator"),c(S,a,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=A,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(M),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(r,i){return u.type="throw",u.arg=e,n.next=r,i&&(n.method="next",n.arg=t),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),M(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;M(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}function Qe(t,e,n,r,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void n(t)}u.done?e(s):Promise.resolve(s).then(r,i)}function Ze(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){Qe(o,r,i,a,u,"next",t)}function u(t){Qe(o,r,i,a,u,"throw",t)}a(void 0)}))}}document.addEventListener("DOMContentLoaded",Ze(Ke().mark((function t(){var e,n;return Ke().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=document.getElementById("splide-list-payments"),n=document.getElementById("splide-list-partners"),e&&Ue(e),n&&Ue(n);case 4:case"end":return t.stop()}}),t)}))));function $e(){var t,e,n;this.burger.addEventListener("click",this.handlerOpen),t=this.headerMenu,e=this.handlerBackdropClick,n=function(n){var r=n.target;t&&!t.contains(r)&&(null==e||e(n,t))},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function tn(){this.headerMenu.classList.contains("visible")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function en(){this.headerMenu.classList.toggle("visible"),this.burger.classList.toggle("active"),this.toggleVerticalScroll()}function nn(){this.headerMenu.classList.remove("visible"),this.burger.classList.remove("active"),this.toggleVerticalScroll()}function rn(t){!this.headerMenu.classList.contains("visible")||t.target.closest(".header__mobile")||t.target.closest(".header__menu")||t.target.closest(".header-menu__top")||t.target.closest(".header-lang__wrapper")||this.handlerClose()}var on=document.querySelector(".header");on&&new function(t){this.node=t,this.body=document.querySelector("body"),this.burger=document.querySelector(".header__menu"),this.headerMenu=document.querySelector(".navigationPanel"),this.menuList=document.querySelector(".header-menu__List"),this.lang=document.querySelectorAll(".header__lang"),this.handlerOpen=en.bind(this),this.handlerClose=nn.bind(this),this.listeners=$e.bind(this),this.handlerBackdropClick=rn.bind(this),this.toggleVerticalScroll=tn.bind(this),this.listeners()}(on);function an(){var t,e,n,r=this;this.buttonsModal.forEach((function(t){t.addEventListener("click",r.handlerOpen)})),this.close.forEach((function(t){t.addEventListener("click",r.handlerClose)})),this.form.forEach((function(t){t.addEventListener("submit",r.handlerClose)})),t=this.form,e=this.handlerBackdropClick,n=function(n){var r=n.target;t instanceof NodeList&&Array.from(t).some((function(t){return t.contains(r)}))||t instanceof Element&&t.contains(r)||null==e||e(n,t)},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function un(){this.node.classList.contains("modalw_is-open")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function sn(t){var e,n=t.target.classList.contains("buttonModalw"),r=t.target.classList.contains("button__hr");n&&(r?this.formGeneral.classList.add("d-none"):null===(e=this.formHr)||void 0===e||e.classList.add("d-none"),this.node.classList.add("modalw_is-open"),this.toggleVerticalScroll())}function cn(){var t;this.node.classList.remove("modalw_is-open"),null===(t=this.formHr)||void 0===t||t.classList.remove("d-none"),this.formGeneral.classList.remove("d-none"),this.toggleVerticalScroll()}function ln(t){this.node.classList.contains("modalw_is-open")&&!t.target.classList.contains("buttonModalw")&&this.handlerClose()}var fn=document.querySelector(".modalw");function dn(t){var e=document.querySelector(t),n=e.querySelector(".telegram"),r=e.querySelector(".skype"),i=e.querySelector(".form__info_one");document.addEventListener("focusout",(function(t){"INPUT"===t.target.tagName&&(t.target.validity.valid?t.target.classList.remove("invalid"):t.target.classList.add("invalid"),""===n.value.trim()&&""===r.value.trim()||(i.style.opacity="0"))})),e.addEventListener("submit",(function(t){if(""===n.value.trim()&&""===r.value.trim())t.preventDefault(),i.style.opacity="1";else{t.preventDefault();var o=new FormData(e),a={};o.forEach((function(t,e){a[e]=t})),fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then((function(t){return t.json()})).then((function(t){console.log("Success:",t),e.reset();var n=document.querySelector(".successMessage");n.classList.remove("successMessage_hidden"),setTimeout((function(){n.classList.add("successMessage_hidden")}),1e3)})).catch((function(t){console.error("Error:",t)}))}}))}fn&&new function(t){this.node=t,this.body=document.querySelector("body"),this.form=document.querySelectorAll(".modalwForm"),this.formHr=t.querySelector(".formHr"),this.formGeneral=document.querySelector(".formGeneral"),this.buttonsModal=document.querySelectorAll(".buttonModalw"),this.close=document.querySelectorAll(".modalw__close"),this.handlerOpen=sn.bind(this),this.handlerClose=cn.bind(this),this.listeners=an.bind(this),this.handlerBackdropClick=ln.bind(this),this.toggleVerticalScroll=un.bind(this),this.listeners()}(fn),n(120),n(368),n(416),dn(".formGeneral"),n(680),dn(".affiliateForm")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVNjLGlCQUFpQixlQUN0QzhzQixLQUFLNkgsT0FBUzV1QixFQUFLMUcsY0FBYyxXQUNqQ3l0QixLQUFLNEgsWUFBY3gxQixTQUFTRyxjQUFjLGdCQUMxQ3l0QixLQUFLa0gsYUFBZTkwQixTQUFTYyxpQkFBaUIsaUJBQzlDOHNCLEtBQUttSCxNQUFRLzBCLFNBQVNjLGlCQUFpQixrQkFDdkM4c0IsS0FBSzBHLFlBQWNBLEdBQVlud0IsS0FBS3lwQixNQUNwQ0EsS0FBSytHLGFBQWVBLEdBQWF4d0IsS0FBS3lwQixNQUN0Q0EsS0FBS3hoQixVQUFZQSxHQUFVakksS0FBS3lwQixNQUNoQ0EsS0FBSzRHLHFCQUF1QkEsR0FBcUJyd0IsS0FBS3lwQixNQUN0REEsS0FBSzZHLHFCQUF1QkEsR0FBcUJ0d0IsS0FBS3lwQixNQUN0REEsS0FBS3hoQixXQUNQLENDekZFLENBQVU4TSx5QkNxRFp5YyxHQUFXLHVCQy9DWEEsR0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QvLi9zcmMvanMvZm9ybS9mb3JtLmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvanMvZm9ybS9tYWluRm9ybS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2pzL2xvYWRlci5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2pzL3ZpZGVvLmpzIiwid2VicGFjazovL3Rlc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGVzdC8uL25vZGVfbW9kdWxlcy9Ac3BsaWRlanMvc3BsaWRlL2Rpc3QvanMvc3BsaWRlLmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2pzL3NwbGlkZS1pbm5lci9zcGxpZGUuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9qcy9zcGxpZGUtaW5uZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9qcy9oZWFkZXIvaGVhZGVyLmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvanMvaGVhZGVyL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3QvLi9zcmMvanMvbW9kYWwvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vdGVzdC8uL3NyYy9qcy9tb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2pzL2Zvcm0vdmFsaWRhdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXN0Ly4vc3JjL2RhdmJldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBhZmZGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtX19hZmZpbGlhdGVzXCIpXHJcbiAgICBjb25zdCBhZHZlcnRpc2Vyc0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX2FkdmVydGlzZXJzXCIpXHJcbiAgICBjb25zdCByYWRpb0J1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShcInB1cnBvc2VcIik7XHJcblxyXG4gICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWR2ZXJ0aXNlTW9kYWxcIikuY2hlY2tlZCkge1xyXG4gICAgICAgIGFmZkZvcm0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG4gICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWZmaWxpYXRlTW9kYWxcIikuY2hlY2tlZCkge1xyXG4gICAgICAgIGFkdmVydGlzZXJzRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcmFkaW9CdXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWR2ZXJ0aXNlTW9kYWxcIikuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgYWZmRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICBhZHZlcnRpc2Vyc0Zvcm0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFmZmlsaWF0ZU1vZGFsXCIpLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIGFkdmVydGlzZXJzRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICBhZmZGb3JtLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhZmZGb3JtLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICBhZHZlcnRpc2Vyc0Zvcm0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCJjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtR2VuZXJhbFwiKTtcclxuY29uc3QgcmFkaW9CdXR0b25zID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX3JhZGlvXCIpXHJcbmNvbnN0IGxvY2F0aW9uSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIubG9jYXRpb25cIik7XHJcbmNvbnN0IGVtYWlsSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIuZW1haWxcIik7XHJcblxyXG5yYWRpb0J1dHRvbnMuZm9yRWFjaChyYWRpb0J1dHRvbiA9PiB7XHJcbiAgICByYWRpb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgaWYgKHJhZGlvQnV0dG9uLnZhbHVlID09PSBcImFmZmlsaWF0ZU1vZGFsXCIpIHtcclxuICAgICAgICAgICAgbG9jYXRpb25JbnB1dC5yZXF1aXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBlbWFpbElucHV0LnJlcXVpcmVkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyYWRpb0J1dHRvbi52YWx1ZSA9PT0gXCJhZHZlcnRpc2VNb2RhbFwiKSB7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBlbWFpbElucHV0LnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pO1xyXG4iLCJ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5jbGFzc0xpc3QuYWRkKFwibG9hZGVkXCIpXHJcbn0pO1xyXG4iLCJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gIHZhciB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52aWRlb1NlY3Rpb25fX3ZpZGVvJyk7XHJcblxyXG4gIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAodmlkZW8ucGF1c2VkKSB7XHJcbiAgICAgICAgICB2aWRlby5wbGF5KCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2aWRlby5wYXVzZSgpO1xyXG4gICAgICB9XHJcbiAgfSk7XHJcbn0pOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIVxuICogU3BsaWRlLmpzXG4gKiBWZXJzaW9uICA6IDQuMS40XG4gKiBMaWNlbnNlICA6IE1JVFxuICogQ29weXJpZ2h0OiAyMDIyIE5hb3Rvc2hpIEZ1aml0YVxuICovXG52YXIgTUVESUFfUFJFRkVSU19SRURVQ0VEX01PVElPTiA9IFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSlcIjtcbnZhciBDUkVBVEVEID0gMTtcbnZhciBNT1VOVEVEID0gMjtcbnZhciBJRExFID0gMztcbnZhciBNT1ZJTkcgPSA0O1xudmFyIFNDUk9MTElORyA9IDU7XG52YXIgRFJBR0dJTkcgPSA2O1xudmFyIERFU1RST1lFRCA9IDc7XG52YXIgU1RBVEVTID0ge1xuICBDUkVBVEVEOiBDUkVBVEVELFxuICBNT1VOVEVEOiBNT1VOVEVELFxuICBJRExFOiBJRExFLFxuICBNT1ZJTkc6IE1PVklORyxcbiAgU0NST0xMSU5HOiBTQ1JPTExJTkcsXG4gIERSQUdHSU5HOiBEUkFHR0lORyxcbiAgREVTVFJPWUVEOiBERVNUUk9ZRURcbn07XG5cbmZ1bmN0aW9uIGVtcHR5KGFycmF5KSB7XG4gIGFycmF5Lmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIHNsaWNlKGFycmF5TGlrZSwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXlMaWtlLCBzdGFydCwgZW5kKTtcbn1cblxuZnVuY3Rpb24gYXBwbHkoZnVuYykge1xuICByZXR1cm4gZnVuYy5iaW5kLmFwcGx5KGZ1bmMsIFtudWxsXS5jb25jYXQoc2xpY2UoYXJndW1lbnRzLCAxKSkpO1xufVxuXG52YXIgbmV4dFRpY2sgPSBzZXRUaW1lb3V0O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gcmFmKGZ1bmMpIHtcbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jKTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mKHR5cGUsIHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSB0eXBlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChzdWJqZWN0KSB7XG4gIHJldHVybiAhaXNOdWxsKHN1YmplY3QpICYmIHR5cGVPZihcIm9iamVjdFwiLCBzdWJqZWN0KTtcbn1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGlzRnVuY3Rpb24gPSBhcHBseSh0eXBlT2YsIFwiZnVuY3Rpb25cIik7XG52YXIgaXNTdHJpbmcgPSBhcHBseSh0eXBlT2YsIFwic3RyaW5nXCIpO1xudmFyIGlzVW5kZWZpbmVkID0gYXBwbHkodHlwZU9mLCBcInVuZGVmaW5lZFwiKTtcblxuZnVuY3Rpb24gaXNOdWxsKHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgPT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQoc3ViamVjdCkge1xuICB0cnkge1xuICAgIHJldHVybiBzdWJqZWN0IGluc3RhbmNlb2YgKHN1YmplY3Qub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLkhUTUxFbGVtZW50O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgdG9BcnJheSh2YWx1ZXMpLmZvckVhY2goaXRlcmF0ZWUpO1xufVxuXG5mdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUpID4gLTE7XG59XG5cbmZ1bmN0aW9uIHB1c2goYXJyYXksIGl0ZW1zKSB7XG4gIGFycmF5LnB1c2guYXBwbHkoYXJyYXksIHRvQXJyYXkoaXRlbXMpKTtcbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhlbG0sIGNsYXNzZXMsIGFkZCkge1xuICBpZiAoZWxtKSB7XG4gICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgZWxtLmNsYXNzTGlzdFthZGQgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0obmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxtLCBjbGFzc2VzKSB7XG4gIHRvZ2dsZUNsYXNzKGVsbSwgaXNTdHJpbmcoY2xhc3NlcykgPyBjbGFzc2VzLnNwbGl0KFwiIFwiKSA6IGNsYXNzZXMsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmQocGFyZW50LCBjaGlsZHJlbikge1xuICBmb3JFYWNoKGNoaWxkcmVuLCBwYXJlbnQuYXBwZW5kQ2hpbGQuYmluZChwYXJlbnQpKTtcbn1cblxuZnVuY3Rpb24gYmVmb3JlKG5vZGVzLCByZWYpIHtcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgcGFyZW50ID0gKHJlZiB8fCBub2RlKS5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCByZWYpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoZWxtLCBzZWxlY3Rvcikge1xuICByZXR1cm4gaXNIVE1MRWxlbWVudChlbG0pICYmIChlbG1bXCJtc01hdGNoZXNTZWxlY3RvclwiXSB8fCBlbG0ubWF0Y2hlcykuY2FsbChlbG0sIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICB2YXIgY2hpbGRyZW4yID0gcGFyZW50ID8gc2xpY2UocGFyZW50LmNoaWxkcmVuKSA6IFtdO1xuICByZXR1cm4gc2VsZWN0b3IgPyBjaGlsZHJlbjIuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBtYXRjaGVzKGNoaWxkLCBzZWxlY3Rvcik7XG4gIH0pIDogY2hpbGRyZW4yO1xufVxuXG5mdW5jdGlvbiBjaGlsZChwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA/IGNoaWxkcmVuKHBhcmVudCwgc2VsZWN0b3IpWzBdIDogcGFyZW50LmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG52YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzO1xuXG5mdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSwgcmlnaHQpIHtcbiAgaWYgKG9iamVjdCkge1xuICAgIChyaWdodCA/IG93bktleXMob2JqZWN0KS5yZXZlcnNlKCkgOiBvd25LZXlzKG9iamVjdCkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAga2V5ICE9PSBcIl9fcHJvdG9fX1wiICYmIGl0ZXJhdGVlKG9iamVjdFtrZXldLCBrZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gYXNzaWduKG9iamVjdCkge1xuICBzbGljZShhcmd1bWVudHMsIDEpLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGZvck93bihzb3VyY2UsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gbWVyZ2Uob2JqZWN0KSB7XG4gIHNsaWNlKGFyZ3VtZW50cywgMSkuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgZm9yT3duKHNvdXJjZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlLnNsaWNlKCk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IG1lcmdlKHt9LCBpc09iamVjdChvYmplY3Rba2V5XSkgPyBvYmplY3Rba2V5XSA6IHt9LCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gb21pdChvYmplY3QsIGtleXMpIHtcbiAgZm9yRWFjaChrZXlzIHx8IG93bktleXMob2JqZWN0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShlbG1zLCBhdHRycykge1xuICBmb3JFYWNoKGVsbXMsIGZ1bmN0aW9uIChlbG0pIHtcbiAgICBmb3JFYWNoKGF0dHJzLCBmdW5jdGlvbiAoYXR0cikge1xuICAgICAgZWxtICYmIGVsbS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUoZWxtcywgYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChpc09iamVjdChhdHRycykpIHtcbiAgICBmb3JPd24oYXR0cnMsIGZ1bmN0aW9uICh2YWx1ZTIsIG5hbWUpIHtcbiAgICAgIHNldEF0dHJpYnV0ZShlbG1zLCBuYW1lLCB2YWx1ZTIpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvckVhY2goZWxtcywgZnVuY3Rpb24gKGVsbSkge1xuICAgICAgaXNOdWxsKHZhbHVlKSB8fCB2YWx1ZSA9PT0gXCJcIiA/IHJlbW92ZUF0dHJpYnV0ZShlbG0sIGF0dHJzKSA6IGVsbS5zZXRBdHRyaWJ1dGUoYXR0cnMsIFN0cmluZyh2YWx1ZSkpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSh0YWcsIGF0dHJzLCBwYXJlbnQpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcblxuICBpZiAoYXR0cnMpIHtcbiAgICBpc1N0cmluZyhhdHRycykgPyBhZGRDbGFzcyhlbG0sIGF0dHJzKSA6IHNldEF0dHJpYnV0ZShlbG0sIGF0dHJzKTtcbiAgfVxuXG4gIHBhcmVudCAmJiBhcHBlbmQocGFyZW50LCBlbG0pO1xuICByZXR1cm4gZWxtO1xufVxuXG5mdW5jdGlvbiBzdHlsZShlbG0sIHByb3AsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbG0pW3Byb3BdO1xuICB9XG5cbiAgaWYgKCFpc051bGwodmFsdWUpKSB7XG4gICAgZWxtLnN0eWxlW3Byb3BdID0gXCJcIiArIHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXkoZWxtLCBkaXNwbGF5Mikge1xuICBzdHlsZShlbG0sIFwiZGlzcGxheVwiLCBkaXNwbGF5Mik7XG59XG5cbmZ1bmN0aW9uIGZvY3VzKGVsbSkge1xuICBlbG1bXCJzZXRBY3RpdmVcIl0gJiYgZWxtW1wic2V0QWN0aXZlXCJdKCkgfHwgZWxtLmZvY3VzKHtcbiAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUoZWxtLCBhdHRyKSB7XG4gIHJldHVybiBlbG0uZ2V0QXR0cmlidXRlKGF0dHIpO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbG0sIGNsYXNzTmFtZSkge1xuICByZXR1cm4gZWxtICYmIGVsbS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVjdCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG5vZGVzKSB7XG4gIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIdG1sKGh0bWwpIHtcbiAgcmV0dXJuIGNoaWxkKG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIikuYm9keSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnQoZSwgc3RvcFByb3BhZ2F0aW9uKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICBpZiAoc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5KHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5QWxsKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID8gc2xpY2UocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSA6IFtdO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbG0sIGNsYXNzZXMpIHtcbiAgdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHRpbWVPZihlKSB7XG4gIHJldHVybiBlLnRpbWVTdGFtcDtcbn1cblxuZnVuY3Rpb24gdW5pdCh2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUgOiB2YWx1ZSA/IHZhbHVlICsgXCJweFwiIDogXCJcIjtcbn1cblxudmFyIFBST0pFQ1RfQ09ERSA9IFwic3BsaWRlXCI7XG52YXIgREFUQV9BVFRSSUJVVEUgPSBcImRhdGEtXCIgKyBQUk9KRUNUX0NPREU7XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbXCIgKyBQUk9KRUNUX0NPREUgKyBcIl0gXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XG4gIH1cbn1cblxudmFyIG1pbiA9IE1hdGgubWluLFxuICAgIG1heCA9IE1hdGgubWF4LFxuICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICBjZWlsID0gTWF0aC5jZWlsLFxuICAgIGFicyA9IE1hdGguYWJzO1xuXG5mdW5jdGlvbiBhcHByb3hpbWF0ZWx5RXF1YWwoeCwgeSwgZXBzaWxvbikge1xuICByZXR1cm4gYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIGJldHdlZW4obnVtYmVyLCB4LCB5LCBleGNsdXNpdmUpIHtcbiAgdmFyIG1pbmltdW0gPSBtaW4oeCwgeSk7XG4gIHZhciBtYXhpbXVtID0gbWF4KHgsIHkpO1xuICByZXR1cm4gZXhjbHVzaXZlID8gbWluaW11bSA8IG51bWJlciAmJiBudW1iZXIgPCBtYXhpbXVtIDogbWluaW11bSA8PSBudW1iZXIgJiYgbnVtYmVyIDw9IG1heGltdW07XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG51bWJlciwgeCwgeSkge1xuICB2YXIgbWluaW11bSA9IG1pbih4LCB5KTtcbiAgdmFyIG1heGltdW0gPSBtYXgoeCwgeSk7XG4gIHJldHVybiBtaW4obWF4KG1pbmltdW0sIG51bWJlciksIG1heGltdW0pO1xufVxuXG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuICsoeCA+IDApIC0gKyh4IDwgMCk7XG59XG5cbmZ1bmN0aW9uIGNhbWVsVG9LZWJhYihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzdHJpbmcsIHJlcGxhY2VtZW50cykge1xuICBmb3JFYWNoKHJlcGxhY2VtZW50cywgZnVuY3Rpb24gKHJlcGxhY2VtZW50KSB7XG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoXCIlc1wiLCBcIlwiICsgcmVwbGFjZW1lbnQpO1xuICB9KTtcbiAgcmV0dXJuIHN0cmluZztcbn1cblxuZnVuY3Rpb24gcGFkKG51bWJlcikge1xuICByZXR1cm4gbnVtYmVyIDwgMTAgPyBcIjBcIiArIG51bWJlciA6IFwiXCIgKyBudW1iZXI7XG59XG5cbnZhciBpZHMgPSB7fTtcblxuZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gIHJldHVybiBcIlwiICsgcHJlZml4ICsgcGFkKGlkc1twcmVmaXhdID0gKGlkc1twcmVmaXhdIHx8IDApICsgMSk7XG59XG5cbmZ1bmN0aW9uIEV2ZW50QmluZGVyKCkge1xuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYmluZCh0YXJnZXRzLCBldmVudHMsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgZm9yRWFjaEV2ZW50KHRhcmdldHMsIGV2ZW50cywgZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQsIG5hbWVzcGFjZSkge1xuICAgICAgdmFyIGlzRXZlbnRUYXJnZXQgPSAoXCJhZGRFdmVudExpc3RlbmVyXCIgaW4gdGFyZ2V0KTtcbiAgICAgIHZhciByZW1vdmVyID0gaXNFdmVudFRhcmdldCA/IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyLmJpbmQodGFyZ2V0LCBldmVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIDogdGFyZ2V0W1wicmVtb3ZlTGlzdGVuZXJcIl0uYmluZCh0YXJnZXQsIGNhbGxiYWNrKTtcbiAgICAgIGlzRXZlbnRUYXJnZXQgPyB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIDogdGFyZ2V0W1wiYWRkTGlzdGVuZXJcIl0oY2FsbGJhY2spO1xuICAgICAgbGlzdGVuZXJzLnB1c2goW3RhcmdldCwgZXZlbnQsIG5hbWVzcGFjZSwgY2FsbGJhY2ssIHJlbW92ZXJdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuYmluZCh0YXJnZXRzLCBldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgZm9yRWFjaEV2ZW50KHRhcmdldHMsIGV2ZW50cywgZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQsIG5hbWVzcGFjZSkge1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyWzBdID09PSB0YXJnZXQgJiYgbGlzdGVuZXJbMV0gPT09IGV2ZW50ICYmIGxpc3RlbmVyWzJdID09PSBuYW1lc3BhY2UgJiYgKCFjYWxsYmFjayB8fCBsaXN0ZW5lclszXSA9PT0gY2FsbGJhY2spKSB7XG4gICAgICAgICAgbGlzdGVuZXJbNF0oKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2godGFyZ2V0LCB0eXBlLCBkZXRhaWwpIHtcbiAgICB2YXIgZTtcbiAgICB2YXIgYnViYmxlcyA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIEN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGUgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICBkZXRhaWw6IGRldGFpbFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgYnViYmxlcywgZmFsc2UsIGRldGFpbCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JFYWNoRXZlbnQodGFyZ2V0cywgZXZlbnRzLCBpdGVyYXRlZSkge1xuICAgIGZvckVhY2godGFyZ2V0cywgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgdGFyZ2V0ICYmIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbiAoZXZlbnRzMikge1xuICAgICAgICBldmVudHMyLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5TKSB7XG4gICAgICAgICAgdmFyIGZyYWdtZW50ID0gZXZlbnROUy5zcGxpdChcIi5cIik7XG4gICAgICAgICAgaXRlcmF0ZWUodGFyZ2V0LCBmcmFnbWVudFswXSwgZnJhZ21lbnRbMV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgZGF0YVs0XSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KGxpc3RlbmVycyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJpbmQ6IGJpbmQsXG4gICAgdW5iaW5kOiB1bmJpbmQsXG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfTtcbn1cblxudmFyIEVWRU5UX01PVU5URUQgPSBcIm1vdW50ZWRcIjtcbnZhciBFVkVOVF9SRUFEWSA9IFwicmVhZHlcIjtcbnZhciBFVkVOVF9NT1ZFID0gXCJtb3ZlXCI7XG52YXIgRVZFTlRfTU9WRUQgPSBcIm1vdmVkXCI7XG52YXIgRVZFTlRfQ0xJQ0sgPSBcImNsaWNrXCI7XG52YXIgRVZFTlRfQUNUSVZFID0gXCJhY3RpdmVcIjtcbnZhciBFVkVOVF9JTkFDVElWRSA9IFwiaW5hY3RpdmVcIjtcbnZhciBFVkVOVF9WSVNJQkxFID0gXCJ2aXNpYmxlXCI7XG52YXIgRVZFTlRfSElEREVOID0gXCJoaWRkZW5cIjtcbnZhciBFVkVOVF9SRUZSRVNIID0gXCJyZWZyZXNoXCI7XG52YXIgRVZFTlRfVVBEQVRFRCA9IFwidXBkYXRlZFwiO1xudmFyIEVWRU5UX1JFU0laRSA9IFwicmVzaXplXCI7XG52YXIgRVZFTlRfUkVTSVpFRCA9IFwicmVzaXplZFwiO1xudmFyIEVWRU5UX0RSQUcgPSBcImRyYWdcIjtcbnZhciBFVkVOVF9EUkFHR0lORyA9IFwiZHJhZ2dpbmdcIjtcbnZhciBFVkVOVF9EUkFHR0VEID0gXCJkcmFnZ2VkXCI7XG52YXIgRVZFTlRfU0NST0xMID0gXCJzY3JvbGxcIjtcbnZhciBFVkVOVF9TQ1JPTExFRCA9IFwic2Nyb2xsZWRcIjtcbnZhciBFVkVOVF9PVkVSRkxPVyA9IFwib3ZlcmZsb3dcIjtcbnZhciBFVkVOVF9ERVNUUk9ZID0gXCJkZXN0cm95XCI7XG52YXIgRVZFTlRfQVJST1dTX01PVU5URUQgPSBcImFycm93czptb3VudGVkXCI7XG52YXIgRVZFTlRfQVJST1dTX1VQREFURUQgPSBcImFycm93czp1cGRhdGVkXCI7XG52YXIgRVZFTlRfUEFHSU5BVElPTl9NT1VOVEVEID0gXCJwYWdpbmF0aW9uOm1vdW50ZWRcIjtcbnZhciBFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQgPSBcInBhZ2luYXRpb246dXBkYXRlZFwiO1xudmFyIEVWRU5UX05BVklHQVRJT05fTU9VTlRFRCA9IFwibmF2aWdhdGlvbjptb3VudGVkXCI7XG52YXIgRVZFTlRfQVVUT1BMQVlfUExBWSA9IFwiYXV0b3BsYXk6cGxheVwiO1xudmFyIEVWRU5UX0FVVE9QTEFZX1BMQVlJTkcgPSBcImF1dG9wbGF5OnBsYXlpbmdcIjtcbnZhciBFVkVOVF9BVVRPUExBWV9QQVVTRSA9IFwiYXV0b3BsYXk6cGF1c2VcIjtcbnZhciBFVkVOVF9MQVpZTE9BRF9MT0FERUQgPSBcImxhenlsb2FkOmxvYWRlZFwiO1xudmFyIEVWRU5UX1NMSURFX0tFWURPV04gPSBcInNrXCI7XG52YXIgRVZFTlRfU0hJRlRFRCA9IFwic2hcIjtcbnZhciBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRCA9IFwiZWlcIjtcblxuZnVuY3Rpb24gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMikge1xuICB2YXIgYnVzID0gU3BsaWRlMiA/IFNwbGlkZTIuZXZlbnQuYnVzIDogZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgYmluZGVyID0gRXZlbnRCaW5kZXIoKTtcblxuICBmdW5jdGlvbiBvbihldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgYmluZGVyLmJpbmQoYnVzLCB0b0FycmF5KGV2ZW50cykuam9pbihcIiBcIiksIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjYWxsYmFjay5hcHBseShjYWxsYmFjaywgaXNBcnJheShlLmRldGFpbCkgPyBlLmRldGFpbCA6IFtdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICBiaW5kZXIuZGlzcGF0Y2goYnVzLCBldmVudCwgc2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gIH1cblxuICBpZiAoU3BsaWRlMikge1xuICAgIFNwbGlkZTIuZXZlbnQub24oRVZFTlRfREVTVFJPWSwgYmluZGVyLmRlc3Ryb3kpO1xuICB9XG5cbiAgcmV0dXJuIGFzc2lnbihiaW5kZXIsIHtcbiAgICBidXM6IGJ1cyxcbiAgICBvbjogb24sXG4gICAgb2ZmOiBhcHBseShiaW5kZXIudW5iaW5kLCBidXMpLFxuICAgIGVtaXQ6IGVtaXRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIFJlcXVlc3RJbnRlcnZhbChpbnRlcnZhbCwgb25JbnRlcnZhbCwgb25VcGRhdGUsIGxpbWl0KSB7XG4gIHZhciBub3cgPSBEYXRlLm5vdztcbiAgdmFyIHN0YXJ0VGltZTtcbiAgdmFyIHJhdGUgPSAwO1xuICB2YXIgaWQ7XG4gIHZhciBwYXVzZWQgPSB0cnVlO1xuICB2YXIgY291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIXBhdXNlZCkge1xuICAgICAgcmF0ZSA9IGludGVydmFsID8gbWluKChub3coKSAtIHN0YXJ0VGltZSkgLyBpbnRlcnZhbCwgMSkgOiAxO1xuICAgICAgb25VcGRhdGUgJiYgb25VcGRhdGUocmF0ZSk7XG5cbiAgICAgIGlmIChyYXRlID49IDEpIHtcbiAgICAgICAgb25JbnRlcnZhbCgpO1xuICAgICAgICBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgICBpZiAobGltaXQgJiYgKytjb3VudCA+PSBsaW1pdCkge1xuICAgICAgICAgIHJldHVybiBwYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlkID0gcmFmKHVwZGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQocmVzdW1lKSB7XG4gICAgcmVzdW1lIHx8IGNhbmNlbCgpO1xuICAgIHN0YXJ0VGltZSA9IG5vdygpIC0gKHJlc3VtZSA/IHJhdGUgKiBpbnRlcnZhbCA6IDApO1xuICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgIGlkID0gcmFmKHVwZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBwYXVzZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV3aW5kKCkge1xuICAgIHN0YXJ0VGltZSA9IG5vdygpO1xuICAgIHJhdGUgPSAwO1xuXG4gICAgaWYgKG9uVXBkYXRlKSB7XG4gICAgICBvblVwZGF0ZShyYXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWQgJiYgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgIHJhdGUgPSAwO1xuICAgIGlkID0gMDtcbiAgICBwYXVzZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0KHRpbWUpIHtcbiAgICBpbnRlcnZhbCA9IHRpbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdXNlZCgpIHtcbiAgICByZXR1cm4gcGF1c2VkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgcmV3aW5kOiByZXdpbmQsXG4gICAgcGF1c2U6IHBhdXNlLFxuICAgIGNhbmNlbDogY2FuY2VsLFxuICAgIHNldDogc2V0LFxuICAgIGlzUGF1c2VkOiBpc1BhdXNlZFxuICB9O1xufVxuXG5mdW5jdGlvbiBTdGF0ZShpbml0aWFsU3RhdGUpIHtcbiAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gIGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIHN0YXRlID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBpcyhzdGF0ZXMpIHtcbiAgICByZXR1cm4gaW5jbHVkZXModG9BcnJheShzdGF0ZXMpLCBzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldDogc2V0LFxuICAgIGlzOiBpc1xuICB9O1xufVxuXG5mdW5jdGlvbiBUaHJvdHRsZShmdW5jLCBkdXJhdGlvbikge1xuICB2YXIgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoZHVyYXRpb24gfHwgMCwgZnVuYywgbnVsbCwgMSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW50ZXJ2YWwuaXNQYXVzZWQoKSAmJiBpbnRlcnZhbC5zdGFydCgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBNZWRpYShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSBTcGxpZGUyLnN0YXRlO1xuICB2YXIgYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzIHx8IHt9O1xuICB2YXIgcmVkdWNlZE1vdGlvbiA9IG9wdGlvbnMucmVkdWNlZE1vdGlvbiB8fCB7fTtcbiAgdmFyIGJpbmRlciA9IEV2ZW50QmluZGVyKCk7XG4gIHZhciBxdWVyaWVzID0gW107XG5cbiAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdmFyIGlzTWluID0gb3B0aW9ucy5tZWRpYVF1ZXJ5ID09PSBcIm1pblwiO1xuICAgIG93bktleXMoYnJlYWtwb2ludHMpLnNvcnQoZnVuY3Rpb24gKG4sIG0pIHtcbiAgICAgIHJldHVybiBpc01pbiA/ICtuIC0gK20gOiArbSAtICtuO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmVnaXN0ZXIoYnJlYWtwb2ludHNba2V5XSwgXCIoXCIgKyAoaXNNaW4gPyBcIm1pblwiIDogXCJtYXhcIikgKyBcIi13aWR0aDpcIiArIGtleSArIFwicHgpXCIpO1xuICAgIH0pO1xuICAgIHJlZ2lzdGVyKHJlZHVjZWRNb3Rpb24sIE1FRElBX1BSRUZFUlNfUkVEVUNFRF9NT1RJT04pO1xuICAgIHVwZGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveShjb21wbGV0ZWx5KSB7XG4gICAgaWYgKGNvbXBsZXRlbHkpIHtcbiAgICAgIGJpbmRlci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIob3B0aW9uczIsIHF1ZXJ5KSB7XG4gICAgdmFyIHF1ZXJ5TGlzdCA9IG1hdGNoTWVkaWEocXVlcnkpO1xuICAgIGJpbmRlci5iaW5kKHF1ZXJ5TGlzdCwgXCJjaGFuZ2VcIiwgdXBkYXRlKTtcbiAgICBxdWVyaWVzLnB1c2goW29wdGlvbnMyLCBxdWVyeUxpc3RdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgZGVzdHJveWVkID0gc3RhdGUuaXMoREVTVFJPWUVEKTtcbiAgICB2YXIgZGlyZWN0aW9uID0gb3B0aW9ucy5kaXJlY3Rpb247XG4gICAgdmFyIG1lcmdlZCA9IHF1ZXJpZXMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQyLCBlbnRyeSkge1xuICAgICAgcmV0dXJuIG1lcmdlKG1lcmdlZDIsIGVudHJ5WzFdLm1hdGNoZXMgPyBlbnRyeVswXSA6IHt9KTtcbiAgICB9LCB7fSk7XG4gICAgb21pdChvcHRpb25zKTtcbiAgICBzZXQobWVyZ2VkKTtcblxuICAgIGlmIChvcHRpb25zLmRlc3Ryb3kpIHtcbiAgICAgIFNwbGlkZTIuZGVzdHJveShvcHRpb25zLmRlc3Ryb3kgPT09IFwiY29tcGxldGVseVwiKTtcbiAgICB9IGVsc2UgaWYgKGRlc3Ryb3llZCkge1xuICAgICAgZGVzdHJveSh0cnVlKTtcbiAgICAgIFNwbGlkZTIubW91bnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlyZWN0aW9uICE9PSBvcHRpb25zLmRpcmVjdGlvbiAmJiBTcGxpZGUyLnJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWR1Y2UoZW5hYmxlKSB7XG4gICAgaWYgKG1hdGNoTWVkaWEoTUVESUFfUFJFRkVSU19SRURVQ0VEX01PVElPTikubWF0Y2hlcykge1xuICAgICAgZW5hYmxlID8gbWVyZ2Uob3B0aW9ucywgcmVkdWNlZE1vdGlvbikgOiBvbWl0KG9wdGlvbnMsIG93bktleXMocmVkdWNlZE1vdGlvbikpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldChvcHRzLCBiYXNlLCBub3RpZnkpIHtcbiAgICBtZXJnZShvcHRpb25zLCBvcHRzKTtcbiAgICBiYXNlICYmIG1lcmdlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvcHRpb25zKSwgb3B0cyk7XG5cbiAgICBpZiAobm90aWZ5IHx8ICFzdGF0ZS5pcyhDUkVBVEVEKSkge1xuICAgICAgU3BsaWRlMi5lbWl0KEVWRU5UX1VQREFURUQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dXA6IHNldHVwLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgcmVkdWNlOiByZWR1Y2UsXG4gICAgc2V0OiBzZXRcbiAgfTtcbn1cblxudmFyIEFSUk9XID0gXCJBcnJvd1wiO1xudmFyIEFSUk9XX0xFRlQgPSBBUlJPVyArIFwiTGVmdFwiO1xudmFyIEFSUk9XX1JJR0hUID0gQVJST1cgKyBcIlJpZ2h0XCI7XG52YXIgQVJST1dfVVAgPSBBUlJPVyArIFwiVXBcIjtcbnZhciBBUlJPV19ET1dOID0gQVJST1cgKyBcIkRvd25cIjtcbnZhciBMVFIgPSBcImx0clwiO1xudmFyIFJUTCA9IFwicnRsXCI7XG52YXIgVFRCID0gXCJ0dGJcIjtcbnZhciBPUklFTlRBVElPTl9NQVAgPSB7XG4gIHdpZHRoOiBbXCJoZWlnaHRcIl0sXG4gIGxlZnQ6IFtcInRvcFwiLCBcInJpZ2h0XCJdLFxuICByaWdodDogW1wiYm90dG9tXCIsIFwibGVmdFwiXSxcbiAgeDogW1wieVwiXSxcbiAgWDogW1wiWVwiXSxcbiAgWTogW1wiWFwiXSxcbiAgQXJyb3dMZWZ0OiBbQVJST1dfVVAsIEFSUk9XX1JJR0hUXSxcbiAgQXJyb3dSaWdodDogW0FSUk9XX0RPV04sIEFSUk9XX0xFRlRdXG59O1xuXG5mdW5jdGlvbiBEaXJlY3Rpb24oU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgZnVuY3Rpb24gcmVzb2x2ZShwcm9wLCBheGlzT25seSwgZGlyZWN0aW9uKSB7XG4gICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIHZhciBpbmRleCA9IGRpcmVjdGlvbiA9PT0gUlRMICYmICFheGlzT25seSA/IDEgOiBkaXJlY3Rpb24gPT09IFRUQiA/IDAgOiAtMTtcbiAgICByZXR1cm4gT1JJRU5UQVRJT05fTUFQW3Byb3BdICYmIE9SSUVOVEFUSU9OX01BUFtwcm9wXVtpbmRleF0gfHwgcHJvcC5yZXBsYWNlKC93aWR0aHxsZWZ0fHJpZ2h0L2ksIGZ1bmN0aW9uIChtYXRjaCwgb2Zmc2V0KSB7XG4gICAgICB2YXIgcmVwbGFjZW1lbnQgPSBPUklFTlRBVElPTl9NQVBbbWF0Y2gudG9Mb3dlckNhc2UoKV1baW5kZXhdIHx8IG1hdGNoO1xuICAgICAgcmV0dXJuIG9mZnNldCA+IDAgPyByZXBsYWNlbWVudC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlcGxhY2VtZW50LnNsaWNlKDEpIDogcmVwbGFjZW1lbnQ7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvcmllbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgKiAob3B0aW9ucy5kaXJlY3Rpb24gPT09IFJUTCA/IDEgOiAtMSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgb3JpZW50OiBvcmllbnRcbiAgfTtcbn1cblxudmFyIFJPTEUgPSBcInJvbGVcIjtcbnZhciBUQUJfSU5ERVggPSBcInRhYmluZGV4XCI7XG52YXIgRElTQUJMRUQgPSBcImRpc2FibGVkXCI7XG52YXIgQVJJQV9QUkVGSVggPSBcImFyaWEtXCI7XG52YXIgQVJJQV9DT05UUk9MUyA9IEFSSUFfUFJFRklYICsgXCJjb250cm9sc1wiO1xudmFyIEFSSUFfQ1VSUkVOVCA9IEFSSUFfUFJFRklYICsgXCJjdXJyZW50XCI7XG52YXIgQVJJQV9TRUxFQ1RFRCA9IEFSSUFfUFJFRklYICsgXCJzZWxlY3RlZFwiO1xudmFyIEFSSUFfTEFCRUwgPSBBUklBX1BSRUZJWCArIFwibGFiZWxcIjtcbnZhciBBUklBX0xBQkVMTEVEQlkgPSBBUklBX1BSRUZJWCArIFwibGFiZWxsZWRieVwiO1xudmFyIEFSSUFfSElEREVOID0gQVJJQV9QUkVGSVggKyBcImhpZGRlblwiO1xudmFyIEFSSUFfT1JJRU5UQVRJT04gPSBBUklBX1BSRUZJWCArIFwib3JpZW50YXRpb25cIjtcbnZhciBBUklBX1JPTEVERVNDUklQVElPTiA9IEFSSUFfUFJFRklYICsgXCJyb2xlZGVzY3JpcHRpb25cIjtcbnZhciBBUklBX0xJVkUgPSBBUklBX1BSRUZJWCArIFwibGl2ZVwiO1xudmFyIEFSSUFfQlVTWSA9IEFSSUFfUFJFRklYICsgXCJidXN5XCI7XG52YXIgQVJJQV9BVE9NSUMgPSBBUklBX1BSRUZJWCArIFwiYXRvbWljXCI7XG52YXIgQUxMX0FUVFJJQlVURVMgPSBbUk9MRSwgVEFCX0lOREVYLCBESVNBQkxFRCwgQVJJQV9DT05UUk9MUywgQVJJQV9DVVJSRU5ULCBBUklBX0xBQkVMLCBBUklBX0xBQkVMTEVEQlksIEFSSUFfSElEREVOLCBBUklBX09SSUVOVEFUSU9OLCBBUklBX1JPTEVERVNDUklQVElPTl07XG52YXIgQ0xBU1NfUFJFRklYID0gUFJPSkVDVF9DT0RFICsgXCJfX1wiO1xudmFyIFNUQVRVU19DTEFTU19QUkVGSVggPSBcImlzLVwiO1xudmFyIENMQVNTX1JPT1QgPSBQUk9KRUNUX0NPREU7XG52YXIgQ0xBU1NfVFJBQ0sgPSBDTEFTU19QUkVGSVggKyBcInRyYWNrXCI7XG52YXIgQ0xBU1NfTElTVCA9IENMQVNTX1BSRUZJWCArIFwibGlzdFwiO1xudmFyIENMQVNTX1NMSURFID0gQ0xBU1NfUFJFRklYICsgXCJzbGlkZVwiO1xudmFyIENMQVNTX0NMT05FID0gQ0xBU1NfU0xJREUgKyBcIi0tY2xvbmVcIjtcbnZhciBDTEFTU19DT05UQUlORVIgPSBDTEFTU19TTElERSArIFwiX19jb250YWluZXJcIjtcbnZhciBDTEFTU19BUlJPV1MgPSBDTEFTU19QUkVGSVggKyBcImFycm93c1wiO1xudmFyIENMQVNTX0FSUk9XID0gQ0xBU1NfUFJFRklYICsgXCJhcnJvd1wiO1xudmFyIENMQVNTX0FSUk9XX1BSRVYgPSBDTEFTU19BUlJPVyArIFwiLS1wcmV2XCI7XG52YXIgQ0xBU1NfQVJST1dfTkVYVCA9IENMQVNTX0FSUk9XICsgXCItLW5leHRcIjtcbnZhciBDTEFTU19QQUdJTkFUSU9OID0gQ0xBU1NfUFJFRklYICsgXCJwYWdpbmF0aW9uXCI7XG52YXIgQ0xBU1NfUEFHSU5BVElPTl9QQUdFID0gQ0xBU1NfUEFHSU5BVElPTiArIFwiX19wYWdlXCI7XG52YXIgQ0xBU1NfUFJPR1JFU1MgPSBDTEFTU19QUkVGSVggKyBcInByb2dyZXNzXCI7XG52YXIgQ0xBU1NfUFJPR1JFU1NfQkFSID0gQ0xBU1NfUFJPR1JFU1MgKyBcIl9fYmFyXCI7XG52YXIgQ0xBU1NfVE9HR0xFID0gQ0xBU1NfUFJFRklYICsgXCJ0b2dnbGVcIjtcbnZhciBDTEFTU19UT0dHTEVfUExBWSA9IENMQVNTX1RPR0dMRSArIFwiX19wbGF5XCI7XG52YXIgQ0xBU1NfVE9HR0xFX1BBVVNFID0gQ0xBU1NfVE9HR0xFICsgXCJfX3BhdXNlXCI7XG52YXIgQ0xBU1NfU1BJTk5FUiA9IENMQVNTX1BSRUZJWCArIFwic3Bpbm5lclwiO1xudmFyIENMQVNTX1NSID0gQ0xBU1NfUFJFRklYICsgXCJzclwiO1xudmFyIENMQVNTX0lOSVRJQUxJWkVEID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwiaW5pdGlhbGl6ZWRcIjtcbnZhciBDTEFTU19BQ1RJVkUgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJhY3RpdmVcIjtcbnZhciBDTEFTU19QUkVWID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwicHJldlwiO1xudmFyIENMQVNTX05FWFQgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJuZXh0XCI7XG52YXIgQ0xBU1NfVklTSUJMRSA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcInZpc2libGVcIjtcbnZhciBDTEFTU19MT0FESU5HID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwibG9hZGluZ1wiO1xudmFyIENMQVNTX0ZPQ1VTX0lOID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwiZm9jdXMtaW5cIjtcbnZhciBDTEFTU19PVkVSRkxPVyA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcIm92ZXJmbG93XCI7XG52YXIgU1RBVFVTX0NMQVNTRVMgPSBbQ0xBU1NfQUNUSVZFLCBDTEFTU19WSVNJQkxFLCBDTEFTU19QUkVWLCBDTEFTU19ORVhULCBDTEFTU19MT0FESU5HLCBDTEFTU19GT0NVU19JTiwgQ0xBU1NfT1ZFUkZMT1ddO1xudmFyIENMQVNTRVMgPSB7XG4gIHNsaWRlOiBDTEFTU19TTElERSxcbiAgY2xvbmU6IENMQVNTX0NMT05FLFxuICBhcnJvd3M6IENMQVNTX0FSUk9XUyxcbiAgYXJyb3c6IENMQVNTX0FSUk9XLFxuICBwcmV2OiBDTEFTU19BUlJPV19QUkVWLFxuICBuZXh0OiBDTEFTU19BUlJPV19ORVhULFxuICBwYWdpbmF0aW9uOiBDTEFTU19QQUdJTkFUSU9OLFxuICBwYWdlOiBDTEFTU19QQUdJTkFUSU9OX1BBR0UsXG4gIHNwaW5uZXI6IENMQVNTX1NQSU5ORVJcbn07XG5cbmZ1bmN0aW9uIGNsb3Nlc3QoZnJvbSwgc2VsZWN0b3IpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZnJvbS5jbG9zZXN0KSkge1xuICAgIHJldHVybiBmcm9tLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICB9XG5cbiAgdmFyIGVsbSA9IGZyb207XG5cbiAgd2hpbGUgKGVsbSAmJiBlbG0ubm9kZVR5cGUgPT09IDEpIHtcbiAgICBpZiAobWF0Y2hlcyhlbG0sIHNlbGVjdG9yKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZWxtID0gZWxtLnBhcmVudEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZWxtO1xufVxuXG52YXIgRlJJQ1RJT04gPSA1O1xudmFyIExPR19JTlRFUlZBTCA9IDIwMDtcbnZhciBQT0lOVEVSX0RPV05fRVZFTlRTID0gXCJ0b3VjaHN0YXJ0IG1vdXNlZG93blwiO1xudmFyIFBPSU5URVJfTU9WRV9FVkVOVFMgPSBcInRvdWNobW92ZSBtb3VzZW1vdmVcIjtcbnZhciBQT0lOVEVSX1VQX0VWRU5UUyA9IFwidG91Y2hlbmQgdG91Y2hjYW5jZWwgbW91c2V1cCBjbGlja1wiO1xuXG5mdW5jdGlvbiBFbGVtZW50cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZS5vbixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UuYmluZDtcblxuICB2YXIgcm9vdCA9IFNwbGlkZTIucm9vdDtcbiAgdmFyIGkxOG4gPSBvcHRpb25zLmkxOG47XG4gIHZhciBlbGVtZW50cyA9IHt9O1xuICB2YXIgc2xpZGVzID0gW107XG4gIHZhciByb290Q2xhc3NlcyA9IFtdO1xuICB2YXIgdHJhY2tDbGFzc2VzID0gW107XG4gIHZhciB0cmFjaztcbiAgdmFyIGxpc3Q7XG4gIHZhciBpc1VzaW5nS2V5O1xuXG4gIGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIGNvbGxlY3QoKTtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9SRUZSRVNILCBkZXN0cm95KTtcbiAgICBvbihFVkVOVF9SRUZSRVNILCBzZXR1cCk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgdXBkYXRlKTtcbiAgICBiaW5kKGRvY3VtZW50LCBQT0lOVEVSX0RPV05fRVZFTlRTICsgXCIga2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaXNVc2luZ0tleSA9IGUudHlwZSA9PT0gXCJrZXlkb3duXCI7XG4gICAgfSwge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICAgIGJpbmQocm9vdCwgXCJmb2N1c2luXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRvZ2dsZUNsYXNzKHJvb3QsIENMQVNTX0ZPQ1VTX0lOLCAhIWlzVXNpbmdLZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveShjb21wbGV0ZWx5KSB7XG4gICAgdmFyIGF0dHJzID0gQUxMX0FUVFJJQlVURVMuY29uY2F0KFwic3R5bGVcIik7XG4gICAgZW1wdHkoc2xpZGVzKTtcbiAgICByZW1vdmVDbGFzcyhyb290LCByb290Q2xhc3Nlcyk7XG4gICAgcmVtb3ZlQ2xhc3ModHJhY2ssIHRyYWNrQ2xhc3Nlcyk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKFt0cmFjaywgbGlzdF0sIGF0dHJzKTtcbiAgICByZW1vdmVBdHRyaWJ1dGUocm9vdCwgY29tcGxldGVseSA/IGF0dHJzIDogW1wic3R5bGVcIiwgQVJJQV9ST0xFREVTQ1JJUFRJT05dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICByZW1vdmVDbGFzcyhyb290LCByb290Q2xhc3Nlcyk7XG4gICAgcmVtb3ZlQ2xhc3ModHJhY2ssIHRyYWNrQ2xhc3Nlcyk7XG4gICAgcm9vdENsYXNzZXMgPSBnZXRDbGFzc2VzKENMQVNTX1JPT1QpO1xuICAgIHRyYWNrQ2xhc3NlcyA9IGdldENsYXNzZXMoQ0xBU1NfVFJBQ0spO1xuICAgIGFkZENsYXNzKHJvb3QsIHJvb3RDbGFzc2VzKTtcbiAgICBhZGRDbGFzcyh0cmFjaywgdHJhY2tDbGFzc2VzKTtcbiAgICBzZXRBdHRyaWJ1dGUocm9vdCwgQVJJQV9MQUJFTCwgb3B0aW9ucy5sYWJlbCk7XG4gICAgc2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfTEFCRUxMRURCWSwgb3B0aW9ucy5sYWJlbGxlZGJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbGxlY3QoKSB7XG4gICAgdHJhY2sgPSBmaW5kKFwiLlwiICsgQ0xBU1NfVFJBQ0spO1xuICAgIGxpc3QgPSBjaGlsZCh0cmFjaywgXCIuXCIgKyBDTEFTU19MSVNUKTtcbiAgICBhc3NlcnQodHJhY2sgJiYgbGlzdCwgXCJBIHRyYWNrL2xpc3QgZWxlbWVudCBpcyBtaXNzaW5nLlwiKTtcbiAgICBwdXNoKHNsaWRlcywgY2hpbGRyZW4obGlzdCwgXCIuXCIgKyBDTEFTU19TTElERSArIFwiOm5vdCguXCIgKyBDTEFTU19DTE9ORSArIFwiKVwiKSk7XG4gICAgZm9yT3duKHtcbiAgICAgIGFycm93czogQ0xBU1NfQVJST1dTLFxuICAgICAgcGFnaW5hdGlvbjogQ0xBU1NfUEFHSU5BVElPTixcbiAgICAgIHByZXY6IENMQVNTX0FSUk9XX1BSRVYsXG4gICAgICBuZXh0OiBDTEFTU19BUlJPV19ORVhULFxuICAgICAgYmFyOiBDTEFTU19QUk9HUkVTU19CQVIsXG4gICAgICB0b2dnbGU6IENMQVNTX1RPR0dMRVxuICAgIH0sIGZ1bmN0aW9uIChjbGFzc05hbWUsIGtleSkge1xuICAgICAgZWxlbWVudHNba2V5XSA9IGZpbmQoXCIuXCIgKyBjbGFzc05hbWUpO1xuICAgIH0pO1xuICAgIGFzc2lnbihlbGVtZW50cywge1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgIGxpc3Q6IGxpc3QsXG4gICAgICBzbGlkZXM6IHNsaWRlc1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgaWQgPSByb290LmlkIHx8IHVuaXF1ZUlkKFBST0pFQ1RfQ09ERSk7XG4gICAgdmFyIHJvbGUgPSBvcHRpb25zLnJvbGU7XG4gICAgcm9vdC5pZCA9IGlkO1xuICAgIHRyYWNrLmlkID0gdHJhY2suaWQgfHwgaWQgKyBcIi10cmFja1wiO1xuICAgIGxpc3QuaWQgPSBsaXN0LmlkIHx8IGlkICsgXCItbGlzdFwiO1xuXG4gICAgaWYgKCFnZXRBdHRyaWJ1dGUocm9vdCwgUk9MRSkgJiYgcm9vdC50YWdOYW1lICE9PSBcIlNFQ1RJT05cIiAmJiByb2xlKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUocm9vdCwgUk9MRSwgcm9sZSk7XG4gICAgfVxuXG4gICAgc2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfUk9MRURFU0NSSVBUSU9OLCBpMThuLmNhcm91c2VsKTtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgUk9MRSwgXCJwcmVzZW50YXRpb25cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gICAgdmFyIGVsbSA9IHF1ZXJ5KHJvb3QsIHNlbGVjdG9yKTtcbiAgICByZXR1cm4gZWxtICYmIGNsb3Nlc3QoZWxtLCBcIi5cIiArIENMQVNTX1JPT1QpID09PSByb290ID8gZWxtIDogdm9pZCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NlcyhiYXNlKSB7XG4gICAgcmV0dXJuIFtiYXNlICsgXCItLVwiICsgb3B0aW9ucy50eXBlLCBiYXNlICsgXCItLVwiICsgb3B0aW9ucy5kaXJlY3Rpb24sIG9wdGlvbnMuZHJhZyAmJiBiYXNlICsgXCItLWRyYWdnYWJsZVwiLCBvcHRpb25zLmlzTmF2aWdhdGlvbiAmJiBiYXNlICsgXCItLW5hdlwiLCBiYXNlID09PSBDTEFTU19ST09UICYmIENMQVNTX0FDVElWRV07XG4gIH1cblxuICByZXR1cm4gYXNzaWduKGVsZW1lbnRzLCB7XG4gICAgc2V0dXA6IHNldHVwLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH0pO1xufVxuXG52YXIgU0xJREUgPSBcInNsaWRlXCI7XG52YXIgTE9PUCA9IFwibG9vcFwiO1xudmFyIEZBREUgPSBcImZhZGVcIjtcblxuZnVuY3Rpb24gU2xpZGUkMShTcGxpZGUyLCBpbmRleCwgc2xpZGVJbmRleCwgc2xpZGUpIHtcbiAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIHZhciBvbiA9IGV2ZW50Lm9uLFxuICAgICAgZW1pdCA9IGV2ZW50LmVtaXQsXG4gICAgICBiaW5kID0gZXZlbnQuYmluZDtcbiAgdmFyIENvbXBvbmVudHMgPSBTcGxpZGUyLkNvbXBvbmVudHMsXG4gICAgICByb290ID0gU3BsaWRlMi5yb290LFxuICAgICAgb3B0aW9ucyA9IFNwbGlkZTIub3B0aW9ucztcbiAgdmFyIGlzTmF2aWdhdGlvbiA9IG9wdGlvbnMuaXNOYXZpZ2F0aW9uLFxuICAgICAgdXBkYXRlT25Nb3ZlID0gb3B0aW9ucy51cGRhdGVPbk1vdmUsXG4gICAgICBpMThuID0gb3B0aW9ucy5pMThuLFxuICAgICAgcGFnaW5hdGlvbiA9IG9wdGlvbnMucGFnaW5hdGlvbixcbiAgICAgIHNsaWRlRm9jdXMgPSBvcHRpb25zLnNsaWRlRm9jdXM7XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIHN0eWxlcyA9IGdldEF0dHJpYnV0ZShzbGlkZSwgXCJzdHlsZVwiKTtcbiAgdmFyIGxhYmVsID0gZ2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMKTtcbiAgdmFyIGlzQ2xvbmUgPSBzbGlkZUluZGV4ID4gLTE7XG4gIHZhciBjb250YWluZXIgPSBjaGlsZChzbGlkZSwgXCIuXCIgKyBDTEFTU19DT05UQUlORVIpO1xuICB2YXIgZGVzdHJveWVkO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmICghaXNDbG9uZSkge1xuICAgICAgc2xpZGUuaWQgPSByb290LmlkICsgXCItc2xpZGVcIiArIHBhZChpbmRleCArIDEpO1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBST0xFLCBwYWdpbmF0aW9uID8gXCJ0YWJwYW5lbFwiIDogXCJncm91cFwiKTtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9ST0xFREVTQ1JJUFRJT04sIGkxOG4uc2xpZGUpO1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMLCBsYWJlbCB8fCBmb3JtYXQoaTE4bi5zbGlkZUxhYmVsLCBbaW5kZXggKyAxLCBTcGxpZGUyLmxlbmd0aF0pKTtcbiAgICB9XG5cbiAgICBsaXN0ZW4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICBiaW5kKHNsaWRlLCBcImNsaWNrXCIsIGFwcGx5KGVtaXQsIEVWRU5UX0NMSUNLLCBzZWxmKSk7XG4gICAgYmluZChzbGlkZSwgXCJrZXlkb3duXCIsIGFwcGx5KGVtaXQsIEVWRU5UX1NMSURFX0tFWURPV04sIHNlbGYpKTtcbiAgICBvbihbRVZFTlRfTU9WRUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgICBvbihFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIGluaXROYXZpZ2F0aW9uKTtcblxuICAgIGlmICh1cGRhdGVPbk1vdmUpIHtcbiAgICAgIG9uKEVWRU5UX01PVkUsIG9uTW92ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgICByZW1vdmVDbGFzcyhzbGlkZSwgU1RBVFVTX0NMQVNTRVMpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShzbGlkZSwgQUxMX0FUVFJJQlVURVMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgXCJzdHlsZVwiLCBzdHlsZXMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9MQUJFTCwgbGFiZWwgfHwgXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0TmF2aWdhdGlvbigpIHtcbiAgICB2YXIgY29udHJvbHMgPSBTcGxpZGUyLnNwbGlkZXMubWFwKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHZhciBTbGlkZTIgPSB0YXJnZXQuc3BsaWRlLkNvbXBvbmVudHMuU2xpZGVzLmdldEF0KGluZGV4KTtcbiAgICAgIHJldHVybiBTbGlkZTIgPyBTbGlkZTIuc2xpZGUuaWQgOiBcIlwiO1xuICAgIH0pLmpvaW4oXCIgXCIpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9MQUJFTCwgZm9ybWF0KGkxOG4uc2xpZGVYLCAoaXNDbG9uZSA/IHNsaWRlSW5kZXggOiBpbmRleCkgKyAxKSk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NPTlRST0xTLCBjb250cm9scyk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBST0xFLCBzbGlkZUZvY3VzID8gXCJidXR0b25cIiA6IFwiXCIpO1xuICAgIHNsaWRlRm9jdXMgJiYgcmVtb3ZlQXR0cmlidXRlKHNsaWRlLCBBUklBX1JPTEVERVNDUklQVElPTik7XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoKSB7XG4gICAgaWYgKCFkZXN0cm95ZWQpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgdmFyIGN1cnIgPSBTcGxpZGUyLmluZGV4O1xuICAgICAgdXBkYXRlQWN0aXZpdHkoKTtcbiAgICAgIHVwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19QUkVWLCBpbmRleCA9PT0gY3VyciAtIDEpO1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX05FWFQsIGluZGV4ID09PSBjdXJyICsgMSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQWN0aXZpdHkoKSB7XG4gICAgdmFyIGFjdGl2ZSA9IGlzQWN0aXZlKCk7XG5cbiAgICBpZiAoYWN0aXZlICE9PSBoYXNDbGFzcyhzbGlkZSwgQ0xBU1NfQUNUSVZFKSkge1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX0FDVElWRSwgYWN0aXZlKTtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9DVVJSRU5ULCBpc05hdmlnYXRpb24gJiYgYWN0aXZlIHx8IFwiXCIpO1xuICAgICAgZW1pdChhY3RpdmUgPyBFVkVOVF9BQ1RJVkUgOiBFVkVOVF9JTkFDVElWRSwgc2VsZik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmlzaWJpbGl0eSgpIHtcbiAgICB2YXIgdmlzaWJsZSA9IGlzVmlzaWJsZSgpO1xuICAgIHZhciBoaWRkZW4gPSAhdmlzaWJsZSAmJiAoIWlzQWN0aXZlKCkgfHwgaXNDbG9uZSk7XG5cbiAgICBpZiAoIVNwbGlkZTIuc3RhdGUuaXMoW01PVklORywgU0NST0xMSU5HXSkpIHtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9ISURERU4sIGhpZGRlbiB8fCBcIlwiKTtcbiAgICB9XG5cbiAgICBzZXRBdHRyaWJ1dGUocXVlcnlBbGwoc2xpZGUsIG9wdGlvbnMuZm9jdXNhYmxlTm9kZXMgfHwgXCJcIiksIFRBQl9JTkRFWCwgaGlkZGVuID8gLTEgOiBcIlwiKTtcblxuICAgIGlmIChzbGlkZUZvY3VzKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFRBQl9JTkRFWCwgaGlkZGVuID8gLTEgOiAwKTtcbiAgICB9XG5cbiAgICBpZiAodmlzaWJsZSAhPT0gaGFzQ2xhc3Moc2xpZGUsIENMQVNTX1ZJU0lCTEUpKSB7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfVklTSUJMRSwgdmlzaWJsZSk7XG4gICAgICBlbWl0KHZpc2libGUgPyBFVkVOVF9WSVNJQkxFIDogRVZFTlRfSElEREVOLCBzZWxmKTtcbiAgICB9XG5cbiAgICBpZiAoIXZpc2libGUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gc2xpZGUpIHtcbiAgICAgIHZhciBTbGlkZTIgPSBDb21wb25lbnRzLlNsaWRlcy5nZXRBdChTcGxpZGUyLmluZGV4KTtcbiAgICAgIFNsaWRlMiAmJiBmb2N1cyhTbGlkZTIuc2xpZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlJDEocHJvcCwgdmFsdWUsIHVzZUNvbnRhaW5lcikge1xuICAgIHN0eWxlKHVzZUNvbnRhaW5lciAmJiBjb250YWluZXIgfHwgc2xpZGUsIHByb3AsIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBjdXJyID0gU3BsaWRlMi5pbmRleDtcbiAgICByZXR1cm4gY3VyciA9PT0gaW5kZXggfHwgb3B0aW9ucy5jbG9uZVN0YXR1cyAmJiBjdXJyID09PSBzbGlkZUluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNWaXNpYmxlKCkge1xuICAgIGlmIChTcGxpZGUyLmlzKEZBREUpKSB7XG4gICAgICByZXR1cm4gaXNBY3RpdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhY2tSZWN0ID0gcmVjdChDb21wb25lbnRzLkVsZW1lbnRzLnRyYWNrKTtcbiAgICB2YXIgc2xpZGVSZWN0ID0gcmVjdChzbGlkZSk7XG4gICAgdmFyIGxlZnQgPSByZXNvbHZlKFwibGVmdFwiLCB0cnVlKTtcbiAgICB2YXIgcmlnaHQgPSByZXNvbHZlKFwicmlnaHRcIiwgdHJ1ZSk7XG4gICAgcmV0dXJuIGZsb29yKHRyYWNrUmVjdFtsZWZ0XSkgPD0gY2VpbChzbGlkZVJlY3RbbGVmdF0pICYmIGZsb29yKHNsaWRlUmVjdFtyaWdodF0pIDw9IGNlaWwodHJhY2tSZWN0W3JpZ2h0XSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1dpdGhpbihmcm9tLCBkaXN0YW5jZSkge1xuICAgIHZhciBkaWZmID0gYWJzKGZyb20gLSBpbmRleCk7XG5cbiAgICBpZiAoIWlzQ2xvbmUgJiYgKG9wdGlvbnMucmV3aW5kIHx8IFNwbGlkZTIuaXMoTE9PUCkpKSB7XG4gICAgICBkaWZmID0gbWluKGRpZmYsIFNwbGlkZTIubGVuZ3RoIC0gZGlmZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpZmYgPD0gZGlzdGFuY2U7XG4gIH1cblxuICB2YXIgc2VsZiA9IHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgc2xpZGVJbmRleDogc2xpZGVJbmRleCxcbiAgICBzbGlkZTogc2xpZGUsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgaXNDbG9uZTogaXNDbG9uZSxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBzdHlsZTogc3R5bGUkMSxcbiAgICBpc1dpdGhpbjogaXNXaXRoaW5cbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFNsaWRlcyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMiA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UyLm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTIuZW1pdCxcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UyLmJpbmQ7XG5cbiAgdmFyIF9Db21wb25lbnRzMiRFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgc2xpZGVzID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzLnNsaWRlcyxcbiAgICAgIGxpc3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMubGlzdDtcbiAgdmFyIFNsaWRlczIgPSBbXTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgZGVzdHJveSk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgaW5pdCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZSwgaW5kZXgpIHtcbiAgICAgIHJlZ2lzdGVyKHNsaWRlLCBpbmRleCwgLTEpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBmb3JFYWNoJDEoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgU2xpZGUyLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBlbXB0eShTbGlkZXMyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBmb3JFYWNoJDEoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgU2xpZGUyLnVwZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIoc2xpZGUsIGluZGV4LCBzbGlkZUluZGV4KSB7XG4gICAgdmFyIG9iamVjdCA9IFNsaWRlJDEoU3BsaWRlMiwgaW5kZXgsIHNsaWRlSW5kZXgsIHNsaWRlKTtcbiAgICBvYmplY3QubW91bnQoKTtcbiAgICBTbGlkZXMyLnB1c2gob2JqZWN0KTtcbiAgICBTbGlkZXMyLnNvcnQoZnVuY3Rpb24gKFNsaWRlMSwgU2xpZGUyKSB7XG4gICAgICByZXR1cm4gU2xpZGUxLmluZGV4IC0gU2xpZGUyLmluZGV4O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0KGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IGZpbHRlcihmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gIVNsaWRlMi5pc0Nsb25lO1xuICAgIH0pIDogU2xpZGVzMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluKHBhZ2UpIHtcbiAgICB2YXIgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXI7XG4gICAgdmFyIGluZGV4ID0gQ29udHJvbGxlci50b0luZGV4KHBhZ2UpO1xuICAgIHZhciBtYXggPSBDb250cm9sbGVyLmhhc0ZvY3VzKCkgPyAxIDogb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBmaWx0ZXIoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgcmV0dXJuIGJldHdlZW4oU2xpZGUyLmluZGV4LCBpbmRleCwgaW5kZXggKyBtYXggLSAxKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF0KGluZGV4KSB7XG4gICAgcmV0dXJuIGZpbHRlcihpbmRleClbMF07XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoaXRlbXMsIGluZGV4KSB7XG4gICAgZm9yRWFjaChpdGVtcywgZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICBpZiAoaXNTdHJpbmcoc2xpZGUpKSB7XG4gICAgICAgIHNsaWRlID0gcGFyc2VIdG1sKHNsaWRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzSFRNTEVsZW1lbnQoc2xpZGUpKSB7XG4gICAgICAgIHZhciByZWYgPSBzbGlkZXNbaW5kZXhdO1xuICAgICAgICByZWYgPyBiZWZvcmUoc2xpZGUsIHJlZikgOiBhcHBlbmQobGlzdCwgc2xpZGUpO1xuICAgICAgICBhZGRDbGFzcyhzbGlkZSwgb3B0aW9ucy5jbGFzc2VzLnNsaWRlKTtcbiAgICAgICAgb2JzZXJ2ZUltYWdlcyhzbGlkZSwgYXBwbHkoZW1pdCwgRVZFTlRfUkVTSVpFKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZSQxKG1hdGNoZXIpIHtcbiAgICByZW1vdmUoZmlsdGVyKG1hdGNoZXIpLm1hcChmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gU2xpZGUyLnNsaWRlO1xuICAgIH0pKTtcbiAgICBlbWl0KEVWRU5UX1JFRlJFU0gpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yRWFjaCQxKGl0ZXJhdGVlLCBleGNsdWRlQ2xvbmVzKSB7XG4gICAgZ2V0KGV4Y2x1ZGVDbG9uZXMpLmZvckVhY2goaXRlcmF0ZWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyKG1hdGNoZXIpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5maWx0ZXIoaXNGdW5jdGlvbihtYXRjaGVyKSA/IG1hdGNoZXIgOiBmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gaXNTdHJpbmcobWF0Y2hlcikgPyBtYXRjaGVzKFNsaWRlMi5zbGlkZSwgbWF0Y2hlcikgOiBpbmNsdWRlcyh0b0FycmF5KG1hdGNoZXIpLCBTbGlkZTIuaW5kZXgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGUocHJvcCwgdmFsdWUsIHVzZUNvbnRhaW5lcikge1xuICAgIGZvckVhY2gkMShmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICBTbGlkZTIuc3R5bGUocHJvcCwgdmFsdWUsIHVzZUNvbnRhaW5lcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvYnNlcnZlSW1hZ2VzKGVsbSwgY2FsbGJhY2spIHtcbiAgICB2YXIgaW1hZ2VzID0gcXVlcnlBbGwoZWxtLCBcImltZ1wiKTtcbiAgICB2YXIgbGVuZ3RoID0gaW1hZ2VzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbWcpIHtcbiAgICAgICAgYmluZChpbWcsIFwibG9hZCBlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCEgLS1sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExlbmd0aChleGNsdWRlQ2xvbmVzKSB7XG4gICAgcmV0dXJuIGV4Y2x1ZGVDbG9uZXMgPyBzbGlkZXMubGVuZ3RoIDogU2xpZGVzMi5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBpc0Vub3VnaCgpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5sZW5ndGggPiBvcHRpb25zLnBlclBhZ2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICBnZXQ6IGdldCxcbiAgICBnZXRJbjogZ2V0SW4sXG4gICAgZ2V0QXQ6IGdldEF0LFxuICAgIGFkZDogYWRkLFxuICAgIHJlbW92ZTogcmVtb3ZlJDEsXG4gICAgZm9yRWFjaDogZm9yRWFjaCQxLFxuICAgIGZpbHRlcjogZmlsdGVyLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBnZXRMZW5ndGg6IGdldExlbmd0aCxcbiAgICBpc0Vub3VnaDogaXNFbm91Z2hcbiAgfTtcbn1cblxuZnVuY3Rpb24gTGF5b3V0KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UzID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTMub24sXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMy5iaW5kLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTMuZW1pdDtcblxuICB2YXIgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzO1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgX0NvbXBvbmVudHMyJEVsZW1lbnRzMiA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgcm9vdCA9IF9Db21wb25lbnRzMiRFbGVtZW50czIucm9vdCxcbiAgICAgIHRyYWNrID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzMi50cmFjayxcbiAgICAgIGxpc3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMyLmxpc3Q7XG4gIHZhciBnZXRBdCA9IFNsaWRlcy5nZXRBdCxcbiAgICAgIHN0eWxlU2xpZGVzID0gU2xpZGVzLnN0eWxlO1xuICB2YXIgdmVydGljYWw7XG4gIHZhciByb290UmVjdDtcbiAgdmFyIG92ZXJmbG93O1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBiaW5kKHdpbmRvdywgXCJyZXNpemUgbG9hZFwiLCBUaHJvdHRsZShhcHBseShlbWl0LCBFVkVOVF9SRVNJWkUpKSk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBpbml0KTtcbiAgICBvbihFVkVOVF9SRVNJWkUsIHJlc2l6ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZlcnRpY2FsID0gb3B0aW9ucy5kaXJlY3Rpb24gPT09IFRUQjtcbiAgICBzdHlsZShyb290LCBcIm1heFdpZHRoXCIsIHVuaXQob3B0aW9ucy53aWR0aCkpO1xuICAgIHN0eWxlKHRyYWNrLCByZXNvbHZlKFwicGFkZGluZ0xlZnRcIiksIGNzc1BhZGRpbmcoZmFsc2UpKTtcbiAgICBzdHlsZSh0cmFjaywgcmVzb2x2ZShcInBhZGRpbmdSaWdodFwiKSwgY3NzUGFkZGluZyh0cnVlKSk7XG4gICAgcmVzaXplKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzaXplKGZvcmNlKSB7XG4gICAgdmFyIG5ld1JlY3QgPSByZWN0KHJvb3QpO1xuXG4gICAgaWYgKGZvcmNlIHx8IHJvb3RSZWN0LndpZHRoICE9PSBuZXdSZWN0LndpZHRoIHx8IHJvb3RSZWN0LmhlaWdodCAhPT0gbmV3UmVjdC5oZWlnaHQpIHtcbiAgICAgIHN0eWxlKHRyYWNrLCBcImhlaWdodFwiLCBjc3NUcmFja0hlaWdodCgpKTtcbiAgICAgIHN0eWxlU2xpZGVzKHJlc29sdmUoXCJtYXJnaW5SaWdodFwiKSwgdW5pdChvcHRpb25zLmdhcCkpO1xuICAgICAgc3R5bGVTbGlkZXMoXCJ3aWR0aFwiLCBjc3NTbGlkZVdpZHRoKCkpO1xuICAgICAgc3R5bGVTbGlkZXMoXCJoZWlnaHRcIiwgY3NzU2xpZGVIZWlnaHQoKSwgdHJ1ZSk7XG4gICAgICByb290UmVjdCA9IG5ld1JlY3Q7XG4gICAgICBlbWl0KEVWRU5UX1JFU0laRUQpO1xuXG4gICAgICBpZiAob3ZlcmZsb3cgIT09IChvdmVyZmxvdyA9IGlzT3ZlcmZsb3coKSkpIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3Mocm9vdCwgQ0xBU1NfT1ZFUkZMT1csIG92ZXJmbG93KTtcbiAgICAgICAgZW1pdChFVkVOVF9PVkVSRkxPVywgb3ZlcmZsb3cpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1BhZGRpbmcocmlnaHQpIHtcbiAgICB2YXIgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZztcbiAgICB2YXIgcHJvcCA9IHJlc29sdmUocmlnaHQgPyBcInJpZ2h0XCIgOiBcImxlZnRcIik7XG4gICAgcmV0dXJuIHBhZGRpbmcgJiYgdW5pdChwYWRkaW5nW3Byb3BdIHx8IChpc09iamVjdChwYWRkaW5nKSA/IDAgOiBwYWRkaW5nKSkgfHwgXCIwcHhcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1RyYWNrSGVpZ2h0KCkge1xuICAgIHZhciBoZWlnaHQgPSBcIlwiO1xuXG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBoZWlnaHQgPSBjc3NIZWlnaHQoKTtcbiAgICAgIGFzc2VydChoZWlnaHQsIFwiaGVpZ2h0IG9yIGhlaWdodFJhdGlvIGlzIG1pc3NpbmcuXCIpO1xuICAgICAgaGVpZ2h0ID0gXCJjYWxjKFwiICsgaGVpZ2h0ICsgXCIgLSBcIiArIGNzc1BhZGRpbmcoZmFsc2UpICsgXCIgLSBcIiArIGNzc1BhZGRpbmcodHJ1ZSkgKyBcIilcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVpZ2h0O1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzSGVpZ2h0KCkge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0IHx8IHJlY3QobGlzdCkud2lkdGggKiBvcHRpb25zLmhlaWdodFJhdGlvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1NsaWRlV2lkdGgoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYXV0b1dpZHRoID8gbnVsbCA6IHVuaXQob3B0aW9ucy5maXhlZFdpZHRoKSB8fCAodmVydGljYWwgPyBcIlwiIDogY3NzU2xpZGVTaXplKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzU2xpZGVIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHVuaXQob3B0aW9ucy5maXhlZEhlaWdodCkgfHwgKHZlcnRpY2FsID8gb3B0aW9ucy5hdXRvSGVpZ2h0ID8gbnVsbCA6IGNzc1NsaWRlU2l6ZSgpIDogY3NzSGVpZ2h0KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzU2xpZGVTaXplKCkge1xuICAgIHZhciBnYXAgPSB1bml0KG9wdGlvbnMuZ2FwKTtcbiAgICByZXR1cm4gXCJjYWxjKCgxMDAlXCIgKyAoZ2FwICYmIFwiICsgXCIgKyBnYXApICsgXCIpL1wiICsgKG9wdGlvbnMucGVyUGFnZSB8fCAxKSArIChnYXAgJiYgXCIgLSBcIiArIGdhcCkgKyBcIilcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RTaXplKCkge1xuICAgIHJldHVybiByZWN0KGxpc3QpW3Jlc29sdmUoXCJ3aWR0aFwiKV07XG4gIH1cblxuICBmdW5jdGlvbiBzbGlkZVNpemUoaW5kZXgsIHdpdGhvdXRHYXApIHtcbiAgICB2YXIgU2xpZGUgPSBnZXRBdChpbmRleCB8fCAwKTtcbiAgICByZXR1cm4gU2xpZGUgPyByZWN0KFNsaWRlLnNsaWRlKVtyZXNvbHZlKFwid2lkdGhcIildICsgKHdpdGhvdXRHYXAgPyAwIDogZ2V0R2FwKCkpIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdGFsU2l6ZShpbmRleCwgd2l0aG91dEdhcCkge1xuICAgIHZhciBTbGlkZSA9IGdldEF0KGluZGV4KTtcblxuICAgIGlmIChTbGlkZSkge1xuICAgICAgdmFyIHJpZ2h0ID0gcmVjdChTbGlkZS5zbGlkZSlbcmVzb2x2ZShcInJpZ2h0XCIpXTtcbiAgICAgIHZhciBsZWZ0ID0gcmVjdChsaXN0KVtyZXNvbHZlKFwibGVmdFwiKV07XG4gICAgICByZXR1cm4gYWJzKHJpZ2h0IC0gbGVmdCkgKyAod2l0aG91dEdhcCA/IDAgOiBnZXRHYXAoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBmdW5jdGlvbiBzbGlkZXJTaXplKHdpdGhvdXRHYXApIHtcbiAgICByZXR1cm4gdG90YWxTaXplKFNwbGlkZTIubGVuZ3RoIC0gMSkgLSB0b3RhbFNpemUoMCkgKyBzbGlkZVNpemUoMCwgd2l0aG91dEdhcCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRHYXAoKSB7XG4gICAgdmFyIFNsaWRlID0gZ2V0QXQoMCk7XG4gICAgcmV0dXJuIFNsaWRlICYmIHBhcnNlRmxvYXQoc3R5bGUoU2xpZGUuc2xpZGUsIHJlc29sdmUoXCJtYXJnaW5SaWdodFwiKSkpIHx8IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYWRkaW5nKHJpZ2h0KSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGUodHJhY2ssIHJlc29sdmUoXCJwYWRkaW5nXCIgKyAocmlnaHQgPyBcIlJpZ2h0XCIgOiBcIkxlZnRcIikpKSkgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzT3ZlcmZsb3coKSB7XG4gICAgcmV0dXJuIFNwbGlkZTIuaXMoRkFERSkgfHwgc2xpZGVyU2l6ZSh0cnVlKSA+IGxpc3RTaXplKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICByZXNpemU6IHJlc2l6ZSxcbiAgICBsaXN0U2l6ZTogbGlzdFNpemUsXG4gICAgc2xpZGVTaXplOiBzbGlkZVNpemUsXG4gICAgc2xpZGVyU2l6ZTogc2xpZGVyU2l6ZSxcbiAgICB0b3RhbFNpemU6IHRvdGFsU2l6ZSxcbiAgICBnZXRQYWRkaW5nOiBnZXRQYWRkaW5nLFxuICAgIGlzT3ZlcmZsb3c6IGlzT3ZlcmZsb3dcbiAgfTtcbn1cblxudmFyIE1VTFRJUExJRVIgPSAyO1xuXG5mdW5jdGlvbiBDbG9uZXMoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIHZhciBvbiA9IGV2ZW50Lm9uO1xuICB2YXIgRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcztcbiAgdmFyIHJlc29sdmUgPSBDb21wb25lbnRzMi5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIGNsb25lcyA9IFtdO1xuICB2YXIgY2xvbmVDb3VudDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9SRUZSRVNILCByZW1vdW50KTtcbiAgICBvbihbRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVTSVpFXSwgb2JzZXJ2ZSk7XG5cbiAgICBpZiAoY2xvbmVDb3VudCA9IGNvbXB1dGVDbG9uZUNvdW50KCkpIHtcbiAgICAgIGdlbmVyYXRlKGNsb25lQ291bnQpO1xuICAgICAgQ29tcG9uZW50czIuTGF5b3V0LnJlc2l6ZSh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdW50KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBtb3VudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmUoY2xvbmVzKTtcbiAgICBlbXB0eShjbG9uZXMpO1xuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ic2VydmUoKSB7XG4gICAgdmFyIGNvdW50ID0gY29tcHV0ZUNsb25lQ291bnQoKTtcblxuICAgIGlmIChjbG9uZUNvdW50ICE9PSBjb3VudCkge1xuICAgICAgaWYgKGNsb25lQ291bnQgPCBjb3VudCB8fCAhY291bnQpIHtcbiAgICAgICAgZXZlbnQuZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZShjb3VudCkge1xuICAgIHZhciBzbGlkZXMgPSBTbGlkZXMuZ2V0KCkuc2xpY2UoKTtcbiAgICB2YXIgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIHdoaWxlIChzbGlkZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgcHVzaChzbGlkZXMsIHNsaWRlcyk7XG4gICAgICB9XG5cbiAgICAgIHB1c2goc2xpZGVzLnNsaWNlKC1jb3VudCksIHNsaWRlcy5zbGljZSgwLCBjb3VudCkpLmZvckVhY2goZnVuY3Rpb24gKFNsaWRlLCBpbmRleCkge1xuICAgICAgICB2YXIgaXNIZWFkID0gaW5kZXggPCBjb3VudDtcbiAgICAgICAgdmFyIGNsb25lID0gY2xvbmVEZWVwKFNsaWRlLnNsaWRlLCBpbmRleCk7XG4gICAgICAgIGlzSGVhZCA/IGJlZm9yZShjbG9uZSwgc2xpZGVzWzBdLnNsaWRlKSA6IGFwcGVuZChFbGVtZW50cy5saXN0LCBjbG9uZSk7XG4gICAgICAgIHB1c2goY2xvbmVzLCBjbG9uZSk7XG4gICAgICAgIFNsaWRlcy5yZWdpc3RlcihjbG9uZSwgaW5kZXggLSBjb3VudCArIChpc0hlYWQgPyAwIDogbGVuZ3RoKSwgU2xpZGUuaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvbmVEZWVwKGVsbSwgaW5kZXgpIHtcbiAgICB2YXIgY2xvbmUgPSBlbG0uY2xvbmVOb2RlKHRydWUpO1xuICAgIGFkZENsYXNzKGNsb25lLCBvcHRpb25zLmNsYXNzZXMuY2xvbmUpO1xuICAgIGNsb25lLmlkID0gU3BsaWRlMi5yb290LmlkICsgXCItY2xvbmVcIiArIHBhZChpbmRleCArIDEpO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVDbG9uZUNvdW50KCkge1xuICAgIHZhciBjbG9uZXMyID0gb3B0aW9ucy5jbG9uZXM7XG5cbiAgICBpZiAoIVNwbGlkZTIuaXMoTE9PUCkpIHtcbiAgICAgIGNsb25lczIgPSAwO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQoY2xvbmVzMikpIHtcbiAgICAgIHZhciBmaXhlZFNpemUgPSBvcHRpb25zW3Jlc29sdmUoXCJmaXhlZFdpZHRoXCIpXSAmJiBDb21wb25lbnRzMi5MYXlvdXQuc2xpZGVTaXplKDApO1xuICAgICAgdmFyIGZpeGVkQ291bnQgPSBmaXhlZFNpemUgJiYgY2VpbChyZWN0KEVsZW1lbnRzLnRyYWNrKVtyZXNvbHZlKFwid2lkdGhcIildIC8gZml4ZWRTaXplKTtcbiAgICAgIGNsb25lczIgPSBmaXhlZENvdW50IHx8IG9wdGlvbnNbcmVzb2x2ZShcImF1dG9XaWR0aFwiKV0gJiYgU3BsaWRlMi5sZW5ndGggfHwgb3B0aW9ucy5wZXJQYWdlICogTVVMVElQTElFUjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVzMjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfTtcbn1cblxuZnVuY3Rpb24gTW92ZShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlNCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U0Lm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTQuZW1pdDtcblxuICB2YXIgc2V0ID0gU3BsaWRlMi5zdGF0ZS5zZXQ7XG4gIHZhciBfQ29tcG9uZW50czIkTGF5b3V0ID0gQ29tcG9uZW50czIuTGF5b3V0LFxuICAgICAgc2xpZGVTaXplID0gX0NvbXBvbmVudHMyJExheW91dC5zbGlkZVNpemUsXG4gICAgICBnZXRQYWRkaW5nID0gX0NvbXBvbmVudHMyJExheW91dC5nZXRQYWRkaW5nLFxuICAgICAgdG90YWxTaXplID0gX0NvbXBvbmVudHMyJExheW91dC50b3RhbFNpemUsXG4gICAgICBsaXN0U2l6ZSA9IF9Db21wb25lbnRzMiRMYXlvdXQubGlzdFNpemUsXG4gICAgICBzbGlkZXJTaXplID0gX0NvbXBvbmVudHMyJExheW91dC5zbGlkZXJTaXplO1xuICB2YXIgX0NvbXBvbmVudHMyJERpcmVjdGlvID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLFxuICAgICAgcmVzb2x2ZSA9IF9Db21wb25lbnRzMiREaXJlY3Rpby5yZXNvbHZlLFxuICAgICAgb3JpZW50ID0gX0NvbXBvbmVudHMyJERpcmVjdGlvLm9yaWVudDtcbiAgdmFyIF9Db21wb25lbnRzMiRFbGVtZW50czMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIGxpc3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMzLmxpc3QsXG4gICAgICB0cmFjayA9IF9Db21wb25lbnRzMiRFbGVtZW50czMudHJhY2s7XG4gIHZhciBUcmFuc2l0aW9uO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIFRyYW5zaXRpb24gPSBDb21wb25lbnRzMi5UcmFuc2l0aW9uO1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9SRVNJWkVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgcmVwb3NpdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiByZXBvc2l0aW9uKCkge1xuICAgIGlmICghQ29tcG9uZW50czIuQ29udHJvbGxlci5pc0J1c3koKSkge1xuICAgICAgQ29tcG9uZW50czIuU2Nyb2xsLmNhbmNlbCgpO1xuICAgICAganVtcChTcGxpZGUyLmluZGV4KTtcbiAgICAgIENvbXBvbmVudHMyLlNsaWRlcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKGRlc3QsIGluZGV4LCBwcmV2LCBjYWxsYmFjaykge1xuICAgIGlmIChkZXN0ICE9PSBpbmRleCAmJiBjYW5TaGlmdChkZXN0ID4gcHJldikpIHtcbiAgICAgIGNhbmNlbCgpO1xuICAgICAgdHJhbnNsYXRlKHNoaWZ0KGdldFBvc2l0aW9uKCksIGRlc3QgPiBwcmV2KSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgc2V0KE1PVklORyk7XG4gICAgZW1pdChFVkVOVF9NT1ZFLCBpbmRleCwgcHJldiwgZGVzdCk7XG4gICAgVHJhbnNpdGlvbi5zdGFydChpbmRleCwgZnVuY3Rpb24gKCkge1xuICAgICAgc2V0KElETEUpO1xuICAgICAgZW1pdChFVkVOVF9NT1ZFRCwgaW5kZXgsIHByZXYsIGRlc3QpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bXAoaW5kZXgpIHtcbiAgICB0cmFuc2xhdGUodG9Qb3NpdGlvbihpbmRleCwgdHJ1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHBvc2l0aW9uLCBwcmV2ZW50TG9vcCkge1xuICAgIGlmICghU3BsaWRlMi5pcyhGQURFKSkge1xuICAgICAgdmFyIGRlc3RpbmF0aW9uID0gcHJldmVudExvb3AgPyBwb3NpdGlvbiA6IGxvb3AocG9zaXRpb24pO1xuICAgICAgc3R5bGUobGlzdCwgXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVcIiArIHJlc29sdmUoXCJYXCIpICsgXCIoXCIgKyBkZXN0aW5hdGlvbiArIFwicHgpXCIpO1xuICAgICAgcG9zaXRpb24gIT09IGRlc3RpbmF0aW9uICYmIGVtaXQoRVZFTlRfU0hJRlRFRCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9vcChwb3NpdGlvbikge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICB2YXIgaW5kZXggPSB0b0luZGV4KHBvc2l0aW9uKTtcbiAgICAgIHZhciBleGNlZWRlZE1heCA9IGluZGV4ID4gQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRFbmQoKTtcbiAgICAgIHZhciBleGNlZWRlZE1pbiA9IGluZGV4IDwgMDtcblxuICAgICAgaWYgKGV4Y2VlZGVkTWluIHx8IGV4Y2VlZGVkTWF4KSB7XG4gICAgICAgIHBvc2l0aW9uID0gc2hpZnQocG9zaXRpb24sIGV4Y2VlZGVkTWF4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBzaGlmdChwb3NpdGlvbiwgYmFja3dhcmRzKSB7XG4gICAgdmFyIGV4Y2VzcyA9IHBvc2l0aW9uIC0gZ2V0TGltaXQoYmFja3dhcmRzKTtcbiAgICB2YXIgc2l6ZSA9IHNsaWRlclNpemUoKTtcbiAgICBwb3NpdGlvbiAtPSBvcmllbnQoc2l6ZSAqIChjZWlsKGFicyhleGNlc3MpIC8gc2l6ZSkgfHwgMSkpICogKGJhY2t3YXJkcyA/IDEgOiAtMSk7XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHRyYW5zbGF0ZShnZXRQb3NpdGlvbigpLCB0cnVlKTtcbiAgICBUcmFuc2l0aW9uLmNhbmNlbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9JbmRleChwb3NpdGlvbikge1xuICAgIHZhciBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0KCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2xpZGVJbmRleCA9IFNsaWRlc1tpXS5pbmRleDtcbiAgICAgIHZhciBkaXN0YW5jZSA9IGFicyh0b1Bvc2l0aW9uKHNsaWRlSW5kZXgsIHRydWUpIC0gcG9zaXRpb24pO1xuXG4gICAgICBpZiAoZGlzdGFuY2UgPD0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgaW5kZXggPSBzbGlkZUluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gdG9Qb3NpdGlvbihpbmRleCwgdHJpbW1pbmcpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBvcmllbnQodG90YWxTaXplKGluZGV4IC0gMSkgLSBvZmZzZXQoaW5kZXgpKTtcbiAgICByZXR1cm4gdHJpbW1pbmcgPyB0cmltKHBvc2l0aW9uKSA6IHBvc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7XG4gICAgdmFyIGxlZnQgPSByZXNvbHZlKFwibGVmdFwiKTtcbiAgICByZXR1cm4gcmVjdChsaXN0KVtsZWZ0XSAtIHJlY3QodHJhY2spW2xlZnRdICsgb3JpZW50KGdldFBhZGRpbmcoZmFsc2UpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW0ocG9zaXRpb24pIHtcbiAgICBpZiAob3B0aW9ucy50cmltU3BhY2UgJiYgU3BsaWRlMi5pcyhTTElERSkpIHtcbiAgICAgIHBvc2l0aW9uID0gY2xhbXAocG9zaXRpb24sIDAsIG9yaWVudChzbGlkZXJTaXplKHRydWUpIC0gbGlzdFNpemUoKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZnNldChpbmRleCkge1xuICAgIHZhciBmb2N1cyA9IG9wdGlvbnMuZm9jdXM7XG4gICAgcmV0dXJuIGZvY3VzID09PSBcImNlbnRlclwiID8gKGxpc3RTaXplKCkgLSBzbGlkZVNpemUoaW5kZXgsIHRydWUpKSAvIDIgOiArZm9jdXMgKiBzbGlkZVNpemUoaW5kZXgpIHx8IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaW1pdChtYXgpIHtcbiAgICByZXR1cm4gdG9Qb3NpdGlvbihtYXggPyBDb21wb25lbnRzMi5Db250cm9sbGVyLmdldEVuZCgpIDogMCwgISFvcHRpb25zLnRyaW1TcGFjZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5TaGlmdChiYWNrd2FyZHMpIHtcbiAgICB2YXIgc2hpZnRlZCA9IG9yaWVudChzaGlmdChnZXRQb3NpdGlvbigpLCBiYWNrd2FyZHMpKTtcbiAgICByZXR1cm4gYmFja3dhcmRzID8gc2hpZnRlZCA+PSAwIDogc2hpZnRlZCA8PSBsaXN0W3Jlc29sdmUoXCJzY3JvbGxXaWR0aFwiKV0gLSByZWN0KHRyYWNrKVtyZXNvbHZlKFwid2lkdGhcIildO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhjZWVkZWRMaW1pdChtYXgsIHBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBpc1VuZGVmaW5lZChwb3NpdGlvbikgPyBnZXRQb3NpdGlvbigpIDogcG9zaXRpb247XG4gICAgdmFyIGV4Y2VlZGVkTWluID0gbWF4ICE9PSB0cnVlICYmIG9yaWVudChwb3NpdGlvbikgPCBvcmllbnQoZ2V0TGltaXQoZmFsc2UpKTtcbiAgICB2YXIgZXhjZWVkZWRNYXggPSBtYXggIT09IGZhbHNlICYmIG9yaWVudChwb3NpdGlvbikgPiBvcmllbnQoZ2V0TGltaXQodHJ1ZSkpO1xuICAgIHJldHVybiBleGNlZWRlZE1pbiB8fCBleGNlZWRlZE1heDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIG1vdmU6IG1vdmUsXG4gICAganVtcDoganVtcCxcbiAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICBzaGlmdDogc2hpZnQsXG4gICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgdG9JbmRleDogdG9JbmRleCxcbiAgICB0b1Bvc2l0aW9uOiB0b1Bvc2l0aW9uLFxuICAgIGdldFBvc2l0aW9uOiBnZXRQb3NpdGlvbixcbiAgICBnZXRMaW1pdDogZ2V0TGltaXQsXG4gICAgZXhjZWVkZWRMaW1pdDogZXhjZWVkZWRMaW1pdCxcbiAgICByZXBvc2l0aW9uOiByZXBvc2l0aW9uXG4gIH07XG59XG5cbmZ1bmN0aW9uIENvbnRyb2xsZXIoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTUgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNS5vbixcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2U1LmVtaXQ7XG5cbiAgdmFyIE1vdmUgPSBDb21wb25lbnRzMi5Nb3ZlO1xuICB2YXIgZ2V0UG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uLFxuICAgICAgZ2V0TGltaXQgPSBNb3ZlLmdldExpbWl0LFxuICAgICAgdG9Qb3NpdGlvbiA9IE1vdmUudG9Qb3NpdGlvbjtcbiAgdmFyIF9Db21wb25lbnRzMiRTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMsXG4gICAgICBpc0Vub3VnaCA9IF9Db21wb25lbnRzMiRTbGlkZXMuaXNFbm91Z2gsXG4gICAgICBnZXRMZW5ndGggPSBfQ29tcG9uZW50czIkU2xpZGVzLmdldExlbmd0aDtcbiAgdmFyIG9taXRFbmQgPSBvcHRpb25zLm9taXRFbmQ7XG4gIHZhciBpc0xvb3AgPSBTcGxpZGUyLmlzKExPT1ApO1xuICB2YXIgaXNTbGlkZSA9IFNwbGlkZTIuaXMoU0xJREUpO1xuICB2YXIgZ2V0TmV4dCA9IGFwcGx5KGdldEFkamFjZW50LCBmYWxzZSk7XG4gIHZhciBnZXRQcmV2ID0gYXBwbHkoZ2V0QWRqYWNlbnQsIHRydWUpO1xuICB2YXIgY3VyckluZGV4ID0gb3B0aW9ucy5zdGFydCB8fCAwO1xuICB2YXIgZW5kSW5kZXg7XG4gIHZhciBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gIHZhciBzbGlkZUNvdW50O1xuICB2YXIgcGVyTW92ZTtcbiAgdmFyIHBlclBhZ2U7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNILCBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRF0sIGluaXQpO1xuICAgIG9uKEVWRU5UX1JFU0laRUQsIG9uUmVzaXplZCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHNsaWRlQ291bnQgPSBnZXRMZW5ndGgodHJ1ZSk7XG4gICAgcGVyTW92ZSA9IG9wdGlvbnMucGVyTW92ZTtcbiAgICBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlO1xuICAgIGVuZEluZGV4ID0gZ2V0RW5kKCk7XG4gICAgdmFyIGluZGV4ID0gY2xhbXAoY3VyckluZGV4LCAwLCBvbWl0RW5kID8gZW5kSW5kZXggOiBzbGlkZUNvdW50IC0gMSk7XG5cbiAgICBpZiAoaW5kZXggIT09IGN1cnJJbmRleCkge1xuICAgICAgY3VyckluZGV4ID0gaW5kZXg7XG4gICAgICBNb3ZlLnJlcG9zaXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblJlc2l6ZWQoKSB7XG4gICAgaWYgKGVuZEluZGV4ICE9PSBnZXRFbmQoKSkge1xuICAgICAgZW1pdChFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ28oY29udHJvbCwgYWxsb3dTYW1lSW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFpc0J1c3koKSkge1xuICAgICAgdmFyIGRlc3QgPSBwYXJzZShjb250cm9sKTtcbiAgICAgIHZhciBpbmRleCA9IGxvb3AoZGVzdCk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xICYmIChhbGxvd1NhbWVJbmRleCB8fCBpbmRleCAhPT0gY3VyckluZGV4KSkge1xuICAgICAgICBzZXRJbmRleChpbmRleCk7XG4gICAgICAgIE1vdmUubW92ZShkZXN0LCBpbmRleCwgcHJldkluZGV4LCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsKGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgc25hcCwgY2FsbGJhY2spIHtcbiAgICBDb21wb25lbnRzMi5TY3JvbGwuc2Nyb2xsKGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgc25hcCwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluZGV4ID0gbG9vcChNb3ZlLnRvSW5kZXgoZ2V0UG9zaXRpb24oKSkpO1xuICAgICAgc2V0SW5kZXgob21pdEVuZCA/IG1pbihpbmRleCwgZW5kSW5kZXgpIDogaW5kZXgpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlKGNvbnRyb2wpIHtcbiAgICB2YXIgaW5kZXggPSBjdXJySW5kZXg7XG5cbiAgICBpZiAoaXNTdHJpbmcoY29udHJvbCkpIHtcbiAgICAgIHZhciBfcmVmID0gY29udHJvbC5tYXRjaCgvKFsrXFwtPD5dKShcXGQrKT8vKSB8fCBbXSxcbiAgICAgICAgICBpbmRpY2F0b3IgPSBfcmVmWzFdLFxuICAgICAgICAgIG51bWJlciA9IF9yZWZbMl07XG5cbiAgICAgIGlmIChpbmRpY2F0b3IgPT09IFwiK1wiIHx8IGluZGljYXRvciA9PT0gXCItXCIpIHtcbiAgICAgICAgaW5kZXggPSBjb21wdXRlRGVzdEluZGV4KGN1cnJJbmRleCArICsoXCJcIiArIGluZGljYXRvciArICgrbnVtYmVyIHx8IDEpKSwgY3VyckluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNhdG9yID09PSBcIj5cIikge1xuICAgICAgICBpbmRleCA9IG51bWJlciA/IHRvSW5kZXgoK251bWJlcikgOiBnZXROZXh0KHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChpbmRpY2F0b3IgPT09IFwiPFwiKSB7XG4gICAgICAgIGluZGV4ID0gZ2V0UHJldih0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSBpc0xvb3AgPyBjb250cm9sIDogY2xhbXAoY29udHJvbCwgMCwgZW5kSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFkamFjZW50KHByZXYsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIG51bWJlciA9IHBlck1vdmUgfHwgKGhhc0ZvY3VzKCkgPyAxIDogcGVyUGFnZSk7XG4gICAgdmFyIGRlc3QgPSBjb21wdXRlRGVzdEluZGV4KGN1cnJJbmRleCArIG51bWJlciAqIChwcmV2ID8gLTEgOiAxKSwgY3VyckluZGV4LCAhKHBlck1vdmUgfHwgaGFzRm9jdXMoKSkpO1xuXG4gICAgaWYgKGRlc3QgPT09IC0xICYmIGlzU2xpZGUpIHtcbiAgICAgIGlmICghYXBwcm94aW1hdGVseUVxdWFsKGdldFBvc2l0aW9uKCksIGdldExpbWl0KCFwcmV2KSwgMSkpIHtcbiAgICAgICAgcmV0dXJuIHByZXYgPyAwIDogZW5kSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uID8gZGVzdCA6IGxvb3AoZGVzdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlRGVzdEluZGV4KGRlc3QsIGZyb20sIHNuYXBQYWdlKSB7XG4gICAgaWYgKGlzRW5vdWdoKCkgfHwgaGFzRm9jdXMoKSkge1xuICAgICAgdmFyIGluZGV4ID0gY29tcHV0ZU1vdmFibGVEZXN0SW5kZXgoZGVzdCk7XG5cbiAgICAgIGlmIChpbmRleCAhPT0gZGVzdCkge1xuICAgICAgICBmcm9tID0gZGVzdDtcbiAgICAgICAgZGVzdCA9IGluZGV4O1xuICAgICAgICBzbmFwUGFnZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVzdCA8IDAgfHwgZGVzdCA+IGVuZEluZGV4KSB7XG4gICAgICAgIGlmICghcGVyTW92ZSAmJiAoYmV0d2VlbigwLCBkZXN0LCBmcm9tLCB0cnVlKSB8fCBiZXR3ZWVuKGVuZEluZGV4LCBmcm9tLCBkZXN0LCB0cnVlKSkpIHtcbiAgICAgICAgICBkZXN0ID0gdG9JbmRleCh0b1BhZ2UoZGVzdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0xvb3ApIHtcbiAgICAgICAgICAgIGRlc3QgPSBzbmFwUGFnZSA/IGRlc3QgPCAwID8gLShzbGlkZUNvdW50ICUgcGVyUGFnZSB8fCBwZXJQYWdlKSA6IHNsaWRlQ291bnQgOiBkZXN0O1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZXdpbmQpIHtcbiAgICAgICAgICAgIGRlc3QgPSBkZXN0IDwgMCA/IGVuZEluZGV4IDogMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdCA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNuYXBQYWdlICYmIGRlc3QgIT09IGZyb20pIHtcbiAgICAgICAgICBkZXN0ID0gdG9JbmRleCh0b1BhZ2UoZnJvbSkgKyAoZGVzdCA8IGZyb20gPyAtMSA6IDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZXN0ID0gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlTW92YWJsZURlc3RJbmRleChkZXN0KSB7XG4gICAgaWYgKGlzU2xpZGUgJiYgb3B0aW9ucy50cmltU3BhY2UgPT09IFwibW92ZVwiICYmIGRlc3QgIT09IGN1cnJJbmRleCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uID09PSB0b1Bvc2l0aW9uKGRlc3QsIHRydWUpICYmIGJldHdlZW4oZGVzdCwgMCwgU3BsaWRlMi5sZW5ndGggLSAxLCAhb3B0aW9ucy5yZXdpbmQpKSB7XG4gICAgICAgIGRlc3QgPCBjdXJySW5kZXggPyAtLWRlc3QgOiArK2Rlc3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBsb29wKGluZGV4KSB7XG4gICAgcmV0dXJuIGlzTG9vcCA/IChpbmRleCArIHNsaWRlQ291bnQpICUgc2xpZGVDb3VudCB8fCAwIDogaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFbmQoKSB7XG4gICAgdmFyIGVuZCA9IHNsaWRlQ291bnQgLSAoaGFzRm9jdXMoKSB8fCBpc0xvb3AgJiYgcGVyTW92ZSA/IDEgOiBwZXJQYWdlKTtcblxuICAgIHdoaWxlIChvbWl0RW5kICYmIGVuZC0tID4gMCkge1xuICAgICAgaWYgKHRvUG9zaXRpb24oc2xpZGVDb3VudCAtIDEsIHRydWUpICE9PSB0b1Bvc2l0aW9uKGVuZCwgdHJ1ZSkpIHtcbiAgICAgICAgZW5kKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbGFtcChlbmQsIDAsIHNsaWRlQ291bnQgLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSW5kZXgocGFnZSkge1xuICAgIHJldHVybiBjbGFtcChoYXNGb2N1cygpID8gcGFnZSA6IHBlclBhZ2UgKiBwYWdlLCAwLCBlbmRJbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b1BhZ2UoaW5kZXgpIHtcbiAgICByZXR1cm4gaGFzRm9jdXMoKSA/IG1pbihpbmRleCwgZW5kSW5kZXgpIDogZmxvb3IoKGluZGV4ID49IGVuZEluZGV4ID8gc2xpZGVDb3VudCAtIDEgOiBpbmRleCkgLyBwZXJQYWdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvRGVzdChkZXN0aW5hdGlvbikge1xuICAgIHZhciBjbG9zZXN0ID0gTW92ZS50b0luZGV4KGRlc3RpbmF0aW9uKTtcbiAgICByZXR1cm4gaXNTbGlkZSA/IGNsYW1wKGNsb3Nlc3QsIDAsIGVuZEluZGV4KSA6IGNsb3Nlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbmRleChpbmRleCkge1xuICAgIGlmIChpbmRleCAhPT0gY3VyckluZGV4KSB7XG4gICAgICBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gICAgICBjdXJySW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbmRleChwcmV2KSB7XG4gICAgcmV0dXJuIHByZXYgPyBwcmV2SW5kZXggOiBjdXJySW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gIWlzVW5kZWZpbmVkKG9wdGlvbnMuZm9jdXMpIHx8IG9wdGlvbnMuaXNOYXZpZ2F0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNCdXN5KCkge1xuICAgIHJldHVybiBTcGxpZGUyLnN0YXRlLmlzKFtNT1ZJTkcsIFNDUk9MTElOR10pICYmICEhb3B0aW9ucy53YWl0Rm9yVHJhbnNpdGlvbjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGdvOiBnbyxcbiAgICBzY3JvbGw6IHNjcm9sbCxcbiAgICBnZXROZXh0OiBnZXROZXh0LFxuICAgIGdldFByZXY6IGdldFByZXYsXG4gICAgZ2V0QWRqYWNlbnQ6IGdldEFkamFjZW50LFxuICAgIGdldEVuZDogZ2V0RW5kLFxuICAgIHNldEluZGV4OiBzZXRJbmRleCxcbiAgICBnZXRJbmRleDogZ2V0SW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleCxcbiAgICB0b1BhZ2U6IHRvUGFnZSxcbiAgICB0b0Rlc3Q6IHRvRGVzdCxcbiAgICBoYXNGb2N1czogaGFzRm9jdXMsXG4gICAgaXNCdXN5OiBpc0J1c3lcbiAgfTtcbn1cblxudmFyIFhNTF9OQU1FX1NQQUNFID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xudmFyIFBBVEggPSBcIm0xNS41IDAuOTMyLTQuMyA0LjM4IDE0LjUgMTQuNi0xNC41IDE0LjUgNC4zIDQuNCAxNC42LTE0LjYgNC40LTQuMy00LjQtNC40LTE0LjYtMTQuNnpcIjtcbnZhciBTSVpFID0gNDA7XG5cbmZ1bmN0aW9uIEFycm93cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgdmFyIG9uID0gZXZlbnQub24sXG4gICAgICBiaW5kID0gZXZlbnQuYmluZCxcbiAgICAgIGVtaXQgPSBldmVudC5lbWl0O1xuICB2YXIgY2xhc3NlcyA9IG9wdGlvbnMuY2xhc3NlcyxcbiAgICAgIGkxOG4gPSBvcHRpb25zLmkxOG47XG4gIHZhciBFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXI7XG4gIHZhciBwbGFjZWhvbGRlciA9IEVsZW1lbnRzLmFycm93cyxcbiAgICAgIHRyYWNrID0gRWxlbWVudHMudHJhY2s7XG4gIHZhciB3cmFwcGVyID0gcGxhY2Vob2xkZXI7XG4gIHZhciBwcmV2ID0gRWxlbWVudHMucHJldjtcbiAgdmFyIG5leHQgPSBFbGVtZW50cy5uZXh0O1xuICB2YXIgY3JlYXRlZDtcbiAgdmFyIHdyYXBwZXJDbGFzc2VzO1xuICB2YXIgYXJyb3dzID0ge307XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIHJlbW91bnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGVuYWJsZWQgPSBvcHRpb25zLmFycm93cztcblxuICAgIGlmIChlbmFibGVkICYmICEocHJldiAmJiBuZXh0KSkge1xuICAgICAgY3JlYXRlQXJyb3dzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByZXYgJiYgbmV4dCkge1xuICAgICAgYXNzaWduKGFycm93cywge1xuICAgICAgICBwcmV2OiBwcmV2LFxuICAgICAgICBuZXh0OiBuZXh0XG4gICAgICB9KTtcbiAgICAgIGRpc3BsYXkod3JhcHBlciwgZW5hYmxlZCA/IFwiXCIgOiBcIm5vbmVcIik7XG4gICAgICBhZGRDbGFzcyh3cmFwcGVyLCB3cmFwcGVyQ2xhc3NlcyA9IENMQVNTX0FSUk9XUyArIFwiLS1cIiArIG9wdGlvbnMuZGlyZWN0aW9uKTtcblxuICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgbGlzdGVuKCk7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICBzZXRBdHRyaWJ1dGUoW3ByZXYsIG5leHRdLCBBUklBX0NPTlRST0xTLCB0cmFjay5pZCk7XG4gICAgICAgIGVtaXQoRVZFTlRfQVJST1dTX01PVU5URUQsIHByZXYsIG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZXZlbnQuZGVzdHJveSgpO1xuICAgIHJlbW92ZUNsYXNzKHdyYXBwZXIsIHdyYXBwZXJDbGFzc2VzKTtcblxuICAgIGlmIChjcmVhdGVkKSB7XG4gICAgICByZW1vdmUocGxhY2Vob2xkZXIgPyBbcHJldiwgbmV4dF0gOiB3cmFwcGVyKTtcbiAgICAgIHByZXYgPSBuZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKFtwcmV2LCBuZXh0XSwgQUxMX0FUVFJJQlVURVMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfTU9WRUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX1NDUk9MTEVELCBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRF0sIHVwZGF0ZSk7XG4gICAgYmluZChuZXh0LCBcImNsaWNrXCIsIGFwcGx5KGdvLCBcIj5cIikpO1xuICAgIGJpbmQocHJldiwgXCJjbGlja1wiLCBhcHBseShnbywgXCI8XCIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGNvbnRyb2wpIHtcbiAgICBDb250cm9sbGVyLmdvKGNvbnRyb2wsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3dzKCkge1xuICAgIHdyYXBwZXIgPSBwbGFjZWhvbGRlciB8fCBjcmVhdGUoXCJkaXZcIiwgY2xhc3Nlcy5hcnJvd3MpO1xuICAgIHByZXYgPSBjcmVhdGVBcnJvdyh0cnVlKTtcbiAgICBuZXh0ID0gY3JlYXRlQXJyb3coZmFsc2UpO1xuICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgIGFwcGVuZCh3cmFwcGVyLCBbcHJldiwgbmV4dF0pO1xuICAgICFwbGFjZWhvbGRlciAmJiBiZWZvcmUod3JhcHBlciwgdHJhY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3cocHJldjIpIHtcbiAgICB2YXIgYXJyb3cgPSBcIjxidXR0b24gY2xhc3M9XFxcIlwiICsgY2xhc3Nlcy5hcnJvdyArIFwiIFwiICsgKHByZXYyID8gY2xhc3Nlcy5wcmV2IDogY2xhc3Nlcy5uZXh0KSArIFwiXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPjxzdmcgeG1sbnM9XFxcIlwiICsgWE1MX05BTUVfU1BBQ0UgKyBcIlxcXCIgdmlld0JveD1cXFwiMCAwIFwiICsgU0laRSArIFwiIFwiICsgU0laRSArIFwiXFxcIiB3aWR0aD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiPjxwYXRoIGQ9XFxcIlwiICsgKG9wdGlvbnMuYXJyb3dQYXRoIHx8IFBBVEgpICsgXCJcXFwiIC8+XCI7XG4gICAgcmV0dXJuIHBhcnNlSHRtbChhcnJvdyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKHByZXYgJiYgbmV4dCkge1xuICAgICAgdmFyIGluZGV4ID0gU3BsaWRlMi5pbmRleDtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBDb250cm9sbGVyLmdldFByZXYoKTtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBDb250cm9sbGVyLmdldE5leHQoKTtcbiAgICAgIHZhciBwcmV2TGFiZWwgPSBwcmV2SW5kZXggPiAtMSAmJiBpbmRleCA8IHByZXZJbmRleCA/IGkxOG4ubGFzdCA6IGkxOG4ucHJldjtcbiAgICAgIHZhciBuZXh0TGFiZWwgPSBuZXh0SW5kZXggPiAtMSAmJiBpbmRleCA+IG5leHRJbmRleCA/IGkxOG4uZmlyc3QgOiBpMThuLm5leHQ7XG4gICAgICBwcmV2LmRpc2FibGVkID0gcHJldkluZGV4IDwgMDtcbiAgICAgIG5leHQuZGlzYWJsZWQgPSBuZXh0SW5kZXggPCAwO1xuICAgICAgc2V0QXR0cmlidXRlKHByZXYsIEFSSUFfTEFCRUwsIHByZXZMYWJlbCk7XG4gICAgICBzZXRBdHRyaWJ1dGUobmV4dCwgQVJJQV9MQUJFTCwgbmV4dExhYmVsKTtcbiAgICAgIGVtaXQoRVZFTlRfQVJST1dTX1VQREFURUQsIHByZXYsIG5leHQsIHByZXZJbmRleCwgbmV4dEluZGV4KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFycm93czogYXJyb3dzLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHVwZGF0ZTogdXBkYXRlXG4gIH07XG59XG5cbnZhciBJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSA9IERBVEFfQVRUUklCVVRFICsgXCItaW50ZXJ2YWxcIjtcblxuZnVuY3Rpb24gQXV0b3BsYXkoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTYgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNi5vbixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2U2LmJpbmQsXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlNi5lbWl0O1xuXG4gIHZhciBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChvcHRpb25zLmludGVydmFsLCBTcGxpZGUyLmdvLmJpbmQoU3BsaWRlMiwgXCI+XCIpLCBvbkFuaW1hdGlvbkZyYW1lKTtcbiAgdmFyIGlzUGF1c2VkID0gaW50ZXJ2YWwuaXNQYXVzZWQ7XG4gIHZhciBFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgX0NvbXBvbmVudHMyJEVsZW1lbnRzNCA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgcm9vdCA9IF9Db21wb25lbnRzMiRFbGVtZW50czQucm9vdCxcbiAgICAgIHRvZ2dsZSA9IF9Db21wb25lbnRzMiRFbGVtZW50czQudG9nZ2xlO1xuICB2YXIgYXV0b3BsYXkgPSBvcHRpb25zLmF1dG9wbGF5O1xuICB2YXIgaG92ZXJlZDtcbiAgdmFyIGZvY3VzZWQ7XG4gIHZhciBzdG9wcGVkID0gYXV0b3BsYXkgPT09IFwicGF1c2VcIjtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgIGxpc3RlbigpO1xuICAgICAgdG9nZ2xlICYmIHNldEF0dHJpYnV0ZSh0b2dnbGUsIEFSSUFfQ09OVFJPTFMsIEVsZW1lbnRzLnRyYWNrLmlkKTtcbiAgICAgIHN0b3BwZWQgfHwgcGxheSgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgIGlmIChvcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgYmluZChyb290LCBcIm1vdXNlZW50ZXIgbW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBob3ZlcmVkID0gZS50eXBlID09PSBcIm1vdXNlZW50ZXJcIjtcbiAgICAgICAgYXV0b1RvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkZvY3VzKSB7XG4gICAgICBiaW5kKHJvb3QsIFwiZm9jdXNpbiBmb2N1c291dFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmb2N1c2VkID0gZS50eXBlID09PSBcImZvY3VzaW5cIjtcbiAgICAgICAgYXV0b1RvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRvZ2dsZSkge1xuICAgICAgYmluZCh0b2dnbGUsIFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wcGVkID8gcGxheSgpIDogcGF1c2UodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBvbihbRVZFTlRfTU9WRSwgRVZFTlRfU0NST0xMLCBFVkVOVF9SRUZSRVNIXSwgaW50ZXJ2YWwucmV3aW5kKTtcbiAgICBvbihFVkVOVF9NT1ZFLCBvbk1vdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoaXNQYXVzZWQoKSAmJiBDb21wb25lbnRzMi5TbGlkZXMuaXNFbm91Z2goKSkge1xuICAgICAgaW50ZXJ2YWwuc3RhcnQoIW9wdGlvbnMucmVzZXRQcm9ncmVzcyk7XG4gICAgICBmb2N1c2VkID0gaG92ZXJlZCA9IHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgZW1pdChFVkVOVF9BVVRPUExBWV9QTEFZKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZShzdG9wKSB7XG4gICAgaWYgKHN0b3AgPT09IHZvaWQgMCkge1xuICAgICAgc3RvcCA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RvcHBlZCA9ICEhc3RvcDtcbiAgICB1cGRhdGUoKTtcblxuICAgIGlmICghaXNQYXVzZWQoKSkge1xuICAgICAgaW50ZXJ2YWwucGF1c2UoKTtcbiAgICAgIGVtaXQoRVZFTlRfQVVUT1BMQVlfUEFVU0UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF1dG9Ub2dnbGUoKSB7XG4gICAgaWYgKCFzdG9wcGVkKSB7XG4gICAgICBob3ZlcmVkIHx8IGZvY3VzZWQgPyBwYXVzZShmYWxzZSkgOiBwbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGlmICh0b2dnbGUpIHtcbiAgICAgIHRvZ2dsZUNsYXNzKHRvZ2dsZSwgQ0xBU1NfQUNUSVZFLCAhc3RvcHBlZCk7XG4gICAgICBzZXRBdHRyaWJ1dGUodG9nZ2xlLCBBUklBX0xBQkVMLCBvcHRpb25zLmkxOG5bc3RvcHBlZCA/IFwicGxheVwiIDogXCJwYXVzZVwiXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZShyYXRlKSB7XG4gICAgdmFyIGJhciA9IEVsZW1lbnRzLmJhcjtcbiAgICBiYXIgJiYgc3R5bGUoYmFyLCBcIndpZHRoXCIsIHJhdGUgKiAxMDAgKyBcIiVcIik7XG4gICAgZW1pdChFVkVOVF9BVVRPUExBWV9QTEFZSU5HLCByYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW92ZShpbmRleCkge1xuICAgIHZhciBTbGlkZSA9IENvbXBvbmVudHMyLlNsaWRlcy5nZXRBdChpbmRleCk7XG4gICAgaW50ZXJ2YWwuc2V0KFNsaWRlICYmICtnZXRBdHRyaWJ1dGUoU2xpZGUuc2xpZGUsIElOVEVSVkFMX0RBVEFfQVRUUklCVVRFKSB8fCBvcHRpb25zLmludGVydmFsKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGludGVydmFsLmNhbmNlbCxcbiAgICBwbGF5OiBwbGF5LFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBpc1BhdXNlZDogaXNQYXVzZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gQ292ZXIoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTcgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNy5vbjtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5jb3Zlcikge1xuICAgICAgb24oRVZFTlRfTEFaWUxPQURfTE9BREVELCBhcHBseSh0b2dnbGUsIHRydWUpKTtcbiAgICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgYXBwbHkoY292ZXIsIHRydWUpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3Zlcihjb3ZlcjIpIHtcbiAgICBDb21wb25lbnRzMi5TbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgIHZhciBpbWcgPSBjaGlsZChTbGlkZS5jb250YWluZXIgfHwgU2xpZGUuc2xpZGUsIFwiaW1nXCIpO1xuXG4gICAgICBpZiAoaW1nICYmIGltZy5zcmMpIHtcbiAgICAgICAgdG9nZ2xlKGNvdmVyMiwgaW1nLCBTbGlkZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGUoY292ZXIyLCBpbWcsIFNsaWRlKSB7XG4gICAgU2xpZGUuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIGNvdmVyMiA/IFwiY2VudGVyL2NvdmVyIG5vLXJlcGVhdCB1cmwoXFxcIlwiICsgaW1nLnNyYyArIFwiXFxcIilcIiA6IFwiXCIsIHRydWUpO1xuICAgIGRpc3BsYXkoaW1nLCBjb3ZlcjIgPyBcIm5vbmVcIiA6IFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogYXBwbHkoY292ZXIsIGZhbHNlKVxuICB9O1xufVxuXG52YXIgQk9VTkNFX0RJRkZfVEhSRVNIT0xEID0gMTA7XG52YXIgQk9VTkNFX0RVUkFUSU9OID0gNjAwO1xudmFyIEZSSUNUSU9OX0ZBQ1RPUiA9IDAuNjtcbnZhciBCQVNFX1ZFTE9DSVRZID0gMS41O1xudmFyIE1JTl9EVVJBVElPTiA9IDgwMDtcblxuZnVuY3Rpb24gU2Nyb2xsKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U4ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTgub24sXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlOC5lbWl0O1xuXG4gIHZhciBzZXQgPSBTcGxpZGUyLnN0YXRlLnNldDtcbiAgdmFyIE1vdmUgPSBDb21wb25lbnRzMi5Nb3ZlO1xuICB2YXIgZ2V0UG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uLFxuICAgICAgZ2V0TGltaXQgPSBNb3ZlLmdldExpbWl0LFxuICAgICAgZXhjZWVkZWRMaW1pdCA9IE1vdmUuZXhjZWVkZWRMaW1pdCxcbiAgICAgIHRyYW5zbGF0ZSA9IE1vdmUudHJhbnNsYXRlO1xuICB2YXIgaXNTbGlkZSA9IFNwbGlkZTIuaXMoU0xJREUpO1xuICB2YXIgaW50ZXJ2YWw7XG4gIHZhciBjYWxsYmFjaztcbiAgdmFyIGZyaWN0aW9uID0gMTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9NT1ZFLCBjbGVhcik7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBjYW5jZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsKGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgc25hcCwgb25TY3JvbGxlZCwgbm9Db25zdHJhaW4pIHtcbiAgICB2YXIgZnJvbSA9IGdldFBvc2l0aW9uKCk7XG4gICAgY2xlYXIoKTtcblxuICAgIGlmIChzbmFwICYmICghaXNTbGlkZSB8fCAhZXhjZWVkZWRMaW1pdCgpKSkge1xuICAgICAgdmFyIHNpemUgPSBDb21wb25lbnRzMi5MYXlvdXQuc2xpZGVyU2l6ZSgpO1xuICAgICAgdmFyIG9mZnNldCA9IHNpZ24oZGVzdGluYXRpb24pICogc2l6ZSAqIGZsb29yKGFicyhkZXN0aW5hdGlvbikgLyBzaXplKSB8fCAwO1xuICAgICAgZGVzdGluYXRpb24gPSBNb3ZlLnRvUG9zaXRpb24oQ29tcG9uZW50czIuQ29udHJvbGxlci50b0Rlc3QoZGVzdGluYXRpb24gJSBzaXplKSkgKyBvZmZzZXQ7XG4gICAgfVxuXG4gICAgdmFyIG5vRGlzdGFuY2UgPSBhcHByb3hpbWF0ZWx5RXF1YWwoZnJvbSwgZGVzdGluYXRpb24sIDEpO1xuICAgIGZyaWN0aW9uID0gMTtcbiAgICBkdXJhdGlvbiA9IG5vRGlzdGFuY2UgPyAwIDogZHVyYXRpb24gfHwgbWF4KGFicyhkZXN0aW5hdGlvbiAtIGZyb20pIC8gQkFTRV9WRUxPQ0lUWSwgTUlOX0RVUkFUSU9OKTtcbiAgICBjYWxsYmFjayA9IG9uU2Nyb2xsZWQ7XG4gICAgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoZHVyYXRpb24sIG9uRW5kLCBhcHBseSh1cGRhdGUsIGZyb20sIGRlc3RpbmF0aW9uLCBub0NvbnN0cmFpbiksIDEpO1xuICAgIHNldChTQ1JPTExJTkcpO1xuICAgIGVtaXQoRVZFTlRfU0NST0xMKTtcbiAgICBpbnRlcnZhbC5zdGFydCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25FbmQoKSB7XG4gICAgc2V0KElETEUpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgZW1pdChFVkVOVF9TQ1JPTExFRCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoZnJvbSwgdG8sIG5vQ29uc3RyYWluLCByYXRlKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgICB2YXIgdGFyZ2V0ID0gZnJvbSArICh0byAtIGZyb20pICogZWFzaW5nKHJhdGUpO1xuICAgIHZhciBkaWZmID0gKHRhcmdldCAtIHBvc2l0aW9uKSAqIGZyaWN0aW9uO1xuICAgIHRyYW5zbGF0ZShwb3NpdGlvbiArIGRpZmYpO1xuXG4gICAgaWYgKGlzU2xpZGUgJiYgIW5vQ29uc3RyYWluICYmIGV4Y2VlZGVkTGltaXQoKSkge1xuICAgICAgZnJpY3Rpb24gKj0gRlJJQ1RJT05fRkFDVE9SO1xuXG4gICAgICBpZiAoYWJzKGRpZmYpIDwgQk9VTkNFX0RJRkZfVEhSRVNIT0xEKSB7XG4gICAgICAgIHNjcm9sbChnZXRMaW1pdChleGNlZWRlZExpbWl0KHRydWUpKSwgQk9VTkNFX0RVUkFUSU9OLCBmYWxzZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGlmIChpbnRlcnZhbCkge1xuICAgICAgaW50ZXJ2YWwuY2FuY2VsKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmIChpbnRlcnZhbCAmJiAhaW50ZXJ2YWwuaXNQYXVzZWQoKSkge1xuICAgICAgY2xlYXIoKTtcbiAgICAgIG9uRW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZWFzaW5nKHQpIHtcbiAgICB2YXIgZWFzaW5nRnVuYyA9IG9wdGlvbnMuZWFzaW5nRnVuYztcbiAgICByZXR1cm4gZWFzaW5nRnVuYyA/IGVhc2luZ0Z1bmModCkgOiAxIC0gTWF0aC5wb3coMSAtIHQsIDQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogY2xlYXIsXG4gICAgc2Nyb2xsOiBzY3JvbGwsXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn1cblxudmFyIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TID0ge1xuICBwYXNzaXZlOiBmYWxzZSxcbiAgY2FwdHVyZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gRHJhZyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlOSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U5Lm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTkuZW1pdCxcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2U5LmJpbmQsXG4gICAgICB1bmJpbmQgPSBfRXZlbnRJbnRlcmZhY2U5LnVuYmluZDtcblxuICB2YXIgc3RhdGUgPSBTcGxpZGUyLnN0YXRlO1xuICB2YXIgTW92ZSA9IENvbXBvbmVudHMyLk1vdmUsXG4gICAgICBTY3JvbGwgPSBDb21wb25lbnRzMi5TY3JvbGwsXG4gICAgICBDb250cm9sbGVyID0gQ29tcG9uZW50czIuQ29udHJvbGxlcixcbiAgICAgIHRyYWNrID0gQ29tcG9uZW50czIuRWxlbWVudHMudHJhY2ssXG4gICAgICByZWR1Y2UgPSBDb21wb25lbnRzMi5NZWRpYS5yZWR1Y2U7XG4gIHZhciBfQ29tcG9uZW50czIkRGlyZWN0aW8yID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLFxuICAgICAgcmVzb2x2ZSA9IF9Db21wb25lbnRzMiREaXJlY3RpbzIucmVzb2x2ZSxcbiAgICAgIG9yaWVudCA9IF9Db21wb25lbnRzMiREaXJlY3RpbzIub3JpZW50O1xuICB2YXIgZ2V0UG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uLFxuICAgICAgZXhjZWVkZWRMaW1pdCA9IE1vdmUuZXhjZWVkZWRMaW1pdDtcbiAgdmFyIGJhc2VQb3NpdGlvbjtcbiAgdmFyIGJhc2VFdmVudDtcbiAgdmFyIHByZXZCYXNlRXZlbnQ7XG4gIHZhciBpc0ZyZWU7XG4gIHZhciBkcmFnZ2luZztcbiAgdmFyIGV4Y2VlZGVkID0gZmFsc2U7XG4gIHZhciBjbGlja1ByZXZlbnRlZDtcbiAgdmFyIGRpc2FibGVkO1xuICB2YXIgdGFyZ2V0O1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGJpbmQodHJhY2ssIFBPSU5URVJfTU9WRV9FVkVOVFMsIG5vb3AsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX1VQX0VWRU5UUywgbm9vcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgIGJpbmQodHJhY2ssIFBPSU5URVJfRE9XTl9FVkVOVFMsIG9uUG9pbnRlckRvd24sIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBcImNsaWNrXCIsIG9uQ2xpY2ssIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KTtcbiAgICBiaW5kKHRyYWNrLCBcImRyYWdzdGFydFwiLCBwcmV2ZW50KTtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfVVBEQVRFRF0sIGluaXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgZHJhZyA9IG9wdGlvbnMuZHJhZztcbiAgICBkaXNhYmxlKCFkcmFnKTtcbiAgICBpc0ZyZWUgPSBkcmFnID09PSBcImZyZWVcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZSkge1xuICAgIGNsaWNrUHJldmVudGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICB2YXIgaXNUb3VjaCA9IGlzVG91Y2hFdmVudChlKTtcblxuICAgICAgaWYgKGlzRHJhZ2dhYmxlKGUudGFyZ2V0KSAmJiAoaXNUb3VjaCB8fCAhZS5idXR0b24pKSB7XG4gICAgICAgIGlmICghQ29udHJvbGxlci5pc0J1c3koKSkge1xuICAgICAgICAgIHRhcmdldCA9IGlzVG91Y2ggPyB0cmFjayA6IHdpbmRvdztcbiAgICAgICAgICBkcmFnZ2luZyA9IHN0YXRlLmlzKFtNT1ZJTkcsIFNDUk9MTElOR10pO1xuICAgICAgICAgIHByZXZCYXNlRXZlbnQgPSBudWxsO1xuICAgICAgICAgIGJpbmQodGFyZ2V0LCBQT0lOVEVSX01PVkVfRVZFTlRTLCBvblBvaW50ZXJNb3ZlLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgICAgICAgYmluZCh0YXJnZXQsIFBPSU5URVJfVVBfRVZFTlRTLCBvblBvaW50ZXJVcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgICAgICAgIE1vdmUuY2FuY2VsKCk7XG4gICAgICAgICAgU2Nyb2xsLmNhbmNlbCgpO1xuICAgICAgICAgIHNhdmUoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlck1vdmUoZSkge1xuICAgIGlmICghc3RhdGUuaXMoRFJBR0dJTkcpKSB7XG4gICAgICBzdGF0ZS5zZXQoRFJBR0dJTkcpO1xuICAgICAgZW1pdChFVkVOVF9EUkFHKTtcbiAgICB9XG5cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgICAgTW92ZS50cmFuc2xhdGUoYmFzZVBvc2l0aW9uICsgY29uc3RyYWluKGRpZmZDb29yZChlKSkpO1xuICAgICAgICB2YXIgZXhwaXJlZCA9IGRpZmZUaW1lKGUpID4gTE9HX0lOVEVSVkFMO1xuICAgICAgICB2YXIgaGFzRXhjZWVkZWQgPSBleGNlZWRlZCAhPT0gKGV4Y2VlZGVkID0gZXhjZWVkZWRMaW1pdCgpKTtcblxuICAgICAgICBpZiAoZXhwaXJlZCB8fCBoYXNFeGNlZWRlZCkge1xuICAgICAgICAgIHNhdmUoZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjbGlja1ByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgIGVtaXQoRVZFTlRfRFJBR0dJTkcpO1xuICAgICAgICBwcmV2ZW50KGUpO1xuICAgICAgfSBlbHNlIGlmIChpc1NsaWRlckRpcmVjdGlvbihlKSkge1xuICAgICAgICBkcmFnZ2luZyA9IHNob3VsZFN0YXJ0KGUpO1xuICAgICAgICBwcmV2ZW50KGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlclVwKGUpIHtcbiAgICBpZiAoc3RhdGUuaXMoRFJBR0dJTkcpKSB7XG4gICAgICBzdGF0ZS5zZXQoSURMRSk7XG4gICAgICBlbWl0KEVWRU5UX0RSQUdHRUQpO1xuICAgIH1cblxuICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgbW92ZShlKTtcbiAgICAgIHByZXZlbnQoZSk7XG4gICAgfVxuXG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9NT1ZFX0VWRU5UUywgb25Qb2ludGVyTW92ZSk7XG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9VUF9FVkVOVFMsIG9uUG9pbnRlclVwKTtcbiAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgaWYgKCFkaXNhYmxlZCAmJiBjbGlja1ByZXZlbnRlZCkge1xuICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlKGUpIHtcbiAgICBwcmV2QmFzZUV2ZW50ID0gYmFzZUV2ZW50O1xuICAgIGJhc2VFdmVudCA9IGU7XG4gICAgYmFzZVBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmUoZSkge1xuICAgIHZhciB2ZWxvY2l0eSA9IGNvbXB1dGVWZWxvY2l0eShlKTtcbiAgICB2YXIgZGVzdGluYXRpb24gPSBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpO1xuICAgIHZhciByZXdpbmQgPSBvcHRpb25zLnJld2luZCAmJiBvcHRpb25zLnJld2luZEJ5RHJhZztcbiAgICByZWR1Y2UoZmFsc2UpO1xuXG4gICAgaWYgKGlzRnJlZSkge1xuICAgICAgQ29udHJvbGxlci5zY3JvbGwoZGVzdGluYXRpb24sIDAsIG9wdGlvbnMuc25hcCk7XG4gICAgfSBlbHNlIGlmIChTcGxpZGUyLmlzKEZBREUpKSB7XG4gICAgICBDb250cm9sbGVyLmdvKG9yaWVudChzaWduKHZlbG9jaXR5KSkgPCAwID8gcmV3aW5kID8gXCI8XCIgOiBcIi1cIiA6IHJld2luZCA/IFwiPlwiIDogXCIrXCIpO1xuICAgIH0gZWxzZSBpZiAoU3BsaWRlMi5pcyhTTElERSkgJiYgZXhjZWVkZWQgJiYgcmV3aW5kKSB7XG4gICAgICBDb250cm9sbGVyLmdvKGV4Y2VlZGVkTGltaXQodHJ1ZSkgPyBcIj5cIiA6IFwiPFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29udHJvbGxlci5nbyhDb250cm9sbGVyLnRvRGVzdChkZXN0aW5hdGlvbiksIHRydWUpO1xuICAgIH1cblxuICAgIHJlZHVjZSh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFN0YXJ0KGUpIHtcbiAgICB2YXIgdGhyZXNob2xkcyA9IG9wdGlvbnMuZHJhZ01pblRocmVzaG9sZDtcbiAgICB2YXIgaXNPYmogPSBpc09iamVjdCh0aHJlc2hvbGRzKTtcbiAgICB2YXIgbW91c2UgPSBpc09iaiAmJiB0aHJlc2hvbGRzLm1vdXNlIHx8IDA7XG4gICAgdmFyIHRvdWNoID0gKGlzT2JqID8gdGhyZXNob2xkcy50b3VjaCA6ICt0aHJlc2hvbGRzKSB8fCAxMDtcbiAgICByZXR1cm4gYWJzKGRpZmZDb29yZChlKSkgPiAoaXNUb3VjaEV2ZW50KGUpID8gdG91Y2ggOiBtb3VzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1NsaWRlckRpcmVjdGlvbihlKSB7XG4gICAgcmV0dXJuIGFicyhkaWZmQ29vcmQoZSkpID4gYWJzKGRpZmZDb29yZChlLCB0cnVlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlVmVsb2NpdHkoZSkge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApIHx8ICFleGNlZWRlZCkge1xuICAgICAgdmFyIHRpbWUgPSBkaWZmVGltZShlKTtcblxuICAgICAgaWYgKHRpbWUgJiYgdGltZSA8IExPR19JTlRFUlZBTCkge1xuICAgICAgICByZXR1cm4gZGlmZkNvb3JkKGUpIC8gdGltZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVEZXN0aW5hdGlvbih2ZWxvY2l0eSkge1xuICAgIHJldHVybiBnZXRQb3NpdGlvbigpICsgc2lnbih2ZWxvY2l0eSkgKiBtaW4oYWJzKHZlbG9jaXR5KSAqIChvcHRpb25zLmZsaWNrUG93ZXIgfHwgNjAwKSwgaXNGcmVlID8gSW5maW5pdHkgOiBDb21wb25lbnRzMi5MYXlvdXQubGlzdFNpemUoKSAqIChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlmZkNvb3JkKGUsIG9ydGhvZ29uYWwpIHtcbiAgICByZXR1cm4gY29vcmRPZihlLCBvcnRob2dvbmFsKSAtIGNvb3JkT2YoZ2V0QmFzZUV2ZW50KGUpLCBvcnRob2dvbmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpZmZUaW1lKGUpIHtcbiAgICByZXR1cm4gdGltZU9mKGUpIC0gdGltZU9mKGdldEJhc2VFdmVudChlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlRXZlbnQoZSkge1xuICAgIHJldHVybiBiYXNlRXZlbnQgPT09IGUgJiYgcHJldkJhc2VFdmVudCB8fCBiYXNlRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBjb29yZE9mKGUsIG9ydGhvZ29uYWwpIHtcbiAgICByZXR1cm4gKGlzVG91Y2hFdmVudChlKSA/IGUuY2hhbmdlZFRvdWNoZXNbMF0gOiBlKVtcInBhZ2VcIiArIHJlc29sdmUob3J0aG9nb25hbCA/IFwiWVwiIDogXCJYXCIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cmFpbihkaWZmKSB7XG4gICAgcmV0dXJuIGRpZmYgLyAoZXhjZWVkZWQgJiYgU3BsaWRlMi5pcyhTTElERSkgPyBGUklDVElPTiA6IDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNEcmFnZ2FibGUodGFyZ2V0Mikge1xuICAgIHZhciBub0RyYWcgPSBvcHRpb25zLm5vRHJhZztcbiAgICByZXR1cm4gIW1hdGNoZXModGFyZ2V0MiwgXCIuXCIgKyBDTEFTU19QQUdJTkFUSU9OX1BBR0UgKyBcIiwgLlwiICsgQ0xBU1NfQVJST1cpICYmICghbm9EcmFnIHx8ICFtYXRjaGVzKHRhcmdldDIsIG5vRHJhZykpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUb3VjaEV2ZW50KGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIFRvdWNoRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZSBpbnN0YW5jZW9mIFRvdWNoRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBpc0RyYWdnaW5nKCkge1xuICAgIHJldHVybiBkcmFnZ2luZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUodmFsdWUpIHtcbiAgICBkaXNhYmxlZCA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICBpc0RyYWdnaW5nOiBpc0RyYWdnaW5nXG4gIH07XG59XG5cbnZhciBOT1JNQUxJWkFUSU9OX01BUCA9IHtcbiAgU3BhY2ViYXI6IFwiIFwiLFxuICBSaWdodDogQVJST1dfUklHSFQsXG4gIExlZnQ6IEFSUk9XX0xFRlQsXG4gIFVwOiBBUlJPV19VUCxcbiAgRG93bjogQVJST1dfRE9XTlxufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICBrZXkgPSBpc1N0cmluZyhrZXkpID8ga2V5IDoga2V5LmtleTtcbiAgcmV0dXJuIE5PUk1BTElaQVRJT05fTUFQW2tleV0gfHwga2V5O1xufVxuXG52YXIgS0VZQk9BUkRfRVZFTlQgPSBcImtleWRvd25cIjtcblxuZnVuY3Rpb24gS2V5Ym9hcmQoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTEwID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTEwLm9uLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTEwLmJpbmQsXG4gICAgICB1bmJpbmQgPSBfRXZlbnRJbnRlcmZhY2UxMC51bmJpbmQ7XG5cbiAgdmFyIHJvb3QgPSBTcGxpZGUyLnJvb3Q7XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLnJlc29sdmU7XG4gIHZhciB0YXJnZXQ7XG4gIHZhciBkaXNhYmxlZDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgZGVzdHJveSk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgaW5pdCk7XG4gICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGtleWJvYXJkID0gb3B0aW9ucy5rZXlib2FyZDtcblxuICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgdGFyZ2V0ID0ga2V5Ym9hcmQgPT09IFwiZ2xvYmFsXCIgPyB3aW5kb3cgOiByb290O1xuICAgICAgYmluZCh0YXJnZXQsIEtFWUJPQVJEX0VWRU5ULCBvbktleWRvd24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdW5iaW5kKHRhcmdldCwgS0VZQk9BUkRfRVZFTlQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZSh2YWx1ZSkge1xuICAgIGRpc2FibGVkID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoKSB7XG4gICAgdmFyIF9kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNhYmxlZCA9IF9kaXNhYmxlZDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleShlKTtcblxuICAgICAgaWYgKGtleSA9PT0gcmVzb2x2ZShBUlJPV19MRUZUKSkge1xuICAgICAgICBTcGxpZGUyLmdvKFwiPFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSByZXNvbHZlKEFSUk9XX1JJR0hUKSkge1xuICAgICAgICBTcGxpZGUyLmdvKFwiPlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIGRpc2FibGU6IGRpc2FibGVcbiAgfTtcbn1cblxudmFyIFNSQ19EQVRBX0FUVFJJQlVURSA9IERBVEFfQVRUUklCVVRFICsgXCItbGF6eVwiO1xudmFyIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSA9IFNSQ19EQVRBX0FUVFJJQlVURSArIFwiLXNyY3NldFwiO1xudmFyIElNQUdFX1NFTEVDVE9SID0gXCJbXCIgKyBTUkNfREFUQV9BVFRSSUJVVEUgKyBcIl0sIFtcIiArIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSArIFwiXVwiO1xuXG5mdW5jdGlvbiBMYXp5TG9hZChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMTEgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMTEub24sXG4gICAgICBvZmYgPSBfRXZlbnRJbnRlcmZhY2UxMS5vZmYsXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMTEuYmluZCxcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2UxMS5lbWl0O1xuXG4gIHZhciBpc1NlcXVlbnRpYWwgPSBvcHRpb25zLmxhenlMb2FkID09PSBcInNlcXVlbnRpYWxcIjtcbiAgdmFyIGV2ZW50cyA9IFtFVkVOVF9NT1ZFRCwgRVZFTlRfU0NST0xMRURdO1xuICB2YXIgZW50cmllcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChvcHRpb25zLmxhenlMb2FkKSB7XG4gICAgICBpbml0KCk7XG4gICAgICBvbihFVkVOVF9SRUZSRVNILCBpbml0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGVtcHR5KGVudHJpZXMpO1xuICAgIHJlZ2lzdGVyKCk7XG5cbiAgICBpZiAoaXNTZXF1ZW50aWFsKSB7XG4gICAgICBsb2FkTmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmYoZXZlbnRzKTtcbiAgICAgIG9uKGV2ZW50cywgY2hlY2spO1xuICAgICAgY2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICBDb21wb25lbnRzMi5TbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgIHF1ZXJ5QWxsKFNsaWRlLnNsaWRlLCBJTUFHRV9TRUxFQ1RPUikuZm9yRWFjaChmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAgIHZhciBzcmMgPSBnZXRBdHRyaWJ1dGUoaW1nLCBTUkNfREFUQV9BVFRSSUJVVEUpO1xuICAgICAgICB2YXIgc3Jjc2V0ID0gZ2V0QXR0cmlidXRlKGltZywgU1JDU0VUX0RBVEFfQVRUUklCVVRFKTtcblxuICAgICAgICBpZiAoc3JjICE9PSBpbWcuc3JjIHx8IHNyY3NldCAhPT0gaW1nLnNyY3NldCkge1xuICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzZXMuc3Bpbm5lcjtcbiAgICAgICAgICB2YXIgcGFyZW50ID0gaW1nLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgdmFyIHNwaW5uZXIgPSBjaGlsZChwYXJlbnQsIFwiLlwiICsgY2xhc3NOYW1lKSB8fCBjcmVhdGUoXCJzcGFuXCIsIGNsYXNzTmFtZSwgcGFyZW50KTtcbiAgICAgICAgICBlbnRyaWVzLnB1c2goW2ltZywgU2xpZGUsIHNwaW5uZXJdKTtcbiAgICAgICAgICBpbWcuc3JjIHx8IGRpc3BsYXkoaW1nLCBcIm5vbmVcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2soKSB7XG4gICAgZW50cmllcyA9IGVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBvcHRpb25zLnBlclBhZ2UgKiAoKG9wdGlvbnMucHJlbG9hZFBhZ2VzIHx8IDEpICsgMSkgLSAxO1xuICAgICAgcmV0dXJuIGRhdGFbMV0uaXNXaXRoaW4oU3BsaWRlMi5pbmRleCwgZGlzdGFuY2UpID8gbG9hZChkYXRhKSA6IHRydWU7XG4gICAgfSk7XG4gICAgZW50cmllcy5sZW5ndGggfHwgb2ZmKGV2ZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkKGRhdGEpIHtcbiAgICB2YXIgaW1nID0gZGF0YVswXTtcbiAgICBhZGRDbGFzcyhkYXRhWzFdLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcbiAgICBiaW5kKGltZywgXCJsb2FkIGVycm9yXCIsIGFwcGx5KG9uTG9hZCwgZGF0YSkpO1xuICAgIHNldEF0dHJpYnV0ZShpbWcsIFwic3JjXCIsIGdldEF0dHJpYnV0ZShpbWcsIFNSQ19EQVRBX0FUVFJJQlVURSkpO1xuICAgIHNldEF0dHJpYnV0ZShpbWcsIFwic3Jjc2V0XCIsIGdldEF0dHJpYnV0ZShpbWcsIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSkpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShpbWcsIFNSQ19EQVRBX0FUVFJJQlVURSk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKGltZywgU1JDU0VUX0RBVEFfQVRUUklCVVRFKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTG9hZChkYXRhLCBlKSB7XG4gICAgdmFyIGltZyA9IGRhdGFbMF0sXG4gICAgICAgIFNsaWRlID0gZGF0YVsxXTtcbiAgICByZW1vdmVDbGFzcyhTbGlkZS5zbGlkZSwgQ0xBU1NfTE9BRElORyk7XG5cbiAgICBpZiAoZS50eXBlICE9PSBcImVycm9yXCIpIHtcbiAgICAgIHJlbW92ZShkYXRhWzJdKTtcbiAgICAgIGRpc3BsYXkoaW1nLCBcIlwiKTtcbiAgICAgIGVtaXQoRVZFTlRfTEFaWUxPQURfTE9BREVELCBpbWcsIFNsaWRlKTtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFKTtcbiAgICB9XG5cbiAgICBpc1NlcXVlbnRpYWwgJiYgbG9hZE5leHQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWROZXh0KCkge1xuICAgIGVudHJpZXMubGVuZ3RoICYmIGxvYWQoZW50cmllcy5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGFwcGx5KGVtcHR5LCBlbnRyaWVzKSxcbiAgICBjaGVjazogY2hlY2tcbiAgfTtcbn1cblxuZnVuY3Rpb24gUGFnaW5hdGlvbihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgdmFyIG9uID0gZXZlbnQub24sXG4gICAgICBlbWl0ID0gZXZlbnQuZW1pdCxcbiAgICAgIGJpbmQgPSBldmVudC5iaW5kO1xuICB2YXIgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzLFxuICAgICAgRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyO1xuICB2YXIgaGFzRm9jdXMgPSBDb250cm9sbGVyLmhhc0ZvY3VzLFxuICAgICAgZ2V0SW5kZXggPSBDb250cm9sbGVyLmdldEluZGV4LFxuICAgICAgZ28gPSBDb250cm9sbGVyLmdvO1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBFbGVtZW50cy5wYWdpbmF0aW9uO1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgdmFyIGxpc3Q7XG4gIHZhciBwYWdpbmF0aW9uQ2xhc3NlcztcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VEXSwgbW91bnQpO1xuICAgIHZhciBlbmFibGVkID0gb3B0aW9ucy5wYWdpbmF0aW9uO1xuICAgIHBsYWNlaG9sZGVyICYmIGRpc3BsYXkocGxhY2Vob2xkZXIsIGVuYWJsZWQgPyBcIlwiIDogXCJub25lXCIpO1xuXG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIG9uKFtFVkVOVF9NT1ZFLCBFVkVOVF9TQ1JPTEwsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgICAgIGNyZWF0ZVBhZ2luYXRpb24oKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgZW1pdChFVkVOVF9QQUdJTkFUSU9OX01PVU5URUQsIHtcbiAgICAgICAgbGlzdDogbGlzdCxcbiAgICAgICAgaXRlbXM6IGl0ZW1zXG4gICAgICB9LCBnZXRBdChTcGxpZGUyLmluZGV4KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGlzdCkge1xuICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyID8gc2xpY2UobGlzdC5jaGlsZHJlbikgOiBsaXN0KTtcbiAgICAgIHJlbW92ZUNsYXNzKGxpc3QsIHBhZ2luYXRpb25DbGFzc2VzKTtcbiAgICAgIGVtcHR5KGl0ZW1zKTtcbiAgICAgIGxpc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhZ2luYXRpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IFNwbGlkZTIubGVuZ3RoO1xuICAgIHZhciBjbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzLFxuICAgICAgICBpMThuID0gb3B0aW9ucy5pMThuLFxuICAgICAgICBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlO1xuICAgIHZhciBtYXggPSBoYXNGb2N1cygpID8gQ29udHJvbGxlci5nZXRFbmQoKSArIDEgOiBjZWlsKGxlbmd0aCAvIHBlclBhZ2UpO1xuICAgIGxpc3QgPSBwbGFjZWhvbGRlciB8fCBjcmVhdGUoXCJ1bFwiLCBjbGFzc2VzLnBhZ2luYXRpb24sIEVsZW1lbnRzLnRyYWNrLnBhcmVudEVsZW1lbnQpO1xuICAgIGFkZENsYXNzKGxpc3QsIHBhZ2luYXRpb25DbGFzc2VzID0gQ0xBU1NfUEFHSU5BVElPTiArIFwiLS1cIiArIGdldERpcmVjdGlvbigpKTtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgUk9MRSwgXCJ0YWJsaXN0XCIpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBBUklBX0xBQkVMLCBpMThuLnNlbGVjdCk7XG4gICAgc2V0QXR0cmlidXRlKGxpc3QsIEFSSUFfT1JJRU5UQVRJT04sIGdldERpcmVjdGlvbigpID09PSBUVEIgPyBcInZlcnRpY2FsXCIgOiBcIlwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgIHZhciBsaSA9IGNyZWF0ZShcImxpXCIsIG51bGwsIGxpc3QpO1xuICAgICAgdmFyIGJ1dHRvbiA9IGNyZWF0ZShcImJ1dHRvblwiLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnBhZ2UsXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgIH0sIGxpKTtcbiAgICAgIHZhciBjb250cm9scyA9IFNsaWRlcy5nZXRJbihpKS5tYXAoZnVuY3Rpb24gKFNsaWRlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZS5zbGlkZS5pZDtcbiAgICAgIH0pO1xuICAgICAgdmFyIHRleHQgPSAhaGFzRm9jdXMoKSAmJiBwZXJQYWdlID4gMSA/IGkxOG4ucGFnZVggOiBpMThuLnNsaWRlWDtcbiAgICAgIGJpbmQoYnV0dG9uLCBcImNsaWNrXCIsIGFwcGx5KG9uQ2xpY2ssIGkpKTtcblxuICAgICAgaWYgKG9wdGlvbnMucGFnaW5hdGlvbktleWJvYXJkKSB7XG4gICAgICAgIGJpbmQoYnV0dG9uLCBcImtleWRvd25cIiwgYXBwbHkob25LZXlkb3duLCBpKSk7XG4gICAgICB9XG5cbiAgICAgIHNldEF0dHJpYnV0ZShsaSwgUk9MRSwgXCJwcmVzZW50YXRpb25cIik7XG4gICAgICBzZXRBdHRyaWJ1dGUoYnV0dG9uLCBST0xFLCBcInRhYlwiKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIEFSSUFfQ09OVFJPTFMsIGNvbnRyb2xzLmpvaW4oXCIgXCIpKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIEFSSUFfTEFCRUwsIGZvcm1hdCh0ZXh0LCBpICsgMSkpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgVEFCX0lOREVYLCAtMSk7XG4gICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgbGk6IGxpLFxuICAgICAgICBidXR0b246IGJ1dHRvbixcbiAgICAgICAgcGFnZTogaVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhwYWdlKSB7XG4gICAgZ28oXCI+XCIgKyBwYWdlLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihwYWdlLCBlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5KGUpO1xuICAgIHZhciBkaXIgPSBnZXREaXJlY3Rpb24oKTtcbiAgICB2YXIgbmV4dFBhZ2UgPSAtMTtcblxuICAgIGlmIChrZXkgPT09IHJlc29sdmUoQVJST1dfUklHSFQsIGZhbHNlLCBkaXIpKSB7XG4gICAgICBuZXh0UGFnZSA9ICsrcGFnZSAlIGxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gcmVzb2x2ZShBUlJPV19MRUZULCBmYWxzZSwgZGlyKSkge1xuICAgICAgbmV4dFBhZ2UgPSAoLS1wYWdlICsgbGVuZ3RoKSAlIGxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJIb21lXCIpIHtcbiAgICAgIG5leHRQYWdlID0gMDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJFbmRcIikge1xuICAgICAgbmV4dFBhZ2UgPSBsZW5ndGggLSAxO1xuICAgIH1cblxuICAgIHZhciBpdGVtID0gaXRlbXNbbmV4dFBhZ2VdO1xuXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGZvY3VzKGl0ZW0uYnV0dG9uKTtcbiAgICAgIGdvKFwiPlwiICsgbmV4dFBhZ2UpO1xuICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMucGFnaW5hdGlvbkRpcmVjdGlvbiB8fCBvcHRpb25zLmRpcmVjdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF0KGluZGV4KSB7XG4gICAgcmV0dXJuIGl0ZW1zW0NvbnRyb2xsZXIudG9QYWdlKGluZGV4KV07XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHByZXYgPSBnZXRBdChnZXRJbmRleCh0cnVlKSk7XG4gICAgdmFyIGN1cnIgPSBnZXRBdChnZXRJbmRleCgpKTtcblxuICAgIGlmIChwcmV2KSB7XG4gICAgICB2YXIgYnV0dG9uID0gcHJldi5idXR0b247XG4gICAgICByZW1vdmVDbGFzcyhidXR0b24sIENMQVNTX0FDVElWRSk7XG4gICAgICByZW1vdmVBdHRyaWJ1dGUoYnV0dG9uLCBBUklBX1NFTEVDVEVEKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIFRBQl9JTkRFWCwgLTEpO1xuICAgIH1cblxuICAgIGlmIChjdXJyKSB7XG4gICAgICB2YXIgX2J1dHRvbiA9IGN1cnIuYnV0dG9uO1xuICAgICAgYWRkQ2xhc3MoX2J1dHRvbiwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgIHNldEF0dHJpYnV0ZShfYnV0dG9uLCBBUklBX1NFTEVDVEVELCB0cnVlKTtcbiAgICAgIHNldEF0dHJpYnV0ZShfYnV0dG9uLCBUQUJfSU5ERVgsIFwiXCIpO1xuICAgIH1cblxuICAgIGVtaXQoRVZFTlRfUEFHSU5BVElPTl9VUERBVEVELCB7XG4gICAgICBsaXN0OiBsaXN0LFxuICAgICAgaXRlbXM6IGl0ZW1zXG4gICAgfSwgcHJldiwgY3Vycik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGl0ZW1zOiBpdGVtcyxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBnZXRBdDogZ2V0QXQsXG4gICAgdXBkYXRlOiB1cGRhdGVcbiAgfTtcbn1cblxudmFyIFRSSUdHRVJfS0VZUyA9IFtcIiBcIiwgXCJFbnRlclwiXTtcblxuZnVuY3Rpb24gU3luYyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgaXNOYXZpZ2F0aW9uID0gb3B0aW9ucy5pc05hdmlnYXRpb24sXG4gICAgICBzbGlkZUZvY3VzID0gb3B0aW9ucy5zbGlkZUZvY3VzO1xuICB2YXIgZXZlbnRzID0gW107XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgU3BsaWRlMi5zcGxpZGVzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgaWYgKCF0YXJnZXQuaXNQYXJlbnQpIHtcbiAgICAgICAgc3luYyhTcGxpZGUyLCB0YXJnZXQuc3BsaWRlKTtcbiAgICAgICAgc3luYyh0YXJnZXQuc3BsaWRlLCBTcGxpZGUyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChpc05hdmlnYXRpb24pIHtcbiAgICAgIG5hdmlnYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBlbXB0eShldmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN5bmMoc3BsaWRlLCB0YXJnZXQpIHtcbiAgICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShzcGxpZGUpO1xuICAgIGV2ZW50Lm9uKEVWRU5UX01PVkUsIGZ1bmN0aW9uIChpbmRleCwgcHJldiwgZGVzdCkge1xuICAgICAgdGFyZ2V0LmdvKHRhcmdldC5pcyhMT09QKSA/IGRlc3QgOiBpbmRleCk7XG4gICAgfSk7XG4gICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gICAgdmFyIG9uID0gZXZlbnQub247XG4gICAgb24oRVZFTlRfQ0xJQ0ssIG9uQ2xpY2spO1xuICAgIG9uKEVWRU5UX1NMSURFX0tFWURPV04sIG9uS2V5ZG93bik7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCB1cGRhdGUpO1xuICAgIGV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICBldmVudC5lbWl0KEVWRU5UX05BVklHQVRJT05fTU9VTlRFRCwgU3BsaWRlMi5zcGxpZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBzZXRBdHRyaWJ1dGUoQ29tcG9uZW50czIuRWxlbWVudHMubGlzdCwgQVJJQV9PUklFTlRBVElPTiwgb3B0aW9ucy5kaXJlY3Rpb24gPT09IFRUQiA/IFwidmVydGljYWxcIiA6IFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhTbGlkZSkge1xuICAgIFNwbGlkZTIuZ28oU2xpZGUuaW5kZXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlkb3duKFNsaWRlLCBlKSB7XG4gICAgaWYgKGluY2x1ZGVzKFRSSUdHRVJfS0VZUywgbm9ybWFsaXplS2V5KGUpKSkge1xuICAgICAgb25DbGljayhTbGlkZSk7XG4gICAgICBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dXA6IGFwcGx5KENvbXBvbmVudHMyLk1lZGlhLnNldCwge1xuICAgICAgc2xpZGVGb2N1czogaXNVbmRlZmluZWQoc2xpZGVGb2N1cykgPyBpc05hdmlnYXRpb24gOiBzbGlkZUZvY3VzXG4gICAgfSwgdHJ1ZSksXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgcmVtb3VudDogcmVtb3VudFxuICB9O1xufVxuXG5mdW5jdGlvbiBXaGVlbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMTIgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UxMi5iaW5kO1xuXG4gIHZhciBsYXN0VGltZSA9IDA7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKG9wdGlvbnMud2hlZWwpIHtcbiAgICAgIGJpbmQoQ29tcG9uZW50czIuRWxlbWVudHMudHJhY2ssIFwid2hlZWxcIiwgb25XaGVlbCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uV2hlZWwoZSkge1xuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIHZhciBkZWx0YVkgPSBlLmRlbHRhWTtcbiAgICAgIHZhciBiYWNrd2FyZHMgPSBkZWx0YVkgPCAwO1xuICAgICAgdmFyIHRpbWVTdGFtcCA9IHRpbWVPZihlKTtcblxuICAgICAgdmFyIF9taW4gPSBvcHRpb25zLndoZWVsTWluVGhyZXNob2xkIHx8IDA7XG5cbiAgICAgIHZhciBzbGVlcCA9IG9wdGlvbnMud2hlZWxTbGVlcCB8fCAwO1xuXG4gICAgICBpZiAoYWJzKGRlbHRhWSkgPiBfbWluICYmIHRpbWVTdGFtcCAtIGxhc3RUaW1lID4gc2xlZXApIHtcbiAgICAgICAgU3BsaWRlMi5nbyhiYWNrd2FyZHMgPyBcIjxcIiA6IFwiPlwiKTtcbiAgICAgICAgbGFzdFRpbWUgPSB0aW1lU3RhbXA7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFByZXZlbnQoYmFja3dhcmRzKSAmJiBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFByZXZlbnQoYmFja3dhcmRzKSB7XG4gICAgcmV0dXJuICFvcHRpb25zLnJlbGVhc2VXaGVlbCB8fCBTcGxpZGUyLnN0YXRlLmlzKE1PVklORykgfHwgQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRBZGphY2VudChiYWNrd2FyZHMpICE9PSAtMTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50XG4gIH07XG59XG5cbnZhciBTUl9SRU1PVkFMX0RFTEFZID0gOTA7XG5cbmZ1bmN0aW9uIExpdmUoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTEzID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTEzLm9uO1xuXG4gIHZhciB0cmFjayA9IENvbXBvbmVudHMyLkVsZW1lbnRzLnRyYWNrO1xuICB2YXIgZW5hYmxlZCA9IG9wdGlvbnMubGl2ZSAmJiAhb3B0aW9ucy5pc05hdmlnYXRpb247XG4gIHZhciBzciA9IGNyZWF0ZShcInNwYW5cIiwgQ0xBU1NfU1IpO1xuICB2YXIgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoU1JfUkVNT1ZBTF9ERUxBWSwgYXBwbHkodG9nZ2xlLCBmYWxzZSkpO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBkaXNhYmxlKCFDb21wb25lbnRzMi5BdXRvcGxheS5pc1BhdXNlZCgpKTtcbiAgICAgIHNldEF0dHJpYnV0ZSh0cmFjaywgQVJJQV9BVE9NSUMsIHRydWUpO1xuICAgICAgc3IudGV4dENvbnRlbnQgPSBcIlxcdTIwMjZcIjtcbiAgICAgIG9uKEVWRU5UX0FVVE9QTEFZX1BMQVksIGFwcGx5KGRpc2FibGUsIHRydWUpKTtcbiAgICAgIG9uKEVWRU5UX0FVVE9QTEFZX1BBVVNFLCBhcHBseShkaXNhYmxlLCBmYWxzZSkpO1xuICAgICAgb24oW0VWRU5UX01PVkVELCBFVkVOVF9TQ1JPTExFRF0sIGFwcGx5KHRvZ2dsZSwgdHJ1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZShhY3RpdmUpIHtcbiAgICBzZXRBdHRyaWJ1dGUodHJhY2ssIEFSSUFfQlVTWSwgYWN0aXZlKTtcblxuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIGFwcGVuZCh0cmFjaywgc3IpO1xuICAgICAgaW50ZXJ2YWwuc3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKHNyKTtcbiAgICAgIGludGVydmFsLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgcmVtb3ZlQXR0cmlidXRlKHRyYWNrLCBbQVJJQV9MSVZFLCBBUklBX0FUT01JQywgQVJJQV9CVVNZXSk7XG4gICAgcmVtb3ZlKHNyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoZGlzYWJsZWQpIHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgc2V0QXR0cmlidXRlKHRyYWNrLCBBUklBX0xJVkUsIGRpc2FibGVkID8gXCJvZmZcIiA6IFwicG9saXRlXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRpc2FibGU6IGRpc2FibGUsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9O1xufVxuXG52YXIgQ29tcG9uZW50Q29uc3RydWN0b3JzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIE1lZGlhOiBNZWRpYSxcbiAgRGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIEVsZW1lbnRzOiBFbGVtZW50cyxcbiAgU2xpZGVzOiBTbGlkZXMsXG4gIExheW91dDogTGF5b3V0LFxuICBDbG9uZXM6IENsb25lcyxcbiAgTW92ZTogTW92ZSxcbiAgQ29udHJvbGxlcjogQ29udHJvbGxlcixcbiAgQXJyb3dzOiBBcnJvd3MsXG4gIEF1dG9wbGF5OiBBdXRvcGxheSxcbiAgQ292ZXI6IENvdmVyLFxuICBTY3JvbGw6IFNjcm9sbCxcbiAgRHJhZzogRHJhZyxcbiAgS2V5Ym9hcmQ6IEtleWJvYXJkLFxuICBMYXp5TG9hZDogTGF6eUxvYWQsXG4gIFBhZ2luYXRpb246IFBhZ2luYXRpb24sXG4gIFN5bmM6IFN5bmMsXG4gIFdoZWVsOiBXaGVlbCxcbiAgTGl2ZTogTGl2ZVxufSk7XG52YXIgSTE4TiA9IHtcbiAgcHJldjogXCJQcmV2aW91cyBzbGlkZVwiLFxuICBuZXh0OiBcIk5leHQgc2xpZGVcIixcbiAgZmlyc3Q6IFwiR28gdG8gZmlyc3Qgc2xpZGVcIixcbiAgbGFzdDogXCJHbyB0byBsYXN0IHNsaWRlXCIsXG4gIHNsaWRlWDogXCJHbyB0byBzbGlkZSAlc1wiLFxuICBwYWdlWDogXCJHbyB0byBwYWdlICVzXCIsXG4gIHBsYXk6IFwiU3RhcnQgYXV0b3BsYXlcIixcbiAgcGF1c2U6IFwiUGF1c2UgYXV0b3BsYXlcIixcbiAgY2Fyb3VzZWw6IFwiY2Fyb3VzZWxcIixcbiAgc2xpZGU6IFwic2xpZGVcIixcbiAgc2VsZWN0OiBcIlNlbGVjdCBhIHNsaWRlIHRvIHNob3dcIixcbiAgc2xpZGVMYWJlbDogXCIlcyBvZiAlc1wiXG59O1xudmFyIERFRkFVTFRTID0ge1xuICB0eXBlOiBcInNsaWRlXCIsXG4gIHJvbGU6IFwicmVnaW9uXCIsXG4gIHNwZWVkOiA0MDAsXG4gIHBlclBhZ2U6IDEsXG4gIGNsb25lU3RhdHVzOiB0cnVlLFxuICBhcnJvd3M6IHRydWUsXG4gIHBhZ2luYXRpb246IHRydWUsXG4gIHBhZ2luYXRpb25LZXlib2FyZDogdHJ1ZSxcbiAgaW50ZXJ2YWw6IDVlMyxcbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gIHJlc2V0UHJvZ3Jlc3M6IHRydWUsXG4gIGVhc2luZzogXCJjdWJpYy1iZXppZXIoMC4yNSwgMSwgMC41LCAxKVwiLFxuICBkcmFnOiB0cnVlLFxuICBkaXJlY3Rpb246IFwibHRyXCIsXG4gIHRyaW1TcGFjZTogdHJ1ZSxcbiAgZm9jdXNhYmxlTm9kZXM6IFwiYSwgYnV0dG9uLCB0ZXh0YXJlYSwgaW5wdXQsIHNlbGVjdCwgaWZyYW1lXCIsXG4gIGxpdmU6IHRydWUsXG4gIGNsYXNzZXM6IENMQVNTRVMsXG4gIGkxOG46IEkxOE4sXG4gIHJlZHVjZWRNb3Rpb246IHtcbiAgICBzcGVlZDogMCxcbiAgICByZXdpbmRTcGVlZDogMCxcbiAgICBhdXRvcGxheTogXCJwYXVzZVwiXG4gIH1cbn07XG5cbmZ1bmN0aW9uIEZhZGUoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcztcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBFdmVudEludGVyZmFjZShTcGxpZGUyKS5vbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSF0sIGluaXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBTbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgIFNsaWRlLnN0eWxlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlWCgtXCIgKyAxMDAgKiBTbGlkZS5pbmRleCArIFwiJSlcIik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChpbmRleCwgZG9uZSkge1xuICAgIFNsaWRlcy5zdHlsZShcInRyYW5zaXRpb25cIiwgXCJvcGFjaXR5IFwiICsgb3B0aW9ucy5zcGVlZCArIFwibXMgXCIgKyBvcHRpb25zLmVhc2luZyk7XG4gICAgbmV4dFRpY2soZG9uZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgY2FuY2VsOiBub29wXG4gIH07XG59XG5cbmZ1bmN0aW9uIFNsaWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBNb3ZlID0gQ29tcG9uZW50czIuTW92ZSxcbiAgICAgIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyLFxuICAgICAgU2Nyb2xsID0gQ29tcG9uZW50czIuU2Nyb2xsO1xuICB2YXIgbGlzdCA9IENvbXBvbmVudHMyLkVsZW1lbnRzLmxpc3Q7XG4gIHZhciB0cmFuc2l0aW9uID0gYXBwbHkoc3R5bGUsIGxpc3QsIFwidHJhbnNpdGlvblwiKTtcbiAgdmFyIGVuZENhbGxiYWNrO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLmJpbmQobGlzdCwgXCJ0cmFuc2l0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgPT09IGxpc3QgJiYgZW5kQ2FsbGJhY2spIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIGVuZENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChpbmRleCwgZG9uZSkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IE1vdmUudG9Qb3NpdGlvbihpbmRleCwgdHJ1ZSk7XG4gICAgdmFyIHBvc2l0aW9uID0gTW92ZS5nZXRQb3NpdGlvbigpO1xuICAgIHZhciBzcGVlZCA9IGdldFNwZWVkKGluZGV4KTtcblxuICAgIGlmIChhYnMoZGVzdGluYXRpb24gLSBwb3NpdGlvbikgPj0gMSAmJiBzcGVlZCA+PSAxKSB7XG4gICAgICBpZiAob3B0aW9ucy51c2VTY3JvbGwpIHtcbiAgICAgICAgU2Nyb2xsLnNjcm9sbChkZXN0aW5hdGlvbiwgc3BlZWQsIGZhbHNlLCBkb25lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb24oXCJ0cmFuc2Zvcm0gXCIgKyBzcGVlZCArIFwibXMgXCIgKyBvcHRpb25zLmVhc2luZyk7XG4gICAgICAgIE1vdmUudHJhbnNsYXRlKGRlc3RpbmF0aW9uLCB0cnVlKTtcbiAgICAgICAgZW5kQ2FsbGJhY2sgPSBkb25lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBNb3ZlLmp1bXAoaW5kZXgpO1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICB0cmFuc2l0aW9uKFwiXCIpO1xuICAgIFNjcm9sbC5jYW5jZWwoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWVkKGluZGV4KSB7XG4gICAgdmFyIHJld2luZFNwZWVkID0gb3B0aW9ucy5yZXdpbmRTcGVlZDtcblxuICAgIGlmIChTcGxpZGUyLmlzKFNMSURFKSAmJiByZXdpbmRTcGVlZCkge1xuICAgICAgdmFyIHByZXYgPSBDb250cm9sbGVyLmdldEluZGV4KHRydWUpO1xuICAgICAgdmFyIGVuZCA9IENvbnRyb2xsZXIuZ2V0RW5kKCk7XG5cbiAgICAgIGlmIChwcmV2ID09PSAwICYmIGluZGV4ID49IGVuZCB8fCBwcmV2ID49IGVuZCAmJiBpbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmV3aW5kU3BlZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnMuc3BlZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn1cblxudmFyIF9TcGxpZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfU3BsaWRlKHRhcmdldCwgb3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnQgPSBFdmVudEludGVyZmFjZSgpO1xuICAgIHRoaXMuQ29tcG9uZW50cyA9IHt9O1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZShDUkVBVEVEKTtcbiAgICB0aGlzLnNwbGlkZXMgPSBbXTtcbiAgICB0aGlzLl9vID0ge307XG4gICAgdGhpcy5fRSA9IHt9O1xuICAgIHZhciByb290ID0gaXNTdHJpbmcodGFyZ2V0KSA/IHF1ZXJ5KGRvY3VtZW50LCB0YXJnZXQpIDogdGFyZ2V0O1xuICAgIGFzc2VydChyb290LCByb290ICsgXCIgaXMgaW52YWxpZC5cIik7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICBvcHRpb25zID0gbWVyZ2Uoe1xuICAgICAgbGFiZWw6IGdldEF0dHJpYnV0ZShyb290LCBBUklBX0xBQkVMKSB8fCBcIlwiLFxuICAgICAgbGFiZWxsZWRieTogZ2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfTEFCRUxMRURCWSkgfHwgXCJcIlxuICAgIH0sIERFRkFVTFRTLCBfU3BsaWRlLmRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIHRyeSB7XG4gICAgICBtZXJnZShvcHRpb25zLCBKU09OLnBhcnNlKGdldEF0dHJpYnV0ZShyb290LCBEQVRBX0FUVFJJQlVURSkpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsIFwiSW52YWxpZCBKU09OXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX28gPSBPYmplY3QuY3JlYXRlKG1lcmdlKHt9LCBvcHRpb25zKSk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gX1NwbGlkZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm1vdW50ID0gZnVuY3Rpb24gbW91bnQoRXh0ZW5zaW9ucywgVHJhbnNpdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBDb21wb25lbnRzMiA9IHRoaXMuQ29tcG9uZW50cztcbiAgICBhc3NlcnQoc3RhdGUuaXMoW0NSRUFURUQsIERFU1RST1lFRF0pLCBcIkFscmVhZHkgbW91bnRlZCFcIik7XG4gICAgc3RhdGUuc2V0KENSRUFURUQpO1xuICAgIHRoaXMuX0MgPSBDb21wb25lbnRzMjtcbiAgICB0aGlzLl9UID0gVHJhbnNpdGlvbiB8fCB0aGlzLl9UIHx8ICh0aGlzLmlzKEZBREUpID8gRmFkZSA6IFNsaWRlKTtcbiAgICB0aGlzLl9FID0gRXh0ZW5zaW9ucyB8fCB0aGlzLl9FO1xuICAgIHZhciBDb25zdHJ1Y3RvcnMgPSBhc3NpZ24oe30sIENvbXBvbmVudENvbnN0cnVjdG9ycywgdGhpcy5fRSwge1xuICAgICAgVHJhbnNpdGlvbjogdGhpcy5fVFxuICAgIH0pO1xuICAgIGZvck93bihDb25zdHJ1Y3RvcnMsIGZ1bmN0aW9uIChDb21wb25lbnQsIGtleSkge1xuICAgICAgdmFyIGNvbXBvbmVudCA9IENvbXBvbmVudChfdGhpcywgQ29tcG9uZW50czIsIF90aGlzLl9vKTtcbiAgICAgIENvbXBvbmVudHMyW2tleV0gPSBjb21wb25lbnQ7XG4gICAgICBjb21wb25lbnQuc2V0dXAgJiYgY29tcG9uZW50LnNldHVwKCk7XG4gICAgfSk7XG4gICAgZm9yT3duKENvbXBvbmVudHMyLCBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICBjb21wb25lbnQubW91bnQgJiYgY29tcG9uZW50Lm1vdW50KCk7XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KEVWRU5UX01PVU5URUQpO1xuICAgIGFkZENsYXNzKHRoaXMucm9vdCwgQ0xBU1NfSU5JVElBTElaRUQpO1xuICAgIHN0YXRlLnNldChJRExFKTtcbiAgICB0aGlzLmVtaXQoRVZFTlRfUkVBRFkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zeW5jID0gZnVuY3Rpb24gc3luYyhzcGxpZGUpIHtcbiAgICB0aGlzLnNwbGlkZXMucHVzaCh7XG4gICAgICBzcGxpZGU6IHNwbGlkZVxuICAgIH0pO1xuICAgIHNwbGlkZS5zcGxpZGVzLnB1c2goe1xuICAgICAgc3BsaWRlOiB0aGlzLFxuICAgICAgaXNQYXJlbnQ6IHRydWVcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmlzKElETEUpKSB7XG4gICAgICB0aGlzLl9DLlN5bmMucmVtb3VudCgpO1xuXG4gICAgICBzcGxpZGUuQ29tcG9uZW50cy5TeW5jLnJlbW91bnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ28gPSBmdW5jdGlvbiBnbyhjb250cm9sKSB7XG4gICAgdGhpcy5fQy5Db250cm9sbGVyLmdvKGNvbnRyb2wpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLm9uID0gZnVuY3Rpb24gb24oZXZlbnRzLCBjYWxsYmFjaykge1xuICAgIHRoaXMuZXZlbnQub24oZXZlbnRzLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLm9mZiA9IGZ1bmN0aW9uIG9mZihldmVudHMpIHtcbiAgICB0aGlzLmV2ZW50Lm9mZihldmVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgIHZhciBfdGhpcyRldmVudDtcblxuICAgIChfdGhpcyRldmVudCA9IHRoaXMuZXZlbnQpLmVtaXQuYXBwbHkoX3RoaXMkZXZlbnQsIFtldmVudF0uY29uY2F0KHNsaWNlKGFyZ3VtZW50cywgMSkpKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2xpZGVzLCBpbmRleCkge1xuICAgIHRoaXMuX0MuU2xpZGVzLmFkZChzbGlkZXMsIGluZGV4KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobWF0Y2hlcikge1xuICAgIHRoaXMuX0MuU2xpZGVzLnJlbW92ZShtYXRjaGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pcyA9IGZ1bmN0aW9uIGlzKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fby50eXBlID09PSB0eXBlO1xuICB9O1xuXG4gIF9wcm90by5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICB0aGlzLmVtaXQoRVZFTlRfUkVGUkVTSCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGNvbXBsZXRlbHkpIHtcbiAgICBpZiAoY29tcGxldGVseSA9PT0gdm9pZCAwKSB7XG4gICAgICBjb21wbGV0ZWx5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZXZlbnQgPSB0aGlzLmV2ZW50LFxuICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIEV2ZW50SW50ZXJmYWNlKHRoaXMpLm9uKEVWRU5UX1JFQURZLCB0aGlzLmRlc3Ryb3kuYmluZCh0aGlzLCBjb21wbGV0ZWx5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck93bih0aGlzLl9DLCBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIGNvbXBvbmVudC5kZXN0cm95ICYmIGNvbXBvbmVudC5kZXN0cm95KGNvbXBsZXRlbHkpO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBldmVudC5lbWl0KEVWRU5UX0RFU1RST1kpO1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgICAgY29tcGxldGVseSAmJiBlbXB0eSh0aGlzLnNwbGlkZXMpO1xuICAgICAgc3RhdGUuc2V0KERFU1RST1lFRCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKF9TcGxpZGUsIFt7XG4gICAga2V5OiBcIm9wdGlvbnNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob3B0aW9ucykge1xuICAgICAgdGhpcy5fQy5NZWRpYS5zZXQob3B0aW9ucywgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxlbmd0aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX0MuU2xpZGVzLmdldExlbmd0aCh0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5kZXhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9DLkNvbnRyb2xsZXIuZ2V0SW5kZXgoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gX1NwbGlkZTtcbn0oKTtcblxudmFyIFNwbGlkZSA9IF9TcGxpZGU7XG5TcGxpZGUuZGVmYXVsdHMgPSB7fTtcblNwbGlkZS5TVEFURVMgPSBTVEFURVM7XG52YXIgQ0xBU1NfUkVOREVSRUQgPSBcImlzLXJlbmRlcmVkXCI7XG52YXIgUkVOREVSRVJfREVGQVVMVF9DT05GSUcgPSB7XG4gIGxpc3RUYWc6IFwidWxcIixcbiAgc2xpZGVUYWc6IFwibGlcIlxufTtcblxudmFyIFN0eWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGUoaWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnN0eWxlcyA9IHt9O1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBTdHlsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5ydWxlID0gZnVuY3Rpb24gcnVsZShzZWxlY3RvciwgcHJvcCwgdmFsdWUsIGJyZWFrcG9pbnQpIHtcbiAgICBicmVha3BvaW50ID0gYnJlYWtwb2ludCB8fCBcImRlZmF1bHRcIjtcbiAgICB2YXIgc2VsZWN0b3JzID0gdGhpcy5zdHlsZXNbYnJlYWtwb2ludF0gPSB0aGlzLnN0eWxlc1ticmVha3BvaW50XSB8fCB7fTtcbiAgICB2YXIgc3R5bGVzID0gc2VsZWN0b3JzW3NlbGVjdG9yXSA9IHNlbGVjdG9yc1tzZWxlY3Rvcl0gfHwge307XG4gICAgc3R5bGVzW3Byb3BdID0gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvMi5idWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgICBpZiAodGhpcy5zdHlsZXMuZGVmYXVsdCkge1xuICAgICAgY3NzICs9IHRoaXMuYnVpbGRTZWxlY3RvcnModGhpcy5zdHlsZXMuZGVmYXVsdCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXModGhpcy5zdHlsZXMpLnNvcnQoZnVuY3Rpb24gKG4sIG0pIHtcbiAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5tZWRpYVF1ZXJ5ID09PSBcIm1pblwiID8gK24gLSArbSA6ICttIC0gK247XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoYnJlYWtwb2ludCkge1xuICAgICAgaWYgKGJyZWFrcG9pbnQgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNzcyArPSBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IFwiICsgYnJlYWtwb2ludCArIFwicHgpIHtcIjtcbiAgICAgICAgY3NzICs9IF90aGlzMi5idWlsZFNlbGVjdG9ycyhfdGhpczIuc3R5bGVzW2JyZWFrcG9pbnRdKTtcbiAgICAgICAgY3NzICs9IFwifVwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX3Byb3RvMi5idWlsZFNlbGVjdG9ycyA9IGZ1bmN0aW9uIGJ1aWxkU2VsZWN0b3JzKHNlbGVjdG9ycykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGNzcyA9IFwiXCI7XG4gICAgZm9yT3duKHNlbGVjdG9ycywgZnVuY3Rpb24gKHN0eWxlcywgc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gKFwiI1wiICsgX3RoaXMzLmlkICsgXCIgXCIgKyBzZWxlY3RvcikudHJpbSgpO1xuICAgICAgY3NzICs9IHNlbGVjdG9yICsgXCIge1wiO1xuICAgICAgZm9yT3duKHN0eWxlcywgZnVuY3Rpb24gKHZhbHVlLCBwcm9wKSB7XG4gICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIGNzcyArPSBwcm9wICsgXCI6IFwiICsgdmFsdWUgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjc3MgKz0gXCJ9XCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICByZXR1cm4gU3R5bGU7XG59KCk7XG5cbnZhciBTcGxpZGVSZW5kZXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNwbGlkZVJlbmRlcmVyKGNvbnRlbnRzLCBvcHRpb25zLCBjb25maWcsIGRlZmF1bHRzKSB7XG4gICAgdGhpcy5zbGlkZXMgPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB0aGlzLmJyZWFrcG9pbnRzID0gW107XG4gICAgbWVyZ2UoREVGQVVMVFMsIGRlZmF1bHRzIHx8IHt9KTtcbiAgICBtZXJnZShtZXJnZSh0aGlzLm9wdGlvbnMsIERFRkFVTFRTKSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgIHRoaXMuY29uZmlnID0gYXNzaWduKHt9LCBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRywgY29uZmlnIHx8IHt9KTtcbiAgICB0aGlzLmlkID0gdGhpcy5jb25maWcuaWQgfHwgdW5pcXVlSWQoXCJzcGxpZGVcIik7XG4gICAgdGhpcy5TdHlsZSA9IG5ldyBTdHlsZSh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuRGlyZWN0aW9uID0gRGlyZWN0aW9uKG51bGwsIG51bGwsIHRoaXMub3B0aW9ucyk7XG4gICAgYXNzZXJ0KHRoaXMuY29udGVudHMubGVuZ3RoLCBcIlByb3ZpZGUgYXQgbGVhc3QgMSBjb250ZW50LlwiKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIFNwbGlkZVJlbmRlcmVyLmNsZWFuID0gZnVuY3Rpb24gY2xlYW4oc3BsaWRlKSB7XG4gICAgdmFyIF9FdmVudEludGVyZmFjZTE0ID0gRXZlbnRJbnRlcmZhY2Uoc3BsaWRlKSxcbiAgICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UxNC5vbjtcblxuICAgIHZhciByb290ID0gc3BsaWRlLnJvb3Q7XG4gICAgdmFyIGNsb25lcyA9IHF1ZXJ5QWxsKHJvb3QsIFwiLlwiICsgQ0xBU1NfQ0xPTkUpO1xuICAgIG9uKEVWRU5UX01PVU5URUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZShjaGlsZChyb290LCBcInN0eWxlXCIpKTtcbiAgICB9KTtcbiAgICByZW1vdmUoY2xvbmVzKTtcbiAgfTtcblxuICB2YXIgX3Byb3RvMyA9IFNwbGlkZVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMucGFyc2VCcmVha3BvaW50cygpO1xuICAgIHRoaXMuaW5pdFNsaWRlcygpO1xuICAgIHRoaXMucmVnaXN0ZXJSb290U3R5bGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclRyYWNrU3R5bGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclNsaWRlU3R5bGVzKCk7XG4gICAgdGhpcy5yZWdpc3Rlckxpc3RTdHlsZXMoKTtcbiAgfTtcblxuICBfcHJvdG8zLmluaXRTbGlkZXMgPSBmdW5jdGlvbiBpbml0U2xpZGVzKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgcHVzaCh0aGlzLnNsaWRlcywgdGhpcy5jb250ZW50cy5tYXAoZnVuY3Rpb24gKGNvbnRlbnQsIGluZGV4KSB7XG4gICAgICBjb250ZW50ID0gaXNTdHJpbmcoY29udGVudCkgPyB7XG4gICAgICAgIGh0bWw6IGNvbnRlbnRcbiAgICAgIH0gOiBjb250ZW50O1xuICAgICAgY29udGVudC5zdHlsZXMgPSBjb250ZW50LnN0eWxlcyB8fCB7fTtcbiAgICAgIGNvbnRlbnQuYXR0cnMgPSBjb250ZW50LmF0dHJzIHx8IHt9O1xuXG4gICAgICBfdGhpczQuY292ZXIoY29udGVudCk7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gX3RoaXM0Lm9wdGlvbnMuY2xhc3Nlcy5zbGlkZSArIFwiIFwiICsgKGluZGV4ID09PSAwID8gQ0xBU1NfQUNUSVZFIDogXCJcIik7XG4gICAgICBhc3NpZ24oY29udGVudC5hdHRycywge1xuICAgICAgICBjbGFzczogKGNsYXNzZXMgKyBcIiBcIiArIChjb250ZW50LmF0dHJzLmNsYXNzIHx8IFwiXCIpKS50cmltKCksXG4gICAgICAgIHN0eWxlOiBfdGhpczQuYnVpbGRTdHlsZXMoY29udGVudC5zdHlsZXMpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pKTtcblxuICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlQ2xvbmVzKHRoaXMuc2xpZGVzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMy5yZWdpc3RlclJvb3RTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclJvb3RTdHlsZXMoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgd2lkdGggPSBfcmVmMlswXSxcbiAgICAgICAgICBvcHRpb25zID0gX3JlZjJbMV07XG5cbiAgICAgIF90aGlzNS5TdHlsZS5ydWxlKFwiIFwiLCBcIm1heC13aWR0aFwiLCB1bml0KG9wdGlvbnMud2lkdGgpLCB3aWR0aCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZWdpc3RlclRyYWNrU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJUcmFja1N0eWxlcygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBTdHlsZTIgPSB0aGlzLlN0eWxlO1xuICAgIHZhciBzZWxlY3RvciA9IFwiLlwiICsgQ0xBU1NfVFJBQ0s7XG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIHdpZHRoID0gX3JlZjNbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWYzWzFdO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIF90aGlzNi5yZXNvbHZlKFwicGFkZGluZ0xlZnRcIiksIF90aGlzNi5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIF90aGlzNi5yZXNvbHZlKFwicGFkZGluZ1JpZ2h0XCIpLCBfdGhpczYuY3NzUGFkZGluZyhvcHRpb25zLCB0cnVlKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwiaGVpZ2h0XCIsIF90aGlzNi5jc3NUcmFja0hlaWdodChvcHRpb25zKSwgd2lkdGgpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMucmVnaXN0ZXJMaXN0U3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0U3R5bGVzKCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIFN0eWxlMiA9IHRoaXMuU3R5bGU7XG4gICAgdmFyIHNlbGVjdG9yID0gXCIuXCIgKyBDTEFTU19MSVNUO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWY0WzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmNFsxXTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcInRyYW5zZm9ybVwiLCBfdGhpczcuYnVpbGRUcmFuc2xhdGUob3B0aW9ucyksIHdpZHRoKTtcblxuICAgICAgaWYgKCFfdGhpczcuY3NzU2xpZGVIZWlnaHQob3B0aW9ucykpIHtcbiAgICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwiYXNwZWN0LXJhdGlvXCIsIF90aGlzNy5jc3NBc3BlY3RSYXRpbyhvcHRpb25zKSwgd2lkdGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMucmVnaXN0ZXJTbGlkZVN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU2xpZGVTdHlsZXMoKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICB2YXIgU3R5bGUyID0gdGhpcy5TdHlsZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBcIi5cIiArIENMQVNTX1NMSURFO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWY1WzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmNVsxXTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcIndpZHRoXCIsIF90aGlzOC5jc3NTbGlkZVdpZHRoKG9wdGlvbnMpLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJoZWlnaHRcIiwgX3RoaXM4LmNzc1NsaWRlSGVpZ2h0KG9wdGlvbnMpIHx8IFwiMTAwJVwiLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgX3RoaXM4LnJlc29sdmUoXCJtYXJnaW5SaWdodFwiKSwgdW5pdChvcHRpb25zLmdhcCkgfHwgXCIwcHhcIiwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IgKyBcIiA+IGltZ1wiLCBcImRpc3BsYXlcIiwgb3B0aW9ucy5jb3ZlciA/IFwibm9uZVwiIDogXCJpbmxpbmVcIiwgd2lkdGgpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRUcmFuc2xhdGUgPSBmdW5jdGlvbiBidWlsZFRyYW5zbGF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJERpcmVjdGlvbiA9IHRoaXMuRGlyZWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3RoaXMkRGlyZWN0aW9uLnJlc29sdmUsXG4gICAgICAgIG9yaWVudCA9IF90aGlzJERpcmVjdGlvbi5vcmllbnQ7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhbHVlcy5wdXNoKHRoaXMuY3NzT2Zmc2V0Q2xvbmVzKG9wdGlvbnMpKTtcbiAgICB2YWx1ZXMucHVzaCh0aGlzLmNzc09mZnNldEdhcHMob3B0aW9ucykpO1xuXG4gICAgaWYgKHRoaXMuaXNDZW50ZXIob3B0aW9ucykpIHtcbiAgICAgIHZhbHVlcy5wdXNoKHRoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQoLTUwKSwgXCIlXCIpKTtcbiAgICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgdGhpcy5jc3NPZmZzZXRDZW50ZXIob3B0aW9ucykpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMuZmlsdGVyKEJvb2xlYW4pLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZVwiICsgcmVzb2x2ZShcIlhcIikgKyBcIihcIiArIHZhbHVlICsgXCIpXCI7XG4gICAgfSkuam9pbihcIiBcIik7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NPZmZzZXRDbG9uZXMgPSBmdW5jdGlvbiBjc3NPZmZzZXRDbG9uZXMob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyREaXJlY3Rpb24yID0gdGhpcy5EaXJlY3Rpb24sXG4gICAgICAgIHJlc29sdmUgPSBfdGhpcyREaXJlY3Rpb24yLnJlc29sdmUsXG4gICAgICAgIG9yaWVudCA9IF90aGlzJERpcmVjdGlvbjIub3JpZW50O1xuICAgIHZhciBjbG9uZUNvdW50ID0gdGhpcy5nZXRDbG9uZUNvdW50KCk7XG5cbiAgICBpZiAodGhpcy5pc0ZpeGVkV2lkdGgob3B0aW9ucykpIHtcbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWUudmFsdWUsXG4gICAgICAgICAgdW5pdDIgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlLnVuaXQ7XG5cbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KHZhbHVlKSAqIGNsb25lQ291bnQsIHVuaXQyKTtcbiAgICB9XG5cbiAgICB2YXIgcGVyY2VudCA9IDEwMCAqIGNsb25lQ291bnQgLyBvcHRpb25zLnBlclBhZ2U7XG4gICAgcmV0dXJuIG9yaWVudChwZXJjZW50KSArIFwiJVwiO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzT2Zmc2V0Q2VudGVyID0gZnVuY3Rpb24gY3NzT2Zmc2V0Q2VudGVyKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkRGlyZWN0aW9uMyA9IHRoaXMuRGlyZWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3RoaXMkRGlyZWN0aW9uMy5yZXNvbHZlLFxuICAgICAgICBvcmllbnQgPSBfdGhpcyREaXJlY3Rpb24zLm9yaWVudDtcblxuICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgdmFyIF90aGlzJHBhcnNlQ3NzVmFsdWUyID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWUyLnZhbHVlLFxuICAgICAgICAgIHVuaXQyID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTIudW5pdDtcblxuICAgICAgcmV0dXJuIFt0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KHZhbHVlIC8gMiksIHVuaXQyKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhciBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlLFxuICAgICAgICBnYXAgPSBvcHRpb25zLmdhcDtcbiAgICB2YWx1ZXMucHVzaChvcmllbnQoNTAgLyBwZXJQYWdlKSArIFwiJVwiKTtcblxuICAgIGlmIChnYXApIHtcbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlMyA9IHRoaXMucGFyc2VDc3NWYWx1ZShnYXApLFxuICAgICAgICAgIF92YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWUzLnZhbHVlLFxuICAgICAgICAgIF91bml0ID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTMudW5pdDtcblxuICAgICAgdmFyIGdhcE9mZnNldCA9IChfdmFsdWUgLyBwZXJQYWdlIC0gX3ZhbHVlKSAvIDI7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KGdhcE9mZnNldCksIF91bml0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICBfcHJvdG8zLmNzc09mZnNldEdhcHMgPSBmdW5jdGlvbiBjc3NPZmZzZXRHYXBzKG9wdGlvbnMpIHtcbiAgICB2YXIgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuXG4gICAgaWYgKGNsb25lQ291bnQgJiYgb3B0aW9ucy5nYXApIHtcbiAgICAgIHZhciBvcmllbnQgPSB0aGlzLkRpcmVjdGlvbi5vcmllbnQ7XG5cbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlNCA9IHRoaXMucGFyc2VDc3NWYWx1ZShvcHRpb25zLmdhcCksXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlNC52YWx1ZSxcbiAgICAgICAgICB1bml0MiA9IF90aGlzJHBhcnNlQ3NzVmFsdWU0LnVuaXQ7XG5cbiAgICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAqIGNsb25lQ291bnQpLCB1bml0Mik7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlO1xuICAgICAgdmFyIGdhcHMgPSBjbG9uZUNvdW50IC8gcGVyUGFnZTtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KGdhcHMgKiB2YWx1ZSksIHVuaXQyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIjtcbiAgfTtcblxuICBfcHJvdG8zLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKHByb3ApIHtcbiAgICByZXR1cm4gY2FtZWxUb0tlYmFiKHRoaXMuRGlyZWN0aW9uLnJlc29sdmUocHJvcCkpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzUGFkZGluZyA9IGZ1bmN0aW9uIGNzc1BhZGRpbmcob3B0aW9ucywgcmlnaHQpIHtcbiAgICB2YXIgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZztcbiAgICB2YXIgcHJvcCA9IHRoaXMuRGlyZWN0aW9uLnJlc29sdmUocmlnaHQgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgdHJ1ZSk7XG4gICAgcmV0dXJuIHBhZGRpbmcgJiYgdW5pdChwYWRkaW5nW3Byb3BdIHx8IChpc09iamVjdChwYWRkaW5nKSA/IDAgOiBwYWRkaW5nKSkgfHwgXCIwcHhcIjtcbiAgfTtcblxuICBfcHJvdG8zLmNzc1RyYWNrSGVpZ2h0ID0gZnVuY3Rpb24gY3NzVHJhY2tIZWlnaHQob3B0aW9ucykge1xuICAgIHZhciBoZWlnaHQgPSBcIlwiO1xuXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLmNzc0hlaWdodChvcHRpb25zKTtcbiAgICAgIGFzc2VydChoZWlnaHQsICdcImhlaWdodFwiIGlzIG1pc3NpbmcuJyk7XG4gICAgICBoZWlnaHQgPSBcImNhbGMoXCIgKyBoZWlnaHQgKyBcIiAtIFwiICsgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKSArIFwiIC0gXCIgKyB0aGlzLmNzc1BhZGRpbmcob3B0aW9ucywgdHJ1ZSkgKyBcIilcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVpZ2h0O1xuICB9O1xuXG4gIF9wcm90bzMuY3NzSGVpZ2h0ID0gZnVuY3Rpb24gY3NzSGVpZ2h0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmhlaWdodCk7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NTbGlkZVdpZHRoID0gZnVuY3Rpb24gY3NzU2xpZGVXaWR0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYXV0b1dpZHRoID8gXCJcIiA6IHVuaXQob3B0aW9ucy5maXhlZFdpZHRoKSB8fCAodGhpcy5pc1ZlcnRpY2FsKCkgPyBcIlwiIDogdGhpcy5jc3NTbGlkZVNpemUob3B0aW9ucykpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzU2xpZGVIZWlnaHQgPSBmdW5jdGlvbiBjc3NTbGlkZUhlaWdodChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHVuaXQob3B0aW9ucy5maXhlZEhlaWdodCkgfHwgKHRoaXMuaXNWZXJ0aWNhbCgpID8gb3B0aW9ucy5hdXRvSGVpZ2h0ID8gXCJcIiA6IHRoaXMuY3NzU2xpZGVTaXplKG9wdGlvbnMpIDogdGhpcy5jc3NIZWlnaHQob3B0aW9ucykpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzU2xpZGVTaXplID0gZnVuY3Rpb24gY3NzU2xpZGVTaXplKG9wdGlvbnMpIHtcbiAgICB2YXIgZ2FwID0gdW5pdChvcHRpb25zLmdhcCk7XG4gICAgcmV0dXJuIFwiY2FsYygoMTAwJVwiICsgKGdhcCAmJiBcIiArIFwiICsgZ2FwKSArIFwiKS9cIiArIChvcHRpb25zLnBlclBhZ2UgfHwgMSkgKyAoZ2FwICYmIFwiIC0gXCIgKyBnYXApICsgXCIpXCI7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NBc3BlY3RSYXRpbyA9IGZ1bmN0aW9uIGNzc0FzcGVjdFJhdGlvKG9wdGlvbnMpIHtcbiAgICB2YXIgaGVpZ2h0UmF0aW8gPSBvcHRpb25zLmhlaWdodFJhdGlvO1xuICAgIHJldHVybiBoZWlnaHRSYXRpbyA/IFwiXCIgKyAxIC8gaGVpZ2h0UmF0aW8gOiBcIlwiO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRDc3NWYWx1ZSA9IGZ1bmN0aW9uIGJ1aWxkQ3NzVmFsdWUodmFsdWUsIHVuaXQyKSB7XG4gICAgcmV0dXJuIFwiXCIgKyB2YWx1ZSArIHVuaXQyO1xuICB9O1xuXG4gIF9wcm90bzMucGFyc2VDc3NWYWx1ZSA9IGZ1bmN0aW9uIHBhcnNlQ3NzVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YXIgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICAgIHZhciB1bml0MiA9IHZhbHVlLnJlcGxhY2UoL1xcZCooXFwuXFxkKik/LywgXCJcIikgfHwgXCJweFwiO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgICAgdW5pdDogdW5pdDJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHVuaXQ6IFwicHhcIlxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvMy5wYXJzZUJyZWFrcG9pbnRzID0gZnVuY3Rpb24gcGFyc2VCcmVha3BvaW50cygpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHZhciBicmVha3BvaW50cyA9IHRoaXMub3B0aW9ucy5icmVha3BvaW50cztcbiAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goW1wiZGVmYXVsdFwiLCB0aGlzLm9wdGlvbnNdKTtcblxuICAgIGlmIChicmVha3BvaW50cykge1xuICAgICAgZm9yT3duKGJyZWFrcG9pbnRzLCBmdW5jdGlvbiAob3B0aW9ucywgd2lkdGgpIHtcbiAgICAgICAgX3RoaXM5LmJyZWFrcG9pbnRzLnB1c2goW3dpZHRoLCBtZXJnZShtZXJnZSh7fSwgX3RoaXM5Lm9wdGlvbnMpLCBvcHRpb25zKV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzMuaXNGaXhlZFdpZHRoID0gZnVuY3Rpb24gaXNGaXhlZFdpZHRoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gISFvcHRpb25zW3RoaXMuRGlyZWN0aW9uLnJlc29sdmUoXCJmaXhlZFdpZHRoXCIpXTtcbiAgfTtcblxuICBfcHJvdG8zLmlzTG9vcCA9IGZ1bmN0aW9uIGlzTG9vcCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnR5cGUgPT09IExPT1A7XG4gIH07XG5cbiAgX3Byb3RvMy5pc0NlbnRlciA9IGZ1bmN0aW9uIGlzQ2VudGVyKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5mb2N1cyA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgaWYgKHRoaXMuaXNMb29wKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gU0xJREUpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLm9wdGlvbnMudHJpbVNwYWNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8zLmlzVmVydGljYWwgPSBmdW5jdGlvbiBpc1ZlcnRpY2FsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSBUVEI7XG4gIH07XG5cbiAgX3Byb3RvMy5idWlsZENsYXNzZXMgPSBmdW5jdGlvbiBidWlsZENsYXNzZXMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgcmV0dXJuIFtDTEFTU19ST09ULCBDTEFTU19ST09UICsgXCItLVwiICsgb3B0aW9ucy50eXBlLCBDTEFTU19ST09UICsgXCItLVwiICsgb3B0aW9ucy5kaXJlY3Rpb24sIG9wdGlvbnMuZHJhZyAmJiBDTEFTU19ST09UICsgXCItLWRyYWdnYWJsZVwiLCBvcHRpb25zLmlzTmF2aWdhdGlvbiAmJiBDTEFTU19ST09UICsgXCItLW5hdlwiLCBDTEFTU19BQ1RJVkUsICF0aGlzLmNvbmZpZy5oaWRkZW4gJiYgQ0xBU1NfUkVOREVSRURdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfTtcblxuICBfcHJvdG8zLmJ1aWxkQXR0cnMgPSBmdW5jdGlvbiBidWlsZEF0dHJzKGF0dHJzKSB7XG4gICAgdmFyIGF0dHIgPSBcIlwiO1xuICAgIGZvck93bihhdHRycywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGF0dHIgKz0gdmFsdWUgPyBcIiBcIiArIGNhbWVsVG9LZWJhYihrZXkpICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiA6IFwiXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF0dHIudHJpbSgpO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRTdHlsZXMgPSBmdW5jdGlvbiBidWlsZFN0eWxlcyhzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBcIlwiO1xuICAgIGZvck93bihzdHlsZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBzdHlsZSArPSBcIiBcIiArIGNhbWVsVG9LZWJhYihrZXkpICsgXCI6XCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHlsZS50cmltKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZW5kZXJTbGlkZXMgPSBmdW5jdGlvbiByZW5kZXJTbGlkZXMoKSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIHRhZyA9IHRoaXMuY29uZmlnLnNsaWRlVGFnO1xuICAgIHJldHVybiB0aGlzLnNsaWRlcy5tYXAoZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBcIjxcIiArIHRhZyArIFwiIFwiICsgX3RoaXMxMC5idWlsZEF0dHJzKGNvbnRlbnQuYXR0cnMpICsgXCI+XCIgKyAoY29udGVudC5odG1sIHx8IFwiXCIpICsgXCI8L1wiICsgdGFnICsgXCI+XCI7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICBfcHJvdG8zLmNvdmVyID0gZnVuY3Rpb24gY292ZXIoY29udGVudCkge1xuICAgIHZhciBzdHlsZXMgPSBjb250ZW50LnN0eWxlcyxcbiAgICAgICAgX2NvbnRlbnQkaHRtbCA9IGNvbnRlbnQuaHRtbCxcbiAgICAgICAgaHRtbCA9IF9jb250ZW50JGh0bWwgPT09IHZvaWQgMCA/IFwiXCIgOiBfY29udGVudCRodG1sO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb3ZlciAmJiAhdGhpcy5vcHRpb25zLmxhenlMb2FkKSB7XG4gICAgICB2YXIgc3JjID0gaHRtbC5tYXRjaCgvPGltZy4qP3NyY1xccyo9XFxzKihbJ1wiXSkoLis/KVxcMS4qPz4vKTtcblxuICAgICAgaWYgKHNyYyAmJiBzcmNbMl0pIHtcbiAgICAgICAgc3R5bGVzLmJhY2tncm91bmQgPSBcImNlbnRlci9jb3ZlciBuby1yZXBlYXQgdXJsKCdcIiArIHNyY1syXSArIFwiJylcIjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMy5nZW5lcmF0ZUNsb25lcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQ2xvbmVzKGNvbnRlbnRzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSB0aGlzLm9wdGlvbnMuY2xhc3NlcztcbiAgICB2YXIgY291bnQgPSB0aGlzLmdldENsb25lQ291bnQoKTtcbiAgICB2YXIgc2xpZGVzID0gY29udGVudHMuc2xpY2UoKTtcblxuICAgIHdoaWxlIChzbGlkZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgIHB1c2goc2xpZGVzLCBzbGlkZXMpO1xuICAgIH1cblxuICAgIHB1c2goc2xpZGVzLnNsaWNlKC1jb3VudCkucmV2ZXJzZSgpLCBzbGlkZXMuc2xpY2UoMCwgY291bnQpKS5mb3JFYWNoKGZ1bmN0aW9uIChjb250ZW50LCBpbmRleCkge1xuICAgICAgdmFyIGF0dHJzID0gYXNzaWduKHt9LCBjb250ZW50LmF0dHJzLCB7XG4gICAgICAgIGNsYXNzOiBjb250ZW50LmF0dHJzLmNsYXNzICsgXCIgXCIgKyBjbGFzc2VzLmNsb25lXG4gICAgICB9KTtcbiAgICAgIHZhciBjbG9uZSA9IGFzc2lnbih7fSwgY29udGVudCwge1xuICAgICAgICBhdHRyczogYXR0cnNcbiAgICAgIH0pO1xuICAgICAgaW5kZXggPCBjb3VudCA/IGNvbnRlbnRzLnVuc2hpZnQoY2xvbmUpIDogY29udGVudHMucHVzaChjbG9uZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRDbG9uZUNvdW50ID0gZnVuY3Rpb24gZ2V0Q2xvbmVDb3VudCgpIHtcbiAgICBpZiAodGhpcy5pc0xvb3AoKSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChvcHRpb25zLmNsb25lcykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jbG9uZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJQYWdlID0gbWF4LmFwcGx5KHZvaWQgMCwgdGhpcy5icmVha3BvaW50cy5tYXAoZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICAgIHZhciBvcHRpb25zMiA9IF9yZWY2WzFdO1xuICAgICAgICByZXR1cm4gb3B0aW9uczIucGVyUGFnZTtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBwZXJQYWdlICogKChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkgKyAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBfcHJvdG8zLnJlbmRlckFycm93cyA9IGZ1bmN0aW9uIHJlbmRlckFycm93cygpIHtcbiAgICB2YXIgaHRtbCA9IFwiXCI7XG4gICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9XFxcIlwiICsgdGhpcy5vcHRpb25zLmNsYXNzZXMuYXJyb3dzICsgXCJcXFwiPlwiO1xuICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJBcnJvdyh0cnVlKTtcbiAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3coZmFsc2UpO1xuICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICByZXR1cm4gaHRtbDtcbiAgfTtcblxuICBfcHJvdG8zLnJlbmRlckFycm93ID0gZnVuY3Rpb24gcmVuZGVyQXJyb3cocHJldikge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBjbGFzc2VzID0gX3RoaXMkb3B0aW9ucy5jbGFzc2VzLFxuICAgICAgICBpMThuID0gX3RoaXMkb3B0aW9ucy5pMThuO1xuICAgIHZhciBhdHRycyA9IHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLmFycm93ICsgXCIgXCIgKyAocHJldiA/IGNsYXNzZXMucHJldiA6IGNsYXNzZXMubmV4dCksXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgYXJpYUxhYmVsOiBwcmV2ID8gaTE4bi5wcmV2IDogaTE4bi5uZXh0XG4gICAgfTtcbiAgICByZXR1cm4gXCI8YnV0dG9uIFwiICsgdGhpcy5idWlsZEF0dHJzKGF0dHJzKSArIFwiPjxzdmcgeG1sbnM9XFxcIlwiICsgWE1MX05BTUVfU1BBQ0UgKyBcIlxcXCIgdmlld0JveD1cXFwiMCAwIFwiICsgU0laRSArIFwiIFwiICsgU0laRSArIFwiXFxcIiB3aWR0aD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiPjxwYXRoIGQ9XFxcIlwiICsgKHRoaXMub3B0aW9ucy5hcnJvd1BhdGggfHwgUEFUSCkgKyBcIlxcXCIgLz48L3N2Zz48L2J1dHRvbj5cIjtcbiAgfTtcblxuICBfcHJvdG8zLmh0bWwgPSBmdW5jdGlvbiBodG1sKCkge1xuICAgIHZhciBfdGhpcyRjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgcm9vdENsYXNzID0gX3RoaXMkY29uZmlnLnJvb3RDbGFzcyxcbiAgICAgICAgbGlzdFRhZyA9IF90aGlzJGNvbmZpZy5saXN0VGFnLFxuICAgICAgICBhcnJvd3MgPSBfdGhpcyRjb25maWcuYXJyb3dzLFxuICAgICAgICBiZWZvcmVUcmFjayA9IF90aGlzJGNvbmZpZy5iZWZvcmVUcmFjayxcbiAgICAgICAgYWZ0ZXJUcmFjayA9IF90aGlzJGNvbmZpZy5hZnRlclRyYWNrLFxuICAgICAgICBzbGlkZXIgPSBfdGhpcyRjb25maWcuc2xpZGVyLFxuICAgICAgICBiZWZvcmVTbGlkZXIgPSBfdGhpcyRjb25maWcuYmVmb3JlU2xpZGVyLFxuICAgICAgICBhZnRlclNsaWRlciA9IF90aGlzJGNvbmZpZy5hZnRlclNsaWRlcjtcbiAgICB2YXIgaHRtbCA9IFwiXCI7XG4gICAgaHRtbCArPSBcIjxkaXYgaWQ9XFxcIlwiICsgdGhpcy5pZCArIFwiXFxcIiBjbGFzcz1cXFwiXCIgKyB0aGlzLmJ1aWxkQ2xhc3NlcygpICsgXCIgXCIgKyAocm9vdENsYXNzIHx8IFwiXCIpICsgXCJcXFwiPlwiO1xuICAgIGh0bWwgKz0gXCI8c3R5bGU+XCIgKyB0aGlzLlN0eWxlLmJ1aWxkKCkgKyBcIjwvc3R5bGU+XCI7XG5cbiAgICBpZiAoc2xpZGVyKSB7XG4gICAgICBodG1sICs9IGJlZm9yZVNsaWRlciB8fCBcIlwiO1xuICAgICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9XFxcInNwbGlkZV9fc2xpZGVyXFxcIj5cIjtcbiAgICB9XG5cbiAgICBodG1sICs9IGJlZm9yZVRyYWNrIHx8IFwiXCI7XG5cbiAgICBpZiAoYXJyb3dzKSB7XG4gICAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3dzKCk7XG4gICAgfVxuXG4gICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9XFxcInNwbGlkZV9fdHJhY2tcXFwiPlwiO1xuICAgIGh0bWwgKz0gXCI8XCIgKyBsaXN0VGFnICsgXCIgY2xhc3M9XFxcInNwbGlkZV9fbGlzdFxcXCI+XCI7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlclNsaWRlcygpO1xuICAgIGh0bWwgKz0gXCI8L1wiICsgbGlzdFRhZyArIFwiPlwiO1xuICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICBodG1sICs9IGFmdGVyVHJhY2sgfHwgXCJcIjtcblxuICAgIGlmIChzbGlkZXIpIHtcbiAgICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICAgIGh0bWwgKz0gYWZ0ZXJTbGlkZXIgfHwgXCJcIjtcbiAgICB9XG5cbiAgICBodG1sICs9IFwiPC9kaXY+XCI7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH07XG5cbiAgcmV0dXJuIFNwbGlkZVJlbmRlcmVyO1xufSgpO1xuXG5leHBvcnQgeyBDTEFTU0VTLCBDTEFTU19BQ1RJVkUsIENMQVNTX0FSUk9XLCBDTEFTU19BUlJPV1MsIENMQVNTX0FSUk9XX05FWFQsIENMQVNTX0FSUk9XX1BSRVYsIENMQVNTX0NMT05FLCBDTEFTU19DT05UQUlORVIsIENMQVNTX0ZPQ1VTX0lOLCBDTEFTU19JTklUSUFMSVpFRCwgQ0xBU1NfTElTVCwgQ0xBU1NfTE9BRElORywgQ0xBU1NfTkVYVCwgQ0xBU1NfT1ZFUkZMT1csIENMQVNTX1BBR0lOQVRJT04sIENMQVNTX1BBR0lOQVRJT05fUEFHRSwgQ0xBU1NfUFJFViwgQ0xBU1NfUFJPR1JFU1MsIENMQVNTX1BST0dSRVNTX0JBUiwgQ0xBU1NfUk9PVCwgQ0xBU1NfU0xJREUsIENMQVNTX1NQSU5ORVIsIENMQVNTX1NSLCBDTEFTU19UT0dHTEUsIENMQVNTX1RPR0dMRV9QQVVTRSwgQ0xBU1NfVE9HR0xFX1BMQVksIENMQVNTX1RSQUNLLCBDTEFTU19WSVNJQkxFLCBERUZBVUxUUywgRVZFTlRfQUNUSVZFLCBFVkVOVF9BUlJPV1NfTU9VTlRFRCwgRVZFTlRfQVJST1dTX1VQREFURUQsIEVWRU5UX0FVVE9QTEFZX1BBVVNFLCBFVkVOVF9BVVRPUExBWV9QTEFZLCBFVkVOVF9BVVRPUExBWV9QTEFZSU5HLCBFVkVOVF9DTElDSywgRVZFTlRfREVTVFJPWSwgRVZFTlRfRFJBRywgRVZFTlRfRFJBR0dFRCwgRVZFTlRfRFJBR0dJTkcsIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VELCBFVkVOVF9ISURERU4sIEVWRU5UX0lOQUNUSVZFLCBFVkVOVF9MQVpZTE9BRF9MT0FERUQsIEVWRU5UX01PVU5URUQsIEVWRU5UX01PVkUsIEVWRU5UX01PVkVELCBFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIEVWRU5UX09WRVJGTE9XLCBFVkVOVF9QQUdJTkFUSU9OX01PVU5URUQsIEVWRU5UX1BBR0lOQVRJT05fVVBEQVRFRCwgRVZFTlRfUkVBRFksIEVWRU5UX1JFRlJFU0gsIEVWRU5UX1JFU0laRSwgRVZFTlRfUkVTSVpFRCwgRVZFTlRfU0NST0xMLCBFVkVOVF9TQ1JPTExFRCwgRVZFTlRfU0hJRlRFRCwgRVZFTlRfU0xJREVfS0VZRE9XTiwgRVZFTlRfVVBEQVRFRCwgRVZFTlRfVklTSUJMRSwgRXZlbnRCaW5kZXIsIEV2ZW50SW50ZXJmYWNlLCBGQURFLCBMT09QLCBMVFIsIFJUTCwgUmVxdWVzdEludGVydmFsLCBTTElERSwgU1RBVFVTX0NMQVNTRVMsIFNwbGlkZSwgU3BsaWRlUmVuZGVyZXIsIFN0YXRlLCBUVEIsIFRocm90dGxlLCBTcGxpZGUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IFNwbGlkZSBmcm9tIFwiQHNwbGlkZWpzL3NwbGlkZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNsaWRlckluaXQgPSAobm9kZSkgPT4ge1xyXG4gIGlmIChub2RlICE9PSBudWxsKSB7XHJcbiAgICBuZXcgU3BsaWRlKG5vZGUsICB7XHJcbiAgICAgIHR5cGU6ICdzbGlkZScsXHJcbiAgICAgIHJld2luZDogdHJ1ZSxcclxuICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgIHBlclBhZ2U6IDUsXHJcbiAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgIHBhZ2luYXRpb246IGZhbHNlLFxyXG4gICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXHJcbiAgICAgIHVwZGF0ZU9uTW92ZTogdHJ1ZSxcclxuICAgICAgZHJhZzogdHJ1ZSxcclxuICAgICAgc3dpcGU6IHRydWUsXHJcbiAgICAgIGdhcDogNzIsXHJcbiAgICAgIGZvY3VzOiBcImNlbnRlclwiLFxyXG4gICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgIDExMjA6IHtcclxuICAgICAgICAgIHBlclBhZ2U6IDUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICA5OTI6IHtcclxuICAgICAgICAgIHBlclBhZ2U6IDMsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0pLm1vdW50KCk7XHJcbiAgfVxyXG59O1xyXG5cclxuIiwiaW1wb3J0IHsgc2xpZGVySW5pdCB9IGZyb20gJy4vc3BsaWRlJztcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIGNvbnN0IHNwbGlkZUxpc3QyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NwbGlkZS1saXN0LXBheW1lbnRzJyk7XHJcbiAgY29uc3Qgc3BsaWRlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcGxpZGUtbGlzdC1wYXJ0bmVycycpO1xyXG5cclxuICBpZiAoc3BsaWRlTGlzdDIpIHtcclxuICAgIHNsaWRlckluaXQoc3BsaWRlTGlzdDIpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHNwbGlkZUxpc3QpIHtcclxuICAgIHNsaWRlckluaXQoc3BsaWRlTGlzdCk7XHJcbiAgfVxyXG5cclxufSk7XHJcbiIsImNvbnN0IGxpc3RlbmVyT3V0c2lkZUNsaWNrID0gKHJlZiwgY2FsbGJhY2spID0+IHtcclxuICBjb25zdCBoYW5kbGVyID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcblxyXG4gICAgaWYgKCFyZWYgfHwgcmVmLmNvbnRhaW5zKHRhcmdldCkpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsYmFjaz8uKGV2ZW50LCByZWYpO1xyXG4gIH07XHJcblxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignb250b3VjaHN0YXJ0JywgaGFuZGxlcik7XHJcblxyXG4gIHJldHVybiAoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZXIpO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpc3RlbmVycygpIHtcclxuICB0aGlzLmJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlck9wZW4pO1xyXG4gIGxpc3RlbmVyT3V0c2lkZUNsaWNrKHRoaXMuaGVhZGVyTWVudSwgdGhpcy5oYW5kbGVyQmFja2Ryb3BDbGljayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZVZlcnRpY2FsU2Nyb2xsKCkge1xyXG5cclxuICBpZiAodGhpcy5oZWFkZXJNZW51LmNsYXNzTGlzdC5jb250YWlucygndmlzaWJsZScpKSB7XHJcbiAgICB0aGlzLmJvZHkuc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbidcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgdGhpcy5ib2R5LnN0eWxlLm92ZXJmbG93WSA9ICd2aXNpYmxlJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVyT3BlbigpIHtcclxuICB0aGlzLmhlYWRlck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScpXHJcbiAgdGhpcy5idXJnZXIuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJylcclxuICB0aGlzLnRvZ2dsZVZlcnRpY2FsU2Nyb2xsKClcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlckNsb3NlKCkge1xyXG4gIHRoaXMuaGVhZGVyTWVudS5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgdGhpcy5idXJnZXIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgdGhpcy50b2dnbGVWZXJ0aWNhbFNjcm9sbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVyQmFja2Ryb3BDbGljayhlKSB7XHJcbiAgaWYgKHRoaXMuaGVhZGVyTWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKSAmJiAoIWUudGFyZ2V0LmNsb3Nlc3QoJy5oZWFkZXJfX21vYmlsZScpICYmICFlLnRhcmdldC5jbG9zZXN0KCcuaGVhZGVyX19tZW51JylcclxuICAmJiAhZS50YXJnZXQuY2xvc2VzdCgnLmhlYWRlci1tZW51X190b3AnKSAmJiAhZS50YXJnZXQuY2xvc2VzdCgnLmhlYWRlci1sYW5nX193cmFwcGVyJykpKSB7XHJcbiAgICB0aGlzLmhhbmRsZXJDbG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcihub2RlKSB7XHJcbiAgdGhpcy5ub2RlID0gbm9kZTtcclxuICB0aGlzLmJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JylcclxuICB0aGlzLmJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX21lbnUnKVxyXG4gIHRoaXMuaGVhZGVyTWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uUGFuZWwnKVxyXG4gIHRoaXMubWVudUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyLW1lbnVfX0xpc3QnKVxyXG4gIHRoaXMubGFuZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5oZWFkZXJfX2xhbmcnKVxyXG5cclxuICB0aGlzLmhhbmRsZXJPcGVuID0gaGFuZGxlck9wZW4uYmluZCh0aGlzKTtcclxuICB0aGlzLmhhbmRsZXJDbG9zZSA9IGhhbmRsZXJDbG9zZS5iaW5kKHRoaXMpO1xyXG4gIHRoaXMubGlzdGVuZXJzID0gbGlzdGVuZXJzLmJpbmQodGhpcyk7XHJcbiAgdGhpcy5oYW5kbGVyQmFja2Ryb3BDbGljayA9IGhhbmRsZXJCYWNrZHJvcENsaWNrLmJpbmQodGhpcyk7XHJcbiAgdGhpcy50b2dnbGVWZXJ0aWNhbFNjcm9sbCA9IHRvZ2dsZVZlcnRpY2FsU2Nyb2xsLmJpbmQodGhpcyk7XHJcbiAgdGhpcy5saXN0ZW5lcnMoKTtcclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7SGVhZGVyfSBmcm9tIFwiLi9oZWFkZXJcIjtcclxuXHJcbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJylcclxuXHJcbmlmIChyb290KSB7XHJcbiAgbmV3IEhlYWRlcihyb290KTtcclxufVxyXG5cclxuIiwiY29uc3QgbGlzdGVuZXJPdXRzaWRlQ2xpY2sgPSAocmVmLCBjYWxsYmFjaykgPT4ge1xyXG4gIGNvbnN0IGhhbmRsZXIgPSAoZXZlbnQpID0+IHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgICBpZiAocmVmIGluc3RhbmNlb2YgTm9kZUxpc3QgJiYgQXJyYXkuZnJvbShyZWYpLnNvbWUoZWwgPT4gZWwuY29udGFpbnModGFyZ2V0KSkpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVmIGluc3RhbmNlb2YgRWxlbWVudCAmJiByZWYuY29udGFpbnModGFyZ2V0KSkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxiYWNrPy4oZXZlbnQsIHJlZik7XHJcbiAgfTtcclxuXHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKTtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvbnRvdWNoc3RhcnQnLCBoYW5kbGVyKTtcclxuXHJcbiAgcmV0dXJuICgpID0+IHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlcik7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdGVuZXJzKCkge1xyXG4gIHRoaXMuYnV0dG9uc01vZGFsLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlck9wZW4pO1xyXG4gIH0pO1xyXG4gIHRoaXMuY2xvc2UuZm9yRWFjaChidXR0b24gPT4ge1xyXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVyQ2xvc2UpO1xyXG4gIH0pO1xyXG4gIHRoaXMuZm9ybS5mb3JFYWNoKGZvcm1FbGVtZW50ID0+IHtcclxuICAgIGZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuaGFuZGxlckNsb3NlKTtcclxuICB9KTtcclxuICBsaXN0ZW5lck91dHNpZGVDbGljayh0aGlzLmZvcm0sIHRoaXMuaGFuZGxlckJhY2tkcm9wQ2xpY2spO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVWZXJ0aWNhbFNjcm9sbCgpIHtcclxuXHJcbiAgaWYgKHRoaXMubm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsd19pcy1vcGVuJykpIHtcclxuICAgIHRoaXMuYm9keS5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJ1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG5cclxuICB0aGlzLmJvZHkuc3R5bGUub3ZlcmZsb3dZID0gJ3Zpc2libGUnXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZXJPcGVuKGV2ZW50KSB7XHJcbiAgY29uc3QgaXNCdXR0b24gPSBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdidXR0b25Nb2RhbHcnKTtcclxuICBjb25zdCBpc0hSQnV0dG9uID0gZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYnV0dG9uX19ocicpO1xyXG5cclxuICBpZiAoIWlzQnV0dG9uKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoaXNIUkJ1dHRvbikge1xyXG4gICAgdGhpcy5mb3JtR2VuZXJhbC5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICB9XHJcblxyXG4gIGVsc2Uge1xyXG4gICAgdGhpcy5mb3JtSHI/LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5ub2RlLmNsYXNzTGlzdC5hZGQoJ21vZGFsd19pcy1vcGVuJyk7XHJcbiAgdGhpcy50b2dnbGVWZXJ0aWNhbFNjcm9sbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVyQ2xvc2UoKSB7XHJcbiAgdGhpcy5ub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsd19pcy1vcGVuJyk7XHJcbiAgdGhpcy5mb3JtSHI/LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gIHRoaXMuZm9ybUdlbmVyYWwuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgdGhpcy50b2dnbGVWZXJ0aWNhbFNjcm9sbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVyQmFja2Ryb3BDbGljayhldmVudCkge1xyXG4gIGlmICh0aGlzLm5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbHdfaXMtb3BlbicpICYmICghZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYnV0dG9uTW9kYWx3JykpKSB7XHJcbiAgICB0aGlzLmhhbmRsZXJDbG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE1vZGFsKG5vZGUpIHtcclxuICB0aGlzLm5vZGUgPSBub2RlO1xyXG4gIHRoaXMuYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKVxyXG4gIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbHdGb3JtJyk7XHJcbiAgdGhpcy5mb3JtSHIgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtSHInKTtcclxuICB0aGlzLmZvcm1HZW5lcmFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1HZW5lcmFsJyk7XHJcbiAgdGhpcy5idXR0b25zTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnV0dG9uTW9kYWx3Jyk7XHJcbiAgdGhpcy5jbG9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbHdfX2Nsb3NlJyk7XHJcbiAgdGhpcy5oYW5kbGVyT3BlbiA9IGhhbmRsZXJPcGVuLmJpbmQodGhpcyk7XHJcbiAgdGhpcy5oYW5kbGVyQ2xvc2UgPSBoYW5kbGVyQ2xvc2UuYmluZCh0aGlzKTtcclxuICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycy5iaW5kKHRoaXMpO1xyXG4gIHRoaXMuaGFuZGxlckJhY2tkcm9wQ2xpY2sgPSBoYW5kbGVyQmFja2Ryb3BDbGljay5iaW5kKHRoaXMpO1xyXG4gIHRoaXMudG9nZ2xlVmVydGljYWxTY3JvbGwgPSB0b2dnbGVWZXJ0aWNhbFNjcm9sbC5iaW5kKHRoaXMpO1xyXG4gIHRoaXMubGlzdGVuZXJzKCk7XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBNb2RhbCB9IGZyb20gJy4vbW9kYWwnO1xyXG5cclxuY29uc3Qgcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbHcnKTtcclxuXHJcbmlmIChyb290KSB7XHJcbiAgbmV3IE1vZGFsKHJvb3QpO1xyXG59XHJcblxyXG5cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUZvcm0oZm9ybVNlbGVjdG9yKSB7XHJcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihmb3JtU2VsZWN0b3IpO1xyXG4gICAgY29uc3QgdGVsZWdyYW1JbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIi50ZWxlZ3JhbVwiKTtcclxuICAgIGNvbnN0IHNreXBlSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIuc2t5cGVcIik7XHJcbiAgICBjb25zdCBpbmZvVGV4dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19pbmZvX29uZVwiKTtcclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xyXG4gICAgICAgICAgICAhZS50YXJnZXQudmFsaWRpdHkudmFsaWQgPyBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdpbnZhbGlkJykgOiBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdpbnZhbGlkJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGVsZWdyYW1JbnB1dC52YWx1ZS50cmltKCkgIT09IFwiXCIgfHwgc2t5cGVJbnB1dC52YWx1ZS50cmltKCkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGluZm9UZXh0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRlbGVncmFtSW5wdXQudmFsdWUudHJpbSgpID09PSBcIlwiICYmIHNreXBlSW5wdXQudmFsdWUudHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGluZm9UZXh0LnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QganNvbkRhdGEgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGZvcm1EYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGpzb25EYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjb25zdCBhcGlVcmwgPSAnaHR0cHM6Ly90cmsuZGFya3NpZGUtcGFydG5lcnMucHJvL2FwaS92Mi9uZXR3b3JrL2FmZmlsaWF0ZXM/YXBpLWtleT04OGRjNDA2MTRhZjhlN2VjZDI5ZjNiOWE4YmYyOWUwNGFiNDcwM2YwJztcclxuICAgICAgICAgICAgY29uc3QgYXBpVXJsID0gJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cyc7Ly9mYWtlIGFwaSBmb3IgdGVzdFxyXG4gICAgICAgICAgICBmZXRjaChhcGlVcmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoanNvbkRhdGEpLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3M6JywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NNZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1Y2Nlc3NNZXNzYWdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc01lc3NhZ2UuY2xhc3NMaXN0LnJlbW92ZSgnc3VjY2Vzc01lc3NhZ2VfaGlkZGVuJyk7ICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ3N1Y2Nlc3NNZXNzYWdlX2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmhhbmRsZUZvcm0oXCIuZm9ybUdlbmVyYWxcIik7XHJcbiIsImltcG9ydCAnLi9zdHlsZXMvaW5kZXguc2Nzcyc7XHJcblxyXG5pbXBvcnQgJy4vanMvc3BsaWRlLWlubmVyJztcclxuaW1wb3J0ICcuL2pzL2hlYWRlcic7XHJcbmltcG9ydCAnLi9qcy9tb2RhbCc7XHJcbmltcG9ydCAnLi9qcy9sb2FkZXInO1xyXG5pbXBvcnQgJy4vanMvZm9ybSc7XHJcbmltcG9ydCAnLi9qcy92aWRlbyc7XHJcblxyXG5pbXBvcnQge2hhbmRsZUZvcm19IGZyb20gJy4vanMvZm9ybS92YWxpZGF0aW9uJ1xyXG5cclxuaGFuZGxlRm9ybShcIi5hZmZpbGlhdGVGb3JtXCIpOyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZmZGb3JtIiwicXVlcnlTZWxlY3RvciIsImFkdmVydGlzZXJzRm9ybSIsInJhZGlvQnV0dG9ucyIsImdldEVsZW1lbnRzQnlOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGVja2VkIiwic3R5bGUiLCJkaXNwbGF5IiwiZm9yRWFjaCIsImJ1dHRvbiIsImZvcm0iLCJxdWVyeVNlbGVjdG9yQWxsIiwibG9jYXRpb25JbnB1dCIsImVtYWlsSW5wdXQiLCJyYWRpb0J1dHRvbiIsInZhbHVlIiwicmVxdWlyZWQiLCJ3aW5kb3ciLCJjbGFzc0xpc3QiLCJhZGQiLCJ2aWRlbyIsInBhdXNlZCIsInBsYXkiLCJwYXVzZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJNRURJQV9QUkVGRVJTX1JFRFVDRURfTU9USU9OIiwiU1RBVEVTIiwiQ1JFQVRFRCIsIk1PVU5URUQiLCJJRExFIiwiTU9WSU5HIiwiU0NST0xMSU5HIiwiRFJBR0dJTkciLCJERVNUUk9ZRUQiLCJlbXB0eSIsImFycmF5Iiwic2xpY2UiLCJhcnJheUxpa2UiLCJzdGFydCIsImVuZCIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsImFwcGx5IiwiZnVuYyIsImJpbmQiLCJjb25jYXQiLCJhcmd1bWVudHMiLCJuZXh0VGljayIsInNldFRpbWVvdXQiLCJub29wIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidHlwZU9mIiwidHlwZSIsInN1YmplY3QiLCJpc09iamVjdCIsImlzTnVsbCIsImlzQXJyYXkiLCJpc0Z1bmN0aW9uIiwiaXNTdHJpbmciLCJpc1VuZGVmaW5lZCIsImlzSFRNTEVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJIVE1MRWxlbWVudCIsImUiLCJ0b0FycmF5IiwidmFsdWVzIiwiaXRlcmF0ZWUiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJwdXNoIiwiaXRlbXMiLCJ0b2dnbGVDbGFzcyIsImVsbSIsImNsYXNzZXMiLCJuYW1lIiwiYWRkQ2xhc3MiLCJzcGxpdCIsImFwcGVuZCIsInBhcmVudCIsImNoaWxkcmVuIiwiYXBwZW5kQ2hpbGQiLCJiZWZvcmUiLCJub2RlcyIsInJlZiIsIm5vZGUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwibWF0Y2hlcyIsInNlbGVjdG9yIiwiY2hpbGRyZW4yIiwiZmlsdGVyIiwiY2hpbGQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIm93bktleXMiLCJrZXlzIiwiZm9yT3duIiwib2JqZWN0IiwicmlnaHQiLCJyZXZlcnNlIiwic291cmNlIiwibWVyZ2UiLCJvbWl0IiwicmVtb3ZlQXR0cmlidXRlIiwiZWxtcyIsImF0dHJzIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsInZhbHVlMiIsIlN0cmluZyIsImNyZWF0ZSIsInRhZyIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkyIiwiZm9jdXMiLCJwcmV2ZW50U2Nyb2xsIiwiZ2V0QXR0cmlidXRlIiwiaGFzQ2xhc3MiLCJjbGFzc05hbWUiLCJjb250YWlucyIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInBhcnNlSHRtbCIsImh0bWwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJib2R5IiwicHJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicXVlcnkiLCJxdWVyeUFsbCIsInJlbW92ZUNsYXNzIiwidGltZU9mIiwidGltZVN0YW1wIiwidW5pdCIsIlBST0pFQ1RfQ09ERSIsIkRBVEFfQVRUUklCVVRFIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwibWluIiwiTWF0aCIsIm1heCIsImZsb29yIiwiY2VpbCIsImFicyIsImFwcHJveGltYXRlbHlFcXVhbCIsIngiLCJ5IiwiZXBzaWxvbiIsImJldHdlZW4iLCJudW1iZXIiLCJleGNsdXNpdmUiLCJtaW5pbXVtIiwibWF4aW11bSIsImNsYW1wIiwic2lnbiIsImZvcm1hdCIsInN0cmluZyIsInJlcGxhY2VtZW50cyIsInJlcGxhY2VtZW50IiwicmVwbGFjZSIsInBhZCIsImlkcyIsIkV2ZW50QmluZGVyIiwibGlzdGVuZXJzIiwiZm9yRWFjaEV2ZW50IiwidGFyZ2V0cyIsImV2ZW50cyIsImV2ZW50czIiLCJldmVudE5TIiwiZnJhZ21lbnQiLCJjYWxsYmFjayIsIm9wdGlvbnMiLCJldmVudCIsIm5hbWVzcGFjZSIsImlzRXZlbnRUYXJnZXQiLCJyZW1vdmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVuYmluZCIsImxpc3RlbmVyIiwiZGlzcGF0Y2giLCJkZXRhaWwiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJkZXN0cm95IiwiZGF0YSIsIkVWRU5UX01PVU5URUQiLCJFVkVOVF9SRUFEWSIsIkVWRU5UX01PVkUiLCJFVkVOVF9NT1ZFRCIsIkVWRU5UX0NMSUNLIiwiRVZFTlRfUkVGUkVTSCIsIkVWRU5UX1VQREFURUQiLCJFVkVOVF9SRVNJWkUiLCJFVkVOVF9SRVNJWkVEIiwiRVZFTlRfU0NST0xMIiwiRVZFTlRfU0NST0xMRUQiLCJFVkVOVF9ERVNUUk9ZIiwiRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVEIiwiRVZFTlRfQVVUT1BMQVlfUExBWSIsIkVWRU5UX0FVVE9QTEFZX1BBVVNFIiwiRVZFTlRfTEFaWUxPQURfTE9BREVEIiwiRVZFTlRfRU5EX0lOREVYX0NIQU5HRUQiLCJFdmVudEludGVyZmFjZSIsIlNwbGlkZTIiLCJidXMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYmluZGVyIiwib24iLCJqb2luIiwib2ZmIiwiZW1pdCIsIlJlcXVlc3RJbnRlcnZhbCIsImludGVydmFsIiwib25JbnRlcnZhbCIsIm9uVXBkYXRlIiwibGltaXQiLCJzdGFydFRpbWUiLCJpZCIsIm5vdyIsIkRhdGUiLCJyYXRlIiwiY291bnQiLCJ1cGRhdGUiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlc3VtZSIsInJld2luZCIsInNldCIsInRpbWUiLCJpc1BhdXNlZCIsIkFSUk9XIiwiQVJST1dfTEVGVCIsIkFSUk9XX1JJR0hUIiwiQVJST1dfVVAiLCJBUlJPV19ET1dOIiwiVFRCIiwiT1JJRU5UQVRJT05fTUFQIiwid2lkdGgiLCJsZWZ0IiwiWCIsIlkiLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiUk9MRSIsIlRBQl9JTkRFWCIsIkFSSUFfUFJFRklYIiwiQVJJQV9DT05UUk9MUyIsIkFSSUFfQ1VSUkVOVCIsIkFSSUFfU0VMRUNURUQiLCJBUklBX0xBQkVMIiwiQVJJQV9MQUJFTExFREJZIiwiQVJJQV9ISURERU4iLCJBUklBX09SSUVOVEFUSU9OIiwiQVJJQV9ST0xFREVTQ1JJUFRJT04iLCJBUklBX0xJVkUiLCJBUklBX0JVU1kiLCJBUklBX0FUT01JQyIsIkFMTF9BVFRSSUJVVEVTIiwiQ0xBU1NfUFJFRklYIiwiU1RBVFVTX0NMQVNTX1BSRUZJWCIsIkNMQVNTX1JPT1QiLCJDTEFTU19UUkFDSyIsIkNMQVNTX0xJU1QiLCJDTEFTU19TTElERSIsIkNMQVNTX0NMT05FIiwiQ0xBU1NfQ09OVEFJTkVSIiwiQ0xBU1NfQVJST1dTIiwiQ0xBU1NfQVJST1ciLCJDTEFTU19BUlJPV19QUkVWIiwiQ0xBU1NfQVJST1dfTkVYVCIsIkNMQVNTX1BBR0lOQVRJT04iLCJDTEFTU19QQUdJTkFUSU9OX1BBR0UiLCJDTEFTU19QUk9HUkVTU19CQVIiLCJDTEFTU19QUk9HUkVTUyIsIkNMQVNTX1RPR0dMRSIsIkNMQVNTX1NSIiwiQ0xBU1NfSU5JVElBTElaRUQiLCJDTEFTU19BQ1RJVkUiLCJDTEFTU19QUkVWIiwiQ0xBU1NfTkVYVCIsIkNMQVNTX1ZJU0lCTEUiLCJDTEFTU19MT0FESU5HIiwiQ0xBU1NfRk9DVVNfSU4iLCJDTEFTU19PVkVSRkxPVyIsIlNUQVRVU19DTEFTU0VTIiwiQ0xBU1NFUyIsInNsaWRlIiwiY2xvbmUiLCJhcnJvd3MiLCJhcnJvdyIsInByZXYiLCJuZXh0IiwicGFnaW5hdGlvbiIsInBhZ2UiLCJzcGlubmVyIiwiUE9JTlRFUl9ET1dOX0VWRU5UUyIsIlBPSU5URVJfTU9WRV9FVkVOVFMiLCJQT0lOVEVSX1VQX0VWRU5UUyIsIlNMSURFIiwiTE9PUCIsIkZBREUiLCJJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSIsIlNDUk9MTF9MSVNURU5FUl9PUFRJT05TIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJOT1JNQUxJWkFUSU9OX01BUCIsIlNwYWNlYmFyIiwiUmlnaHQiLCJMZWZ0IiwiVXAiLCJEb3duIiwibm9ybWFsaXplS2V5IiwiS0VZQk9BUkRfRVZFTlQiLCJTUkNfREFUQV9BVFRSSUJVVEUiLCJTUkNTRVRfREFUQV9BVFRSSUJVVEUiLCJJTUFHRV9TRUxFQ1RPUiIsIlRSSUdHRVJfS0VZUyIsIkNvbXBvbmVudENvbnN0cnVjdG9ycyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIk1lZGlhIiwiQ29tcG9uZW50czIiLCJzdGF0ZSIsImJyZWFrcG9pbnRzIiwicmVkdWNlZE1vdGlvbiIsInF1ZXJpZXMiLCJjb21wbGV0ZWx5IiwicmVnaXN0ZXIiLCJvcHRpb25zMiIsInF1ZXJ5TGlzdCIsIm1hdGNoTWVkaWEiLCJkZXN0cm95ZWQiLCJpcyIsImRpcmVjdGlvbiIsIm1lcmdlZCIsInJlZHVjZSIsIm1lcmdlZDIiLCJlbnRyeSIsIm1vdW50IiwicmVmcmVzaCIsIm9wdHMiLCJiYXNlIiwibm90aWZ5IiwiZ2V0UHJvdG90eXBlT2YiLCJzZXR1cCIsImlzTWluIiwibWVkaWFRdWVyeSIsInNvcnQiLCJuIiwibSIsImVuYWJsZSIsIkRpcmVjdGlvbiIsInJlc29sdmUiLCJheGlzT25seSIsImluZGV4IiwibWF0Y2giLCJvZmZzZXQiLCJ0b0xvd2VyQ2FzZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwib3JpZW50IiwiRWxlbWVudHMiLCJ0cmFjayIsImxpc3QiLCJpc1VzaW5nS2V5IiwiX0V2ZW50SW50ZXJmYWNlIiwicm9vdCIsImkxOG4iLCJlbGVtZW50cyIsInNsaWRlcyIsInJvb3RDbGFzc2VzIiwidHJhY2tDbGFzc2VzIiwicHJlZml4Iiwicm9sZSIsImZpbmQiLCJiYXIiLCJ0b2dnbGUiLCJ0YWdOYW1lIiwiY2Fyb3VzZWwiLCJnZXRDbGFzc2VzIiwibGFiZWwiLCJsYWJlbGxlZGJ5IiwiZnJvbSIsImNsb3Nlc3QiLCJub2RlVHlwZSIsInBhcmVudEVsZW1lbnQiLCJkcmFnIiwiaXNOYXZpZ2F0aW9uIiwiU2xpZGVzIiwiX0V2ZW50SW50ZXJmYWNlMiIsIl9Db21wb25lbnRzMiRFbGVtZW50cyIsIlNsaWRlczIiLCJpbml0IiwiZm9yRWFjaCQxIiwiU2xpZGUyIiwic2xpZGVJbmRleCIsIkNvbXBvbmVudHMiLCJ1cGRhdGVPbk1vdmUiLCJzbGlkZUZvY3VzIiwic3R5bGVzIiwiaXNDbG9uZSIsImNvbnRhaW5lciIsImluaXROYXZpZ2F0aW9uIiwiY29udHJvbHMiLCJzcGxpZGVzIiwibWFwIiwic3BsaWRlIiwiZ2V0QXQiLCJzbGlkZVgiLCJvbk1vdmUiLCJjdXJyIiwiYWN0aXZlIiwiaXNBY3RpdmUiLCJzZWxmIiwidmlzaWJsZSIsInRyYWNrUmVjdCIsInNsaWRlUmVjdCIsImlzVmlzaWJsZSIsImhpZGRlbiIsImZvY3VzYWJsZU5vZGVzIiwiYWN0aXZlRWxlbWVudCIsInVwZGF0ZVZpc2liaWxpdHkiLCJjbG9uZVN0YXR1cyIsInNsaWRlTGFiZWwiLCJ1c2VDb250YWluZXIiLCJpc1dpdGhpbiIsImRpc3RhbmNlIiwiZGlmZiIsIlNsaWRlJDEiLCJTbGlkZTEiLCJnZXQiLCJleGNsdWRlQ2xvbmVzIiwibWF0Y2hlciIsImdldEluIiwiQ29udHJvbGxlciIsInRvSW5kZXgiLCJoYXNGb2N1cyIsInBlclBhZ2UiLCJpbWFnZXMiLCJpbWciLCJnZXRMZW5ndGgiLCJpc0Vub3VnaCIsIkxheW91dCIsInZlcnRpY2FsIiwicm9vdFJlY3QiLCJvdmVyZmxvdyIsIl9FdmVudEludGVyZmFjZTMiLCJfQ29tcG9uZW50czIkRWxlbWVudHMyIiwic3R5bGVTbGlkZXMiLCJjc3NQYWRkaW5nIiwicmVzaXplIiwiZm9yY2UiLCJoZWlnaHQiLCJuZXdSZWN0IiwiY3NzSGVpZ2h0IiwiZ2FwIiwiYXV0b1dpZHRoIiwiZml4ZWRXaWR0aCIsImNzc1NsaWRlU2l6ZSIsImZpeGVkSGVpZ2h0IiwiYXV0b0hlaWdodCIsImlzT3ZlcmZsb3ciLCJwYWRkaW5nIiwiaGVpZ2h0UmF0aW8iLCJsaXN0U2l6ZSIsInNsaWRlU2l6ZSIsIndpdGhvdXRHYXAiLCJTbGlkZSIsImdldEdhcCIsInRvdGFsU2l6ZSIsInNsaWRlclNpemUiLCJwYXJzZUZsb2F0IiwiZ2V0UGFkZGluZyIsIkNsb25lcyIsImNsb25lQ291bnQiLCJjbG9uZXMiLCJyZW1vdW50Iiwib2JzZXJ2ZSIsImNvbXB1dGVDbG9uZUNvdW50IiwiaXNIZWFkIiwiY2xvbmVOb2RlIiwiY2xvbmVEZWVwIiwiZ2VuZXJhdGUiLCJjbG9uZXMyIiwiZml4ZWRTaXplIiwiTW92ZSIsIlRyYW5zaXRpb24iLCJfRXZlbnRJbnRlcmZhY2U0IiwiX0NvbXBvbmVudHMyJExheW91dCIsIl9Db21wb25lbnRzMiREaXJlY3RpbyIsIl9Db21wb25lbnRzMiRFbGVtZW50czMiLCJyZXBvc2l0aW9uIiwiaXNCdXN5IiwiU2Nyb2xsIiwianVtcCIsInRyYW5zbGF0ZSIsInRvUG9zaXRpb24iLCJwb3NpdGlvbiIsInByZXZlbnRMb29wIiwiZGVzdGluYXRpb24iLCJleGNlZWRlZE1heCIsImdldEVuZCIsInNoaWZ0IiwibG9vcCIsImJhY2t3YXJkcyIsImV4Y2VzcyIsImdldExpbWl0Iiwic2l6ZSIsImdldFBvc2l0aW9uIiwibWluRGlzdGFuY2UiLCJJbmZpbml0eSIsInRyaW1taW5nIiwidHJpbVNwYWNlIiwidHJpbSIsIm1vdmUiLCJkZXN0Iiwic2hpZnRlZCIsImV4Y2VlZGVkTGltaXQiLCJleGNlZWRlZE1pbiIsImVuZEluZGV4Iiwic2xpZGVDb3VudCIsInBlck1vdmUiLCJfRXZlbnRJbnRlcmZhY2U1IiwiX0NvbXBvbmVudHMyJFNsaWRlcyIsIm9taXRFbmQiLCJpc0xvb3AiLCJpc1NsaWRlIiwiZ2V0TmV4dCIsImdldEFkamFjZW50IiwiZ2V0UHJldiIsImN1cnJJbmRleCIsInByZXZJbmRleCIsIm9uUmVzaXplZCIsImNvbXB1dGVEZXN0SW5kZXgiLCJzbmFwUGFnZSIsImNvbXB1dGVNb3ZhYmxlRGVzdEluZGV4IiwidG9QYWdlIiwic2V0SW5kZXgiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImdvIiwiY29udHJvbCIsImFsbG93U2FtZUluZGV4IiwiX3JlZiIsImluZGljYXRvciIsInBhcnNlIiwic2Nyb2xsIiwiZHVyYXRpb24iLCJzbmFwIiwiZ2V0SW5kZXgiLCJ0b0Rlc3QiLCJBcnJvd3MiLCJjcmVhdGVkIiwid3JhcHBlckNsYXNzZXMiLCJwbGFjZWhvbGRlciIsIndyYXBwZXIiLCJlbmFibGVkIiwiY3JlYXRlQXJyb3ciLCJwcmV2MiIsImFycm93UGF0aCIsIm5leHRJbmRleCIsInByZXZMYWJlbCIsImxhc3QiLCJuZXh0TGFiZWwiLCJmaXJzdCIsImRpc2FibGVkIiwiQXV0b3BsYXkiLCJob3ZlcmVkIiwiZm9jdXNlZCIsIl9FdmVudEludGVyZmFjZTYiLCJfQ29tcG9uZW50czIkRWxlbWVudHM0IiwiYXV0b3BsYXkiLCJzdG9wcGVkIiwicmVzZXRQcm9ncmVzcyIsInN0b3AiLCJhdXRvVG9nZ2xlIiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwiQ292ZXIiLCJjb3ZlciIsImNvdmVyMiIsInNyYyIsIl9FdmVudEludGVyZmFjZTgiLCJmcmljdGlvbiIsIm9uU2Nyb2xsZWQiLCJub0NvbnN0cmFpbiIsImNsZWFyIiwibm9EaXN0YW5jZSIsIm9uRW5kIiwidG8iLCJ0IiwiZWFzaW5nRnVuYyIsInBvdyIsIkRyYWciLCJiYXNlUG9zaXRpb24iLCJiYXNlRXZlbnQiLCJwcmV2QmFzZUV2ZW50IiwiaXNGcmVlIiwiZHJhZ2dpbmciLCJjbGlja1ByZXZlbnRlZCIsIl9FdmVudEludGVyZmFjZTkiLCJfQ29tcG9uZW50czIkRGlyZWN0aW8yIiwiZXhjZWVkZWQiLCJkaXNhYmxlIiwib25Qb2ludGVyRG93biIsImlzVG91Y2giLCJpc1RvdWNoRXZlbnQiLCJ0YXJnZXQyIiwibm9EcmFnIiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlclVwIiwic2F2ZSIsImNhbmNlbGFibGUiLCJkaWZmQ29vcmQiLCJleHBpcmVkIiwiZGlmZlRpbWUiLCJoYXNFeGNlZWRlZCIsImlzU2xpZGVyRGlyZWN0aW9uIiwidGhyZXNob2xkcyIsImRyYWdNaW5UaHJlc2hvbGQiLCJpc09iaiIsIm1vdXNlIiwidG91Y2giLCJzaG91bGRTdGFydCIsInZlbG9jaXR5IiwiY29tcHV0ZVZlbG9jaXR5IiwiZmxpY2tQb3dlciIsImZsaWNrTWF4UGFnZXMiLCJjb21wdXRlRGVzdGluYXRpb24iLCJyZXdpbmRCeURyYWciLCJvbkNsaWNrIiwib3J0aG9nb25hbCIsImNvb3JkT2YiLCJnZXRCYXNlRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsIlRvdWNoRXZlbnQiLCJpc0RyYWdnaW5nIiwiS2V5Ym9hcmQiLCJfRXZlbnRJbnRlcmZhY2UxMCIsImtleWJvYXJkIiwib25LZXlkb3duIiwiX2Rpc2FibGVkIiwiTGF6eUxvYWQiLCJfRXZlbnRJbnRlcmZhY2UxMSIsImlzU2VxdWVudGlhbCIsImxhenlMb2FkIiwiZW50cmllcyIsInNyY3NldCIsImxvYWROZXh0IiwiY2hlY2siLCJwcmVsb2FkUGFnZXMiLCJsb2FkIiwib25Mb2FkIiwiUGFnaW5hdGlvbiIsInBhZ2luYXRpb25DbGFzc2VzIiwiZGlyIiwiZ2V0RGlyZWN0aW9uIiwibmV4dFBhZ2UiLCJpdGVtIiwicGFnaW5hdGlvbkRpcmVjdGlvbiIsIl9idXR0b24iLCJzZWxlY3QiLCJsaSIsImNsYXNzIiwidGV4dCIsInBhZ2VYIiwicGFnaW5hdGlvbktleWJvYXJkIiwiY3JlYXRlUGFnaW5hdGlvbiIsIlN5bmMiLCJpc1BhcmVudCIsInN5bmMiLCJXaGVlbCIsImxhc3RUaW1lIiwib25XaGVlbCIsImRlbHRhWSIsIl9taW4iLCJ3aGVlbE1pblRocmVzaG9sZCIsInNsZWVwIiwid2hlZWxTbGVlcCIsInJlbGVhc2VXaGVlbCIsInNob3VsZFByZXZlbnQiLCJ3aGVlbCIsIkxpdmUiLCJsaXZlIiwic3IiLCJ0ZXh0Q29udGVudCIsIkRFRkFVTFRTIiwic3BlZWQiLCJlYXNpbmciLCJyZXdpbmRTcGVlZCIsIkZhZGUiLCJkb25lIiwiZW5kQ2FsbGJhY2siLCJ0cmFuc2l0aW9uIiwiZ2V0U3BlZWQiLCJ1c2VTY3JvbGwiLCJfU3BsaWRlIiwidGhpcyIsInN0YXRlcyIsIl9vIiwiX0UiLCJkZWZhdWx0cyIsIkpTT04iLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJfcHJvdG8iLCJFeHRlbnNpb25zIiwiX3RoaXMiLCJfQyIsIl9UIiwiQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX3RoaXMkZXZlbnQiLCJTcGxpZGUiLCJzbGlkZXJJbml0Iiwic3dpcGUiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiciIsImhhc093blByb3BlcnR5IiwibyIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwid3JhcCIsIkdlbmVyYXRvciIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJoIiwibCIsImYiLCJzIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwidiIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJwb3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwiYXJncyIsImVyciIsIl9jYWxsZWUiLCJzcGxpZGVMaXN0MiIsInNwbGlkZUxpc3QiLCJfY29udGV4dCIsImhhbmRsZXIiLCJidXJnZXIiLCJoYW5kbGVyT3BlbiIsImhlYWRlck1lbnUiLCJoYW5kbGVyQmFja2Ryb3BDbGljayIsInRvZ2dsZVZlcnRpY2FsU2Nyb2xsIiwib3ZlcmZsb3dZIiwiaGFuZGxlckNsb3NlIiwibWVudUxpc3QiLCJsYW5nIiwiYnV0dG9uc01vZGFsIiwiY2xvc2UiLCJmb3JtRWxlbWVudCIsIk5vZGVMaXN0Iiwic29tZSIsImVsIiwiRWxlbWVudCIsIl90aGlzJGZvcm1IciIsImlzQnV0dG9uIiwiaXNIUkJ1dHRvbiIsImZvcm1HZW5lcmFsIiwiZm9ybUhyIiwiX3RoaXMkZm9ybUhyMiIsImhhbmRsZUZvcm0iLCJmb3JtU2VsZWN0b3IiLCJ0ZWxlZ3JhbUlucHV0Iiwic2t5cGVJbnB1dCIsImluZm9UZXh0IiwidmFsaWRpdHkiLCJ2YWxpZCIsIm9wYWNpdHkiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwianNvbkRhdGEiLCJmZXRjaCIsImhlYWRlcnMiLCJzdHJpbmdpZnkiLCJyZXNwb25zZSIsImpzb24iLCJjb25zb2xlIiwibG9nIiwic3VjY2Vzc01lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9