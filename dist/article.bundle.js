/*! For license information please see article.bundle.js.LICENSE.txt */
(()=>{var t={368:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".form__affiliates"),e=document.querySelector(".form__advertisers"),n=document.getElementsByName("purpose");document.getElementById("advertiseModal").checked&&(t.style.display="none"),document.getElementById("affiliateModal").checked&&(e.style.display="none"),n.forEach((function(n){n.addEventListener("change",(function(){document.getElementById("advertiseModal").checked?(t.style.display="none",e.style.display="block"):document.getElementById("affiliateModal").checked?(e.style.display="none",t.style.display="block"):(t.style.display="block",e.style.display="block")}))}))}))},416:()=>{var t=document.querySelector(".formGeneral"),e=t.querySelectorAll(".form__radio"),n=t.querySelector(".location"),r=t.querySelector(".email");e.forEach((function(t){t.addEventListener("change",(function(){"affiliateModal"===t.value?(n.required=!1,r.required=!1):"advertiseModal"===t.value&&(n.required=!0,r.required=!0)}))}))},120:()=>{window.addEventListener("load",(function(){document.querySelector("body").classList.add("loaded")}))},236:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelectorAll(".scrollLink"),e=document.querySelector("body"),n=document.querySelector(".header__menu"),r=document.querySelector(".navigationPanel");null==t||t.forEach((function(t){t.addEventListener("click",(function(o){o.preventDefault();var i=t.getAttribute("href");"/"!==window.location.pathname&&(window.location.href="/"),e.style.overflowY="visible",r.classList.remove("visible"),n.classList.remove("active"),function(t){t=t.replace("/","");var e=document.querySelector(t);e&&e.scrollIntoView({behavior:"smooth"})}(i)}))}))}))}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(()=>{"use strict";function t(){var t,e,n;this.burger.addEventListener("click",this.handlerOpen),t=this.headerMenu,e=this.handlerBackdropClick,n=function(n){var r=n.target;t&&!t.contains(r)&&(null==e||e(n,t))},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function e(){this.headerMenu.classList.contains("visible")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function r(){this.headerMenu.classList.toggle("visible"),this.burger.classList.toggle("active"),this.toggleVerticalScroll()}function o(){this.headerMenu.classList.remove("visible"),this.burger.classList.remove("active"),this.toggleVerticalScroll()}function i(t){!this.headerMenu.classList.contains("visible")||t.target.closest(".header__mobile")||t.target.closest(".header__menu")||t.target.closest(".header-menu__top")||t.target.closest(".header-lang__wrapper")||this.handlerClose()}var a=document.querySelector(".header");a&&new function(n){this.node=n,this.body=document.querySelector("body"),this.burger=document.querySelector(".header__menu"),this.headerMenu=document.querySelector(".navigationPanel"),this.menuList=document.querySelector(".header-menu__List"),this.lang=document.querySelectorAll(".header__lang"),this.handlerOpen=r.bind(this),this.handlerClose=o.bind(this),this.listeners=t.bind(this),this.handlerBackdropClick=i.bind(this),this.toggleVerticalScroll=e.bind(this),this.listeners()}(a);function c(){var t,e,n,r=this;this.buttonsModal.forEach((function(t){t.addEventListener("click",r.handlerOpen)})),this.close.forEach((function(t){t.addEventListener("click",r.handlerClose)})),this.form.forEach((function(t){t.addEventListener("submit",r.handlerClose)})),t=this.form,e=this.handlerBackdropClick,n=function(n){var r=n.target;t instanceof NodeList&&Array.from(t).some((function(t){return t.contains(r)}))||t instanceof Element&&t.contains(r)||null==e||e(n,t)},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function u(){this.node.classList.contains("modalw_is-open")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function s(t){var e,n=t.target.classList.contains("buttonModalw"),r=t.target.classList.contains("button__hr");n&&(r?this.formGeneral.classList.add("d-none"):null===(e=this.formHr)||void 0===e||e.classList.add("d-none"),this.node.classList.add("modalw_is-open"),this.toggleVerticalScroll())}function l(){var t;this.node.classList.remove("modalw_is-open"),null===(t=this.formHr)||void 0===t||t.classList.remove("d-none"),this.formGeneral.classList.remove("d-none"),this.toggleVerticalScroll()}function f(t){this.node.classList.contains("modalw_is-open")&&!t.target.classList.contains("buttonModalw")&&this.handlerClose()}var d=document.querySelector(".modalw");function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function p(){p=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof w?e:w,a=Object.create(i.prototype),c=new j(r||[]);return o(a,"_invoke",{value:C(t,n,c)}),a}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var d="suspendedStart",v="suspendedYield",y="executing",m="completed",g={};function w(){}function b(){}function E(){}var L={};s(L,a,(function(){return this}));var _=Object.getPrototypeOf,x=_&&_(_(N([])));x&&x!==n&&r.call(x,a)&&(L=x);var S=E.prototype=w.prototype=Object.create(L);function k(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function n(o,i,a,c){var u=f(t[o],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==h(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return n("throw",t,a,c)}))}c(u.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function C(e,n,r){var o=d;return function(i,a){if(o===y)throw new Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=O(c,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=y;var s=f(e,n,r);if("normal"===s.type){if(o=r.done?m:v,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function O(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,O(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function M(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function N(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(h(e)+" is not iterable")}return b.prototype=E,o(S,"constructor",{value:E,configurable:!0}),o(E,"constructor",{value:b,configurable:!0}),b.displayName=s(E,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,s(t,u,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},k(P.prototype),s(P.prototype,c,(function(){return this})),e.AsyncIterator=P,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new P(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},k(S),s(S,u,"Generator"),s(S,a,(function(){return this})),s(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=N,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:N(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}function v(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function y(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){v(i,r,o,a,c,"next",t)}function c(t){v(i,r,o,a,c,"throw",t)}a(void 0)}))}}d&&new function(t){this.node=t,this.body=document.querySelector("body"),this.form=document.querySelectorAll(".modalwForm"),this.formHr=t.querySelector(".formHr"),this.formGeneral=document.querySelector(".formGeneral"),this.buttonsModal=document.querySelectorAll(".buttonModalw"),this.close=document.querySelectorAll(".modalw__close"),this.handlerOpen=s.bind(this),this.handlerClose=l.bind(this),this.listeners=c.bind(this),this.handlerBackdropClick=f.bind(this),this.toggleVerticalScroll=u.bind(this),this.listeners()}(d),n(120),n(236);var m=function(){var t=y(p().mark((function t(){var e,n;return p().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://dspartners.pro/api/news");case 3:if((e=t.sent).ok){t.next=6;break}throw new Error("Network response was not ok");case 6:return t.next=8,e.json();case 8:return n=t.sent,t.abrupt("return",n);case 12:throw t.prev=12,t.t0=t.catch(0),console.error("Error fetching data:",t.t0),t.t0;case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}(),g=function(){var t=y(p().mark((function t(e){var n,r;return p().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://dspartners.pro/api/news/".concat(e));case 3:if((n=t.sent).ok){t.next=6;break}throw new Error("Network response was not ok");case 6:return console.log(n),t.next=9,n.json();case 9:return r=t.sent,t.abrupt("return",r);case 13:throw t.prev=13,t.t0=t.catch(0),console.error("Error fetching data:",t.t0),t.t0;case 17:case"end":return t.stop()}}),t,null,[[0,13]])})));return function(e){return t.apply(this,arguments)}}();function w(t){var e=document.createElement("li");return e.className="splide__slide",e.innerHTML="\n        <a href='/news/".concat(t.id,'\'>\n            <div class="news__image" style="background-image: url(\'').concat(t.image,'\');"></div>\n            <h3 class="news__heading typography typography__subtitle">').concat(t.title,'</h3>\n            <div class="news__wrapper">\n                <p class="typography news__data">').concat(t.pub_date,'</p>\n                <p class="typography news__time">').concat(t.read_time,' min reading</p>\n            </div>\n            <p class="typography news__text">').concat(t.content,'</p>\n            <p class="typography news__theme">').concat(t.theme,"</p>\n        </a>"),e}function b(t){var e=document.createElement("div");return e.className="row",e.innerHTML='             \n        <h2 class="col-12 offset-lg-2 col-lg-6 articleSection__heading  typography__h2">'.concat(t.title,'</h2>\n        <div class="offset-lg-2  news__wrapper mb-4">\n            <p class="news__data">').concat(t.pub_date,'</p>\n            <p class="news__time">').concat(t.read_time,' min reading</p>\n        </div>\n        <p class="col-12 offset-lg-2 col-lg-6 news__text news__text_full mb-4">').concat(t.content,'</p>\n        <img class="col-12 offset-lg-2 col-lg-8 articleSection__image"  src=\'https://dspartners.pro/').concat(t.image,'\'\n         />    \n        <p class="offset-lg-2 news__theme mt-4">').concat(t.theme,"</p>\n      "),e}function E(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var L="(prefers-reduced-motion: reduce)",_={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function x(t){t.length=0}function S(t,e,n){return Array.prototype.slice.call(t,e,n)}function k(t){return t.bind.apply(t,[null].concat(S(arguments,1)))}var P=setTimeout,C=function(){};function O(t){return requestAnimationFrame(t)}function M(t,e){return typeof e===t}function A(t){return!D(t)&&M("object",t)}var j=Array.isArray,N=k(M,"function"),q=k(M,"string"),T=k(M,"undefined");function D(t){return null===t}function I(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function G(t){return j(t)?t:[t]}function F(t,e){G(t).forEach(e)}function z(t,e){return t.indexOf(e)>-1}function B(t,e){return t.push.apply(t,G(e)),t}function R(t,e,n){t&&F(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function Y(t,e){R(t,q(e)?e.split(" "):e,!0)}function H(t,e){F(e,t.appendChild.bind(t))}function W(t,e){F(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function X(t,e){return I(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function V(t,e){var n=t?S(t.children):[];return e?n.filter((function(t){return X(t,e)})):n}function U(t,e){return e?V(t,e)[0]:t.firstElementChild}var J=Object.keys;function K(t,e,n){return t&&(n?J(t).reverse():J(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function Q(t){return S(arguments,1).forEach((function(e){K(e,(function(n,r){t[r]=e[r]}))})),t}function $(t){return S(arguments,1).forEach((function(e){K(e,(function(e,n){j(e)?t[n]=e.slice():A(e)?t[n]=$({},A(t[n])?t[n]:{},e):t[n]=e}))})),t}function Z(t,e){F(e||J(t),(function(e){delete t[e]}))}function tt(t,e){F(t,(function(t){F(e,(function(e){t&&t.removeAttribute(e)}))}))}function et(t,e,n){A(e)?K(e,(function(e,n){et(t,n,e)})):F(t,(function(t){D(n)||""===n?tt(t,e):t.setAttribute(e,String(n))}))}function nt(t,e,n){var r=document.createElement(t);return e&&(q(e)?Y(r,e):et(r,e)),n&&H(n,r),r}function rt(t,e,n){if(T(n))return getComputedStyle(t)[e];D(n)||(t.style[e]=""+n)}function ot(t,e){rt(t,"display",e)}function it(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function at(t,e){return t.getAttribute(e)}function ct(t,e){return t&&t.classList.contains(e)}function ut(t){return t.getBoundingClientRect()}function st(t){F(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function lt(t){return U((new DOMParser).parseFromString(t,"text/html").body)}function ft(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function dt(t,e){return t&&t.querySelector(e)}function ht(t,e){return e?S(t.querySelectorAll(e)):[]}function pt(t,e){R(t,e,!1)}function vt(t){return t.timeStamp}function yt(t){return q(t)?t:t?t+"px":""}var mt="splide",gt="data-"+mt;function wt(t,e){if(!t)throw new Error("["+mt+"] "+(e||""))}var bt=Math.min,Et=Math.max,Lt=Math.floor,_t=Math.ceil,xt=Math.abs;function St(t,e,n){return xt(t-e)<n}function kt(t,e,n,r){var o=bt(e,n),i=Et(e,n);return r?o<t&&t<i:o<=t&&t<=i}function Pt(t,e,n){var r=bt(e,n),o=Et(e,n);return bt(Et(r,t),o)}function Ct(t){return+(t>0)-+(t<0)}function Ot(t,e){return F(e,(function(e){t=t.replace("%s",""+e)})),t}function Mt(t){return t<10?"0"+t:""+t}var At={};function jt(){var t=[];function e(t,e,n){F(t,(function(t){t&&F(e,(function(e){e.split(" ").forEach((function(e){var r=e.split(".");n(t,r[0],r[1])}))}))}))}return{bind:function(n,r,o,i){e(n,r,(function(e,n,r){var a="addEventListener"in e,c=a?e.removeEventListener.bind(e,n,o,i):e.removeListener.bind(e,o);a?e.addEventListener(n,o,i):e.addListener(o),t.push([e,n,r,o,c])}))},unbind:function(n,r,o){e(n,r,(function(e,n,r){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==r||o&&t[3]!==o)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var r;return"function"==typeof CustomEvent?r=new CustomEvent(e,{bubbles:!0,detail:n}):(r=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(r),r},destroy:function(){t.forEach((function(t){t[4]()})),x(t)}}}var Nt="mounted",qt="ready",Tt="move",Dt="moved",It="click",Gt="refresh",Ft="updated",zt="resize",Bt="resized",Rt="scroll",Yt="scrolled",Ht="destroy",Wt="navigation:mounted",Xt="autoplay:play",Vt="autoplay:pause",Ut="lazyload:loaded",Jt="ei";function Kt(t){var e=t?t.event.bus:document.createDocumentFragment(),n=jt();return t&&t.event.on(Ht,n.destroy),Q(n,{bus:e,on:function(t,r){n.bind(e,G(t).join(" "),(function(t){r.apply(r,j(t.detail)?t.detail:[])}))},off:k(n.unbind,e),emit:function(t){n.dispatch(e,t,S(arguments,1))}})}function Qt(t,e,n,r){var o,i,a=Date.now,c=0,u=!0,s=0;function l(){if(!u){if(c=t?bt((a()-o)/t,1):1,n&&n(c),c>=1&&(e(),o=a(),r&&++s>=r))return f();i=O(l)}}function f(){u=!0}function d(){i&&cancelAnimationFrame(i),c=0,i=0,u=!0}return{start:function(e){e||d(),o=a()-(e?c*t:0),u=!1,i=O(l)},rewind:function(){o=a(),c=0,n&&n(c)},pause:f,cancel:d,set:function(e){t=e},isPaused:function(){return u}}}var $t="Arrow",Zt=$t+"Left",te=$t+"Right",ee=$t+"Up",ne=$t+"Down",re="ttb",oe={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[ee,te],ArrowRight:[ne,Zt]};var ie="role",ae="tabindex",ce="aria-",ue=ce+"controls",se=ce+"current",le=ce+"selected",fe=ce+"label",de=ce+"labelledby",he=ce+"hidden",pe=ce+"orientation",ve=ce+"roledescription",ye=ce+"live",me=ce+"busy",ge=ce+"atomic",we=[ie,ae,"disabled",ue,se,fe,de,he,pe,ve],be=mt+"__",Ee="is-",Le=mt,_e=be+"track",xe=be+"list",Se=be+"slide",ke=Se+"--clone",Pe=Se+"__container",Ce=be+"arrows",Oe=be+"arrow",Me=Oe+"--prev",Ae=Oe+"--next",je=be+"pagination",Ne=je+"__page",qe=be+"progress__bar",Te=be+"toggle",De=be+"sr",Ie=Ee+"initialized",Ge=Ee+"active",Fe=Ee+"prev",ze=Ee+"next",Be=Ee+"visible",Re=Ee+"loading",Ye=Ee+"focus-in",He=Ee+"overflow",We=[Ge,Be,Fe,ze,Re,Ye,He],Xe={slide:Se,clone:ke,arrows:Ce,arrow:Oe,prev:Me,next:Ae,pagination:je,page:Ne,spinner:be+"spinner"},Ve="touchstart mousedown",Ue="touchmove mousemove",Je="touchend touchcancel mouseup click",Ke="slide",Qe="loop",$e="fade";var Ze=gt+"-interval",tn={passive:!1,capture:!0},en={Spacebar:" ",Right:te,Left:Zt,Up:ee,Down:ne};function nn(t){return t=q(t)?t:t.key,en[t]||t}var rn="keydown",on=gt+"-lazy",an=on+"-srcset",cn="["+on+"], ["+an+"]",un=[" ","Enter"],sn=Object.freeze({__proto__:null,Media:function(t,e,n){var r=t.state,o=n.breakpoints||{},i=n.reducedMotion||{},a=jt(),c=[];function u(t){t&&a.destroy()}function s(t,e){var n=matchMedia(e);a.bind(n,"change",l),c.push([t,n])}function l(){var e=r.is(7),o=n.direction,i=c.reduce((function(t,e){return $(t,e[1].matches?e[0]:{})}),{});Z(n),f(i),n.destroy?t.destroy("completely"===n.destroy):e?(u(!0),t.mount()):o!==n.direction&&t.refresh()}function f(e,o,i){$(n,e),o&&$(Object.getPrototypeOf(n),e),!i&&r.is(1)||t.emit(Ft,n)}return{setup:function(){var t="min"===n.mediaQuery;J(o).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){s(o[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),s(i,L),l()},destroy:u,reduce:function(t){matchMedia(L).matches&&(t?$(n,i):Z(n,J(i)))},set:f}},Direction:function(t,e,n){return{resolve:function(t,e,r){var o="rtl"!==(r=r||n.direction)||e?r===re?0:-1:1;return oe[t]&&oe[t][o]||t.replace(/width|left|right/i,(function(t,e){var n=oe[t.toLowerCase()][o]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var r,o,i,a=Kt(t),c=a.on,u=a.bind,s=t.root,l=n.i18n,f={},d=[],h=[],p=[];function v(){var t,e,i;r=g("."+_e),o=U(r,"."+xe),wt(r&&o,"A track/list element is missing."),B(d,V(o,"."+Se+":not(."+ke+")")),K({arrows:Ce,pagination:je,prev:Me,next:Ae,bar:qe,toggle:Te},(function(t,e){f[e]=g("."+t)})),Q(f,{root:s,track:r,list:o,slides:d}),e=s.id||""+(t=mt)+Mt(At[t]=(At[t]||0)+1),i=n.role,s.id=e,r.id=r.id||e+"-track",o.id=o.id||e+"-list",!at(s,ie)&&"SECTION"!==s.tagName&&i&&et(s,ie,i),et(s,ve,l.carousel),et(o,ie,"presentation"),m()}function y(t){var e=we.concat("style");x(d),pt(s,h),pt(r,p),tt([r,o],e),tt(s,t?e:["style",ve])}function m(){pt(s,h),pt(r,p),h=w(Le),p=w(_e),Y(s,h),Y(r,p),et(s,fe,n.label),et(s,de,n.labelledby)}function g(t){var e=dt(s,t);return e&&function(t,e){if(N(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!X(n,e);)n=n.parentElement;return n}(e,"."+Le)===s?e:void 0}function w(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===Le&&Ge]}return Q(f,{setup:v,mount:function(){c(Gt,y),c(Gt,v),c(Ft,m),u(document,Ve+" keydown",(function(t){i="keydown"===t.type}),{capture:!0}),u(s,"focusin",(function(){R(s,Ye,!!i)}))},destroy:y})},Slides:function(t,e,n){var r=Kt(t),o=r.on,i=r.emit,a=r.bind,c=e.Elements,u=c.slides,s=c.list,l=[];function f(){u.forEach((function(t,e){h(t,e,-1)}))}function d(){v((function(t){t.destroy()})),x(l)}function h(e,n,r){var o=function(t,e,n,r){var o,i=Kt(t),a=i.on,c=i.emit,u=i.bind,s=t.Components,l=t.root,f=t.options,d=f.isNavigation,h=f.updateOnMove,p=f.i18n,v=f.pagination,y=f.slideFocus,m=s.Direction.resolve,g=at(r,"style"),w=at(r,fe),b=n>-1,E=U(r,"."+Pe);function L(){var o=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");et(r,fe,Ot(p.slideX,(b?n:e)+1)),et(r,ue,o),et(r,ie,y?"button":""),y&&tt(r,ve)}function _(){o||x()}function x(){if(!o){var n=t.index;(i=S())!==ct(r,Ge)&&(R(r,Ge,i),et(r,se,d&&i||""),c(i?"active":"inactive",P)),function(){var e=function(){if(t.is($e))return S();var e=ut(s.Elements.track),n=ut(r),o=m("left",!0),i=m("right",!0);return Lt(e[o])<=_t(n[o])&&Lt(n[i])<=_t(e[i])}(),n=!e&&(!S()||b);if(t.state.is([4,5])||et(r,he,n||""),et(ht(r,f.focusableNodes||""),ae,n?-1:""),y&&et(r,ae,n?-1:0),e!==ct(r,Be)&&(R(r,Be,e),c(e?"visible":"hidden",P)),!e&&document.activeElement===r){var o=s.Slides.getAt(t.index);o&&it(o.slide)}}(),R(r,Fe,e===n-1),R(r,ze,e===n+1)}var i}function S(){var r=t.index;return r===e||f.cloneStatus&&r===n}var P={index:e,slideIndex:n,slide:r,container:E,isClone:b,mount:function(){b||(r.id=l.id+"-slide"+Mt(e+1),et(r,ie,v?"tabpanel":"group"),et(r,ve,p.slide),et(r,fe,w||Ot(p.slideLabel,[e+1,t.length]))),u(r,"click",k(c,It,P)),u(r,"keydown",k(c,"sk",P)),a([Dt,"sh",Yt],x),a(Wt,L),h&&a(Tt,_)},destroy:function(){o=!0,i.destroy(),pt(r,We),tt(r,we),et(r,"style",g),et(r,fe,w||"")},update:x,style:function(t,e,n){rt(n&&E||r,t,e)},isWithin:function(n,r){var o=xt(n-e);return b||!f.rewind&&!t.is(Qe)||(o=bt(o,t.length-o)),o<=r}};return P}(t,n,r,e);o.mount(),l.push(o),l.sort((function(t,e){return t.index-e.index}))}function p(t){return t?y((function(t){return!t.isClone})):l}function v(t,e){p(e).forEach(t)}function y(t){return l.filter(N(t)?t:function(e){return q(t)?X(e.slide,t):z(G(t),e.index)})}return{mount:function(){f(),o(Gt,d),o(Gt,f)},destroy:d,update:function(){v((function(t){t.update()}))},register:h,get:p,getIn:function(t){var r=e.Controller,o=r.toIndex(t),i=r.hasFocus()?1:n.perPage;return y((function(t){return kt(t.index,o,o+i-1)}))},getAt:function(t){return y(t)[0]},add:function(t,e){F(t,(function(t){if(q(t)&&(t=lt(t)),I(t)){var r=u[e];r?W(t,r):H(s,t),Y(t,n.classes.slide),o=t,c=k(i,zt),l=ht(o,"img"),(f=l.length)?l.forEach((function(t){a(t,"load error",(function(){--f||c()}))})):c()}var o,c,l,f})),i(Gt)},remove:function(t){st(y(t).map((function(t){return t.slide}))),i(Gt)},forEach:v,filter:y,style:function(t,e,n){v((function(r){r.style(t,e,n)}))},getLength:function(t){return t?u.length:l.length},isEnough:function(){return l.length>n.perPage}}},Layout:function(t,e,n){var r,o,i,a=Kt(t),c=a.on,u=a.bind,s=a.emit,l=e.Slides,f=e.Direction.resolve,d=e.Elements,h=d.root,p=d.track,v=d.list,y=l.getAt,m=l.style;function g(){r=n.direction===re,rt(h,"maxWidth",yt(n.width)),rt(p,f("paddingLeft"),b(!1)),rt(p,f("paddingRight"),b(!0)),w(!0)}function w(t){var e,a=ut(h);(t||o.width!==a.width||o.height!==a.height)&&(rt(p,"height",(e="",r&&(wt(e=E(),"height or heightRatio is missing."),e="calc("+e+" - "+b(!1)+" - "+b(!0)+")"),e)),m(f("marginRight"),yt(n.gap)),m("width",n.autoWidth?null:yt(n.fixedWidth)||(r?"":L())),m("height",yt(n.fixedHeight)||(r?n.autoHeight?null:L():E()),!0),o=a,s(Bt),i!==(i=O())&&(R(h,He,i),s("overflow",i)))}function b(t){var e=n.padding,r=f(t?"right":"left");return e&&yt(e[r]||(A(e)?0:e))||"0px"}function E(){return yt(n.height||ut(v).width*n.heightRatio)}function L(){var t=yt(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function _(){return ut(v)[f("width")]}function x(t,e){var n=y(t||0);return n?ut(n.slide)[f("width")]+(e?0:C()):0}function S(t,e){var n=y(t);if(n){var r=ut(n.slide)[f("right")],o=ut(v)[f("left")];return xt(r-o)+(e?0:C())}return 0}function P(e){return S(t.length-1)-S(0)+x(0,e)}function C(){var t=y(0);return t&&parseFloat(rt(t.slide,f("marginRight")))||0}function O(){return t.is($e)||P(!0)>_()}return{mount:function(){var t,e;g(),u(window,"resize load",(t=k(s,zt),e=Qt(0,t,null,1),function(){e.isPaused()&&e.start()})),c([Ft,Gt],g),c(zt,w)},resize:w,listSize:_,slideSize:x,sliderSize:P,totalSize:S,getPadding:function(t){return parseFloat(rt(p,f("padding"+(t?"Right":"Left"))))||0},isOverflow:O}},Clones:function(t,e,n){var r,o=Kt(t),i=o.on,a=e.Elements,c=e.Slides,u=e.Direction.resolve,s=[];function l(){i(Gt,f),i([Ft,zt],h),(r=p())&&(function(e){var r=c.get().slice(),o=r.length;if(o){for(;r.length<e;)B(r,r);B(r.slice(-e),r.slice(0,e)).forEach((function(i,u){var l=u<e,f=function(e,r){var o=e.cloneNode(!0);return Y(o,n.classes.clone),o.id=t.root.id+"-clone"+Mt(r+1),o}(i.slide,u);l?W(f,r[0].slide):H(a.list,f),B(s,f),c.register(f,u-e+(l?0:o),i.index)}))}}(r),e.Layout.resize(!0))}function f(){d(),l()}function d(){st(s),x(s),o.destroy()}function h(){var t=p();r!==t&&(r<t||!t)&&o.emit(Gt)}function p(){var r=n.clones;if(t.is(Qe)){if(T(r)){var o=n[u("fixedWidth")]&&e.Layout.slideSize(0);r=o&&_t(ut(a.track)[u("width")]/o)||n[u("autoWidth")]&&t.length||2*n.perPage}}else r=0;return r}return{mount:l,destroy:d}},Move:function(t,e,n){var r,o=Kt(t),i=o.on,a=o.emit,c=t.state.set,u=e.Layout,s=u.slideSize,l=u.getPadding,f=u.totalSize,d=u.listSize,h=u.sliderSize,p=e.Direction,v=p.resolve,y=p.orient,m=e.Elements,g=m.list,w=m.track;function b(){e.Controller.isBusy()||(e.Scroll.cancel(),E(t.index),e.Slides.update())}function E(t){L(k(t,!0))}function L(n,r){if(!t.is($e)){var o=r?n:function(n){if(t.is(Qe)){var r=S(n),o=r>e.Controller.getEnd();(r<0||o)&&(n=_(n,o))}return n}(n);rt(g,"transform","translate"+v("X")+"("+o+"px)"),n!==o&&a("sh")}}function _(t,e){var n=t-C(e),r=h();return t-y(r*(_t(xt(n)/r)||1))*(e?1:-1)}function x(){L(P(),!0),r.cancel()}function S(t){for(var n=e.Slides.get(),r=0,o=1/0,i=0;i<n.length;i++){var a=n[i].index,c=xt(k(a,!0)-t);if(!(c<=o))break;o=c,r=a}return r}function k(e,r){var o=y(f(e-1)-function(t){var e=n.focus;return"center"===e?(d()-s(t,!0))/2:+e*s(t)||0}(e));return r?function(e){return n.trimSpace&&t.is(Ke)&&(e=Pt(e,0,y(h(!0)-d()))),e}(o):o}function P(){var t=v("left");return ut(g)[t]-ut(w)[t]+y(l(!1))}function C(t){return k(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){r=e.Transition,i([Nt,Bt,Ft,Gt],b)},move:function(t,e,n,o){var i,u;t!==e&&(i=t>n,u=y(_(P(),i)),i?u>=0:u<=g[v("scrollWidth")]-ut(w)[v("width")])&&(x(),L(_(P(),t>n),!0)),c(4),a(Tt,e,n,t),r.start(e,(function(){c(3),a(Dt,e,n,t),o&&o()}))},jump:E,translate:L,shift:_,cancel:x,toIndex:S,toPosition:k,getPosition:P,getLimit:C,exceededLimit:function(t,e){e=T(e)?P():e;var n=!0!==t&&y(e)<y(C(!1)),r=!1!==t&&y(e)>y(C(!0));return n||r},reposition:b}},Controller:function(t,e,n){var r,o,i,a,c=Kt(t),u=c.on,s=c.emit,l=e.Move,f=l.getPosition,d=l.getLimit,h=l.toPosition,p=e.Slides,v=p.isEnough,y=p.getLength,m=n.omitEnd,g=t.is(Qe),w=t.is(Ke),b=k(P,!1),E=k(P,!0),L=n.start||0,_=L;function x(){o=y(!0),i=n.perMove,a=n.perPage,r=M();var t=Pt(L,0,m?r:o-1);t!==L&&(L=t,l.reposition())}function S(){r!==M()&&s(Jt)}function P(t,e){var n=i||(D()?1:a),o=C(L+n*(t?-1:1),L,!(i||D()));return-1===o&&w&&!St(f(),d(!t),1)?t?0:r:e?o:O(o)}function C(e,c,u){if(v()||D()){var s=function(e){if(w&&"move"===n.trimSpace&&e!==L)for(var r=f();r===h(e,!0)&&kt(e,0,t.length-1,!n.rewind);)e<L?--e:++e;return e}(e);s!==e&&(c=e,e=s,u=!1),e<0||e>r?e=i||!kt(0,e,c,!0)&&!kt(r,c,e,!0)?g?u?e<0?-(o%a||a):o:e:n.rewind?e<0?r:0:-1:A(j(e)):u&&e!==c&&(e=A(j(c)+(e<c?-1:1)))}else e=-1;return e}function O(t){return g?(t+o)%o||0:t}function M(){for(var t=o-(D()||g&&i?1:a);m&&t-- >0;)if(h(o-1,!0)!==h(t,!0)){t++;break}return Pt(t,0,o-1)}function A(t){return Pt(D()?t:a*t,0,r)}function j(t){return D()?bt(t,r):Lt((t>=r?o-1:t)/a)}function N(t){t!==L&&(_=L,L=t)}function D(){return!T(n.focus)||n.isNavigation}function I(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){x(),u([Ft,Gt,Jt],x),u(Bt,S)},go:function(t,e,n){if(!I()){var o=function(t){var e=L;if(q(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],o=n[1],i=n[2];"+"===o||"-"===o?e=C(L+ +(""+o+(+i||1)),L):">"===o?e=i?A(+i):b(!0):"<"===o&&(e=E(!0))}else e=g?t:Pt(t,0,r);return e}(t),i=O(o);i>-1&&(e||i!==L)&&(N(i),l.move(o,i,_,n))}},scroll:function(t,n,o,i){e.Scroll.scroll(t,n,o,(function(){var t=O(l.toIndex(f()));N(m?bt(t,r):t),i&&i()}))},getNext:b,getPrev:E,getAdjacent:P,getEnd:M,setIndex:N,getIndex:function(t){return t?_:L},toIndex:A,toPage:j,toDest:function(t){var e=l.toIndex(t);return w?Pt(e,0,r):e},hasFocus:D,isBusy:I}},Arrows:function(t,e,n){var r,o,i=Kt(t),a=i.on,c=i.bind,u=i.emit,s=n.classes,l=n.i18n,f=e.Elements,d=e.Controller,h=f.arrows,p=f.track,v=h,y=f.prev,m=f.next,g={};function w(){var t;!(t=n.arrows)||y&&m||(v=h||nt("div",s.arrows),y=_(!0),m=_(!1),r=!0,H(v,[y,m]),!h&&W(v,p)),y&&m&&(Q(g,{prev:y,next:m}),ot(v,t?"":"none"),Y(v,o=Ce+"--"+n.direction),t&&(a([Nt,Dt,Gt,Yt,Jt],x),c(m,"click",k(L,">")),c(y,"click",k(L,"<")),x(),et([y,m],ue,p.id),u("arrows:mounted",y,m))),a(Ft,b)}function b(){E(),w()}function E(){i.destroy(),pt(v,o),r?(st(h?[y,m]:v),y=m=null):tt([y,m],we)}function L(t){d.go(t,!0)}function _(t){return lt('<button class="'+s.arrow+" "+(t?s.prev:s.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function x(){if(y&&m){var e=t.index,n=d.getPrev(),r=d.getNext(),o=n>-1&&e<n?l.last:l.prev,i=r>-1&&e>r?l.first:l.next;y.disabled=n<0,m.disabled=r<0,et(y,fe,o),et(m,fe,i),u("arrows:updated",y,m,n,r)}}return{arrows:g,mount:w,destroy:E,update:x}},Autoplay:function(t,e,n){var r,o,i=Kt(t),a=i.on,c=i.bind,u=i.emit,s=Qt(n.interval,t.go.bind(t,">"),(function(t){var e=f.bar;e&&rt(e,"width",100*t+"%"),u("autoplay:playing",t)})),l=s.isPaused,f=e.Elements,d=e.Elements,h=d.root,p=d.toggle,v=n.autoplay,y="pause"===v;function m(){l()&&e.Slides.isEnough()&&(s.start(!n.resetProgress),o=r=y=!1,b(),u(Xt))}function g(t){void 0===t&&(t=!0),y=!!t,b(),l()||(s.pause(),u(Vt))}function w(){y||(r||o?g(!1):m())}function b(){p&&(R(p,Ge,!y),et(p,fe,n.i18n[y?"play":"pause"]))}function E(t){var r=e.Slides.getAt(t);s.set(r&&+at(r.slide,Ze)||n.interval)}return{mount:function(){v&&(n.pauseOnHover&&c(h,"mouseenter mouseleave",(function(t){r="mouseenter"===t.type,w()})),n.pauseOnFocus&&c(h,"focusin focusout",(function(t){o="focusin"===t.type,w()})),p&&c(p,"click",(function(){y?m():g(!0)})),a([Tt,Rt,Gt],s.rewind),a(Tt,E),p&&et(p,ue,f.track.id),y||m(),b())},destroy:s.cancel,play:m,pause:g,isPaused:l}},Cover:function(t,e,n){var r=Kt(t).on;function o(t){e.Slides.forEach((function(e){var n=U(e.container||e.slide,"img");n&&n.src&&i(t,n,e)}))}function i(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),ot(e,t?"none":"")}return{mount:function(){n.cover&&(r(Ut,k(i,!0)),r([Nt,Ft,Gt],k(o,!0)))},destroy:k(o,!1)}},Scroll:function(t,e,n){var r,o,i=Kt(t),a=i.on,c=i.emit,u=t.state.set,s=e.Move,l=s.getPosition,f=s.getLimit,d=s.exceededLimit,h=s.translate,p=t.is(Ke),v=1;function y(t,n,i,a,f){var h=l();if(w(),i&&(!p||!d())){var y=e.Layout.sliderSize(),b=Ct(t)*y*Lt(xt(t)/y)||0;t=s.toPosition(e.Controller.toDest(t%y))+b}var E=St(h,t,1);v=1,n=E?0:n||Et(xt(t-h)/1.5,800),o=a,r=Qt(n,m,k(g,h,t,f),1),u(5),c(Rt),r.start()}function m(){u(3),o&&o(),c(Yt)}function g(t,e,r,i){var a,c,u=l(),s=(t+(e-t)*(a=i,(c=n.easingFunc)?c(a):1-Math.pow(1-a,4))-u)*v;h(u+s),p&&!r&&d()&&(v*=.6,xt(s)<10&&y(f(d(!0)),600,!1,o,!0))}function w(){r&&r.cancel()}function b(){r&&!r.isPaused()&&(w(),m())}return{mount:function(){a(Tt,w),a([Ft,Gt],b)},destroy:w,scroll:y,cancel:b}},Drag:function(t,e,n){var r,o,i,a,c,u,s,l,f=Kt(t),d=f.on,h=f.emit,p=f.bind,v=f.unbind,y=t.state,m=e.Move,g=e.Scroll,w=e.Controller,b=e.Elements.track,E=e.Media.reduce,L=e.Direction,_=L.resolve,x=L.orient,S=m.getPosition,k=m.exceededLimit,P=!1;function O(){var t=n.drag;B(!t),a="free"===t}function M(t){if(u=!1,!s){var e=z(t);r=t.target,o=n.noDrag,X(r,"."+Ne+", ."+Oe)||o&&X(r,o)||!e&&t.button||(w.isBusy()?ft(t,!0):(l=e?b:window,c=y.is([4,5]),i=null,p(l,Ue,j,tn),p(l,Je,N,tn),m.cancel(),g.cancel(),T(t)))}var r,o}function j(e){if(y.is(6)||(y.set(6),h("drag")),e.cancelable)if(c){m.translate(r+D(e)/(P&&t.is(Ke)?5:1));var o=I(e)>200,i=P!==(P=k());(o||i)&&T(e),u=!0,h("dragging"),ft(e)}else(function(t){return xt(D(t))>xt(D(t,!0))})(e)&&(c=function(t){var e=n.dragMinThreshold,r=A(e),o=r&&e.mouse||0,i=(r?e.touch:+e)||10;return xt(D(t))>(z(t)?i:o)}(e),ft(e))}function N(r){y.is(6)&&(y.set(3),h("dragged")),c&&(function(r){var o=function(e){if(t.is(Qe)||!P){var n=I(e);if(n&&n<200)return D(e)/n}return 0}(r),i=function(t){return S()+Ct(t)*bt(xt(t)*(n.flickPower||600),a?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(o),c=n.rewind&&n.rewindByDrag;E(!1),a?w.scroll(i,0,n.snap):t.is($e)?w.go(x(Ct(o))<0?c?"<":"-":c?">":"+"):t.is(Ke)&&P&&c?w.go(k(!0)?">":"<"):w.go(w.toDest(i),!0),E(!0)}(r),ft(r)),v(l,Ue,j),v(l,Je,N),c=!1}function q(t){!s&&u&&ft(t,!0)}function T(t){i=o,o=t,r=S()}function D(t,e){return F(t,e)-F(G(t),e)}function I(t){return vt(t)-vt(G(t))}function G(t){return o===t&&i||o}function F(t,e){return(z(t)?t.changedTouches[0]:t)["page"+_(e?"Y":"X")]}function z(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function B(t){s=t}return{mount:function(){p(b,Ue,C,tn),p(b,Je,C,tn),p(b,Ve,M,tn),p(b,"click",q,{capture:!0}),p(b,"dragstart",ft),d([Nt,Ft],O)},disable:B,isDragging:function(){return c}}},Keyboard:function(t,e,n){var r,o,i=Kt(t),a=i.on,c=i.bind,u=i.unbind,s=t.root,l=e.Direction.resolve;function f(){var t=n.keyboard;t&&(r="global"===t?window:s,c(r,rn,p))}function d(){u(r,rn)}function h(){var t=o;o=!0,P((function(){o=t}))}function p(e){if(!o){var n=nn(e);n===l(Zt)?t.go("<"):n===l(te)&&t.go(">")}}return{mount:function(){f(),a(Ft,d),a(Ft,f),a(Tt,h)},destroy:d,disable:function(t){o=t}}},LazyLoad:function(t,e,n){var r=Kt(t),o=r.on,i=r.off,a=r.bind,c=r.emit,u="sequential"===n.lazyLoad,s=[Dt,Yt],l=[];function f(){x(l),e.Slides.forEach((function(t){ht(t.slide,cn).forEach((function(e){var r=at(e,on),o=at(e,an);if(r!==e.src||o!==e.srcset){var i=n.classes.spinner,a=e.parentElement,c=U(a,"."+i)||nt("span",i,a);l.push([e,t,c]),e.src||ot(e,"none")}}))})),u?v():(i(s),o(s,d),d())}function d(){(l=l.filter((function(e){var r=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,r)||h(e)}))).length||i(s)}function h(t){var e=t[0];Y(t[1].slide,Re),a(e,"load error",k(p,t)),et(e,"src",at(e,on)),et(e,"srcset",at(e,an)),tt(e,on),tt(e,an)}function p(t,e){var n=t[0],r=t[1];pt(r.slide,Re),"error"!==e.type&&(st(t[2]),ot(n,""),c(Ut,n,r),c(zt)),u&&v()}function v(){l.length&&h(l.shift())}return{mount:function(){n.lazyLoad&&(f(),o(Gt,f))},destroy:k(x,l),check:d}},Pagination:function(t,e,n){var r,o,i=Kt(t),a=i.on,c=i.emit,u=i.bind,s=e.Slides,l=e.Elements,f=e.Controller,d=f.hasFocus,h=f.getIndex,p=f.go,v=e.Direction.resolve,y=l.pagination,m=[];function g(){r&&(st(y?S(r.children):r),pt(r,o),x(m),r=null),i.destroy()}function w(t){p(">"+t,!0)}function b(t,e){var n=m.length,r=nn(e),o=E(),i=-1;r===v(te,!1,o)?i=++t%n:r===v(Zt,!1,o)?i=(--t+n)%n:"Home"===r?i=0:"End"===r&&(i=n-1);var a=m[i];a&&(it(a.button),p(">"+i),ft(e,!0))}function E(){return n.paginationDirection||n.direction}function L(t){return m[f.toPage(t)]}function _(){var t=L(h(!0)),e=L(h());if(t){var n=t.button;pt(n,Ge),tt(n,le),et(n,ae,-1)}if(e){var o=e.button;Y(o,Ge),et(o,le,!0),et(o,ae,"")}c("pagination:updated",{list:r,items:m},t,e)}return{items:m,mount:function e(){g(),a([Ft,Gt,Jt],e);var i=n.pagination;y&&ot(y,i?"":"none"),i&&(a([Tt,Rt,Yt],_),function(){var e=t.length,i=n.classes,a=n.i18n,c=n.perPage,h=d()?f.getEnd()+1:_t(e/c);Y(r=y||nt("ul",i.pagination,l.track.parentElement),o=je+"--"+E()),et(r,ie,"tablist"),et(r,fe,a.select),et(r,pe,E()===re?"vertical":"");for(var p=0;p<h;p++){var v=nt("li",null,r),g=nt("button",{class:i.page,type:"button"},v),L=s.getIn(p).map((function(t){return t.slide.id})),_=!d()&&c>1?a.pageX:a.slideX;u(g,"click",k(w,p)),n.paginationKeyboard&&u(g,"keydown",k(b,p)),et(v,ie,"presentation"),et(g,ie,"tab"),et(g,ue,L.join(" ")),et(g,fe,Ot(_,p+1)),et(g,ae,-1),m.push({li:v,button:g,page:p})}}(),_(),c("pagination:mounted",{list:r,items:m},L(t.index)))},destroy:g,getAt:L,update:_}},Sync:function(t,e,n){var r=n.isNavigation,o=n.slideFocus,i=[];function a(){var e,n;t.splides.forEach((function(e){e.isParent||(u(t,e.splide),u(e.splide,t))})),r&&((n=(e=Kt(t)).on)(It,l),n("sk",f),n([Nt,Ft],s),i.push(e),e.emit(Wt,t.splides))}function c(){i.forEach((function(t){t.destroy()})),x(i)}function u(t,e){var n=Kt(t);n.on(Tt,(function(t,n,r){e.go(e.is(Qe)?r:t)})),i.push(n)}function s(){et(e.Elements.list,pe,n.direction===re?"vertical":"")}function l(e){t.go(e.index)}function f(t,e){z(un,nn(e))&&(l(t),ft(e))}return{setup:k(e.Media.set,{slideFocus:T(o)?r:o},!0),mount:a,destroy:c,remount:function(){c(),a()}}},Wheel:function(t,e,n){var r=Kt(t).bind,o=0;function i(r){if(r.cancelable){var i=r.deltaY,a=i<0,c=vt(r),u=n.wheelMinThreshold||0,s=n.wheelSleep||0;xt(i)>u&&c-o>s&&(t.go(a?"<":">"),o=c),function(r){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(r)}(a)&&ft(r)}}return{mount:function(){n.wheel&&r(e.Elements.track,"wheel",i,tn)}}},Live:function(t,e,n){var r=Kt(t).on,o=e.Elements.track,i=n.live&&!n.isNavigation,a=nt("span",De),c=Qt(90,k(u,!1));function u(t){et(o,me,t),t?(H(o,a),c.start()):(st(a),c.cancel())}function s(t){i&&et(o,ye,t?"off":"polite")}return{mount:function(){i&&(s(!e.Autoplay.isPaused()),et(o,ge,!0),a.textContent="…",r(Xt,k(s,!0)),r(Vt,k(s,!1)),r([Dt,Yt],k(u,!0)))},disable:s,destroy:function(){tt(o,[ye,ge,me]),st(a)}}}}),ln={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Xe,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function fn(t,e,n){var r=e.Slides;function o(){r.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){Kt(t).on([Nt,Gt],o)},start:function(t,e){r.style("transition","opacity "+n.speed+"ms "+n.easing),P(e)},cancel:C}}function dn(t,e,n){var r,o=e.Move,i=e.Controller,a=e.Scroll,c=e.Elements.list,u=k(rt,c,"transition");function s(){u(""),a.cancel()}return{mount:function(){Kt(t).bind(c,"transitionend",(function(t){t.target===c&&r&&(s(),r())}))},start:function(e,c){var s=o.toPosition(e,!0),l=o.getPosition(),f=function(e){var r=n.rewindSpeed;if(t.is(Ke)&&r){var o=i.getIndex(!0),a=i.getEnd();if(0===o&&e>=a||o>=a&&0===e)return r}return n.speed}(e);xt(s-l)>=1&&f>=1?n.useScroll?a.scroll(s,f,!1,c):(u("transform "+f+"ms "+n.easing),o.translate(s,!0),r=c):(o.jump(e),c())},cancel:s}}var hn=function(){function t(e,n){var r;this.event=Kt(),this.Components={},this.state=(r=1,{set:function(t){r=t},is:function(t){return z(G(t),r)}}),this.splides=[],this._o={},this._E={};var o=q(e)?dt(document,e):e;wt(o,o+" is invalid."),this.root=o,n=$({label:at(o,fe)||"",labelledby:at(o,de)||""},ln,t.defaults,n||{});try{$(n,JSON.parse(at(o,gt)))}catch(t){wt(!1,"Invalid JSON")}this._o=Object.create($({},n))}var e,n,r=t.prototype;return r.mount=function(t,e){var n=this,r=this.state,o=this.Components;return wt(r.is([1,7]),"Already mounted!"),r.set(1),this._C=o,this._T=e||this._T||(this.is($e)?fn:dn),this._E=t||this._E,K(Q({},sn,this._E,{Transition:this._T}),(function(t,e){var r=t(n,o,n._o);o[e]=r,r.setup&&r.setup()})),K(o,(function(t){t.mount&&t.mount()})),this.emit(Nt),Y(this.root,Ie),r.set(3),this.emit(qt),this},r.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},r.go=function(t){return this._C.Controller.go(t),this},r.on=function(t,e){return this.event.on(t,e),this},r.off=function(t){return this.event.off(t),this},r.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(S(arguments,1))),this},r.add=function(t,e){return this._C.Slides.add(t,e),this},r.remove=function(t){return this._C.Slides.remove(t),this},r.is=function(t){return this._o.type===t},r.refresh=function(){return this.emit(Gt),this},r.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?Kt(this).on(qt,this.destroy.bind(this,t)):(K(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(Ht),e.destroy(),t&&x(this.splides),n.set(7)),this},e=t,(n=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&E(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),pn=hn;function vn(t){return vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},vn(t)}function yn(){yn=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof m?e:m,a=Object.create(i.prototype),c=new M(r||[]);return o(a,"_invoke",{value:k(t,n,c)}),a}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var d="suspendedStart",h="suspendedYield",p="executing",v="completed",y={};function m(){}function g(){}function w(){}var b={};s(b,a,(function(){return this}));var E=Object.getPrototypeOf,L=E&&E(E(A([])));L&&L!==n&&r.call(L,a)&&(b=L);var _=w.prototype=m.prototype=Object.create(b);function x(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function n(o,i,a,c){var u=f(t[o],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==vn(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return n("throw",t,a,c)}))}c(u.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,n,r){var o=d;return function(i,a){if(o===p)throw new Error("Generator is already running");if(o===v){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=P(c,r);if(u){if(u===y)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=f(e,n,r);if("normal"===s.type){if(o=r.done?v:h,s.arg===y)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=v,r.method="throw",r.arg=s.arg)}}}function P(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,P(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,y;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,y):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function A(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(vn(e)+" is not iterable")}return g.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:g,configurable:!0}),g.displayName=s(w,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,s(t,u,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},x(S.prototype),s(S.prototype,c,(function(){return this})),e.AsyncIterator=S,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new S(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(_),s(_,u,"Generator"),s(_,a,(function(){return this})),s(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=A,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),y}},e}function mn(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return gn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function gn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function wn(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function bn(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){wn(i,r,o,a,c,"next",t)}function c(t){wn(i,r,o,a,c,"throw",t)}a(void 0)}))}}pn.defaults={},pn.STATES=_;var En,Ln,_n,xn,Sn=document.querySelector(".articleContainer"),kn=document.querySelector(".newsSection__list");document.addEventListener("DOMContentLoaded",bn(yn().mark((function t(){var e,n,r,o,i,a;return yn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a=function(t){if(kn.innerHTML="",0===t.length)noResult.classList.remove("d-none");else{var e,n=mn(t);try{for(n.s();!(e=n.n()).done;){var r=w(e.value);kn.appendChild(r)}}catch(t){n.e(t)}finally{n.f()}}},i=function(t){var e=b(t);Sn.appendChild(e)},e=window.location.pathname.split("/"),n=e[e.length-1],r=[],t.prev=5,!n){t.next=13;break}return t.next=9,g(n);case 9:o=t.sent,i(o),t.next=14;break;case 13:console.log("articleId is undefined or null");case 14:t.next=19;break;case 16:t.prev=16,t.t0=t.catch(5),console.error("Error :",t.t0);case 19:return t.prev=19,t.next=22,m();case 22:r=t.sent,a(r),t.next=29;break;case 26:t.prev=26,t.t1=t.catch(19),console.error("Error in ExampleFile:",t.t1);case 29:kn&&new pn(".splide__article",{type:"slide",rewind:!0,autoplay:!1,perPage:3,arrows:!1,pagination:!1,pauseOnFocus:!0,updateOnMove:!0,drag:!0,swipe:!0,gap:72,focus:"left",breakpoints:{1120:{perPage:2},992:{perPage:1}}}).mount();case 30:case"end":return t.stop()}}),t,null,[[5,16],[19,26]])})))),n(368),n(416),En=document.querySelector(".formGeneral"),Ln=En.querySelector(".telegram"),_n=En.querySelector(".skype"),xn=En.querySelector(".form__info_one"),document.addEventListener("focusout",(function(t){"INPUT"===t.target.tagName&&(t.target.validity.valid?t.target.classList.remove("invalid"):t.target.classList.add("invalid"),""===Ln.value.trim()&&""===_n.value.trim()||(xn.style.opacity="0"))})),En.addEventListener("submit",(function(t){if(""===Ln.value.trim()&&""===_n.value.trim())t.preventDefault(),xn.style.opacity="1";else{t.preventDefault();var e=new FormData(En),n={};e.forEach((function(t,e){n[e]=t})),fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then((function(t){return t.json()})).then((function(t){console.log("Success:",t),En.reset();var e=document.querySelector(".successMessage");e.classList.remove("successMessage_hidden"),setTimeout((function(){e.classList.add("successMessage_hidden")}),1e3)})).catch((function(t){console.error("Error:",t)}))}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,