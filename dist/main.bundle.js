/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var t={368:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".form__affiliates"),e=document.querySelector(".form__advertisers"),n=document.getElementsByName("purpose");document.getElementById("advertiseModal").checked&&(t.style.display="none"),document.getElementById("affiliateModal").checked&&(e.style.display="none"),n.forEach((function(n){n.addEventListener("change",(function(){document.getElementById("advertiseModal").checked?(t.style.display="none",e.style.display="block"):document.getElementById("affiliateModal").checked?(e.style.display="none",t.style.display="block"):(t.style.display="block",e.style.display="block")}))}))}))},416:()=>{var t=document.querySelector(".formGeneral"),e=t.querySelectorAll(".form__radio"),n=t.querySelector(".location"),r=t.querySelector(".email");e.forEach((function(t){t.addEventListener("change",(function(){"affiliateModal"===t.value?(n.required=!1,r.required=!1):"advertiseModal"===t.value&&(n.required=!0,r.required=!0)}))}))},120:()=>{window.addEventListener("load",(function(){document.querySelector("body").classList.add("loaded")}))},236:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelectorAll(".scrollLink"),e=document.querySelector("body"),n=document.querySelector(".header__menu"),r=document.querySelector(".navigationPanel");null==t||t.forEach((function(t){t.addEventListener("click",(function(o){o.preventDefault();var i=t.getAttribute("href");"/"!==window.location.pathname&&(window.location.href="/"),e.style.overflowY="visible",r.classList.remove("visible"),n.classList.remove("active"),function(t){t=t.replace("/","");var e=document.querySelector(t);e&&e.scrollIntoView({behavior:"smooth"})}(i)}))}))}))}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(()=>{"use strict";function t(){var t,e,n;this.burger.addEventListener("click",this.handlerOpen),t=this.headerMenu,e=this.handlerBackdropClick,n=function(n){var r=n.target;t&&!t.contains(r)&&(null==e||e(n,t))},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function e(){this.headerMenu.classList.contains("visible")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function r(){this.headerMenu.classList.toggle("visible"),this.burger.classList.toggle("active"),this.toggleVerticalScroll()}function o(){this.headerMenu.classList.remove("visible"),this.burger.classList.remove("active"),this.toggleVerticalScroll()}function i(t){!this.headerMenu.classList.contains("visible")||t.target.closest(".header__mobile")||t.target.closest(".header__menu")||t.target.closest(".header-menu__top")||t.target.closest(".header-lang__wrapper")||this.handlerClose()}var a=document.querySelector(".header");function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function u(){u=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",l=i.toStringTag||"@@toStringTag";function f(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{f({},"")}catch(t){f=function(t,e,n){return t[e]=n}}function d(t,e,n,r){var i=e&&e.prototype instanceof w?e:w,a=Object.create(i.prototype),c=new j(r||[]);return o(a,"_invoke",{value:P(t,n,c)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=d;var p="suspendedStart",v="suspendedYield",m="executing",y="completed",g={};function w(){}function b(){}function L(){}var E={};f(E,a,(function(){return this}));var _=Object.getPrototypeOf,S=_&&_(_(N([])));S&&S!==n&&r.call(S,a)&&(E=S);var x=L.prototype=w.prototype=Object.create(E);function k(t){["next","throw","return"].forEach((function(e){f(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function n(o,i,a,u){var s=h(t[o],t,i);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==c(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(f).then((function(t){l.value=t,a(l)}),(function(t){return n("throw",t,a,u)}))}u(s.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function P(e,n,r){var o=p;return function(i,a){if(o===m)throw new Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=O(c,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=m;var s=h(e,n,r);if("normal"===s.type){if(o=r.done?y:v,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=y,r.method="throw",r.arg=s.arg)}}}function O(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,O(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function M(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function N(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(c(e)+" is not iterable")}return b.prototype=L,o(x,"constructor",{value:L,configurable:!0}),o(L,"constructor",{value:b,configurable:!0}),b.displayName=f(L,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,L):(t.__proto__=L,f(t,l,"GeneratorFunction")),t.prototype=Object.create(x),t},e.awrap=function(t){return{__await:t}},k(C.prototype),f(C.prototype,s,(function(){return this})),e.AsyncIterator=C,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new C(d(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},k(x),f(x,l,"Generator"),f(x,a,(function(){return this})),f(x,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=N,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:N(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}function s(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function l(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){s(i,r,o,a,c,"next",t)}function c(t){s(i,r,o,a,c,"throw",t)}a(void 0)}))}}a&&new function(n){this.node=n,this.body=document.querySelector("body"),this.burger=document.querySelector(".header__menu"),this.headerMenu=document.querySelector(".navigationPanel"),this.menuList=document.querySelector(".header-menu__List"),this.lang=document.querySelectorAll(".header__lang"),this.handlerOpen=r.bind(this),this.handlerClose=o.bind(this),this.listeners=t.bind(this),this.handlerBackdropClick=i.bind(this),this.toggleVerticalScroll=e.bind(this),this.listeners()}(a);var f=function(){var t=l(u().mark((function t(){var e,n;return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://dspartners.pro/api/news");case 3:if((e=t.sent).ok){t.next=6;break}throw new Error("Network response was not ok");case 6:return t.next=8,e.json();case 8:return n=t.sent,t.abrupt("return",n);case 12:throw t.prev=12,t.t0=t.catch(0),console.error("Error fetching data:",t.t0),t.t0;case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}(),d=function(){var t=l(u().mark((function t(){var e,n;return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://dspartners.pro/api/themes");case 3:if((e=t.sent).ok){t.next=6;break}throw new Error("Network response was not ok");case 6:return t.next=8,e.json();case 8:return n=t.sent,t.abrupt("return",n);case 12:throw t.prev=12,t.t0=t.catch(0),console.error("Error fetching data:",t.t0),t.t0;case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}();function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p="(prefers-reduced-motion: reduce)",v={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function m(t){t.length=0}function y(t,e,n){return Array.prototype.slice.call(t,e,n)}function g(t){return t.bind.apply(t,[null].concat(y(arguments,1)))}var w=setTimeout,b=function(){};function L(t){return requestAnimationFrame(t)}function E(t,e){return typeof e===t}function _(t){return!P(t)&&E("object",t)}var S=Array.isArray,x=g(E,"function"),k=g(E,"string"),C=g(E,"undefined");function P(t){return null===t}function O(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function M(t){return S(t)?t:[t]}function A(t,e){M(t).forEach(e)}function j(t,e){return t.indexOf(e)>-1}function N(t,e){return t.push.apply(t,M(e)),t}function q(t,e,n){t&&A(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function T(t,e){q(t,k(e)?e.split(" "):e,!0)}function I(t,e){A(e,t.appendChild.bind(t))}function D(t,e){A(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function F(t,e){return O(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function G(t,e){var n=t?y(t.children):[];return e?n.filter((function(t){return F(t,e)})):n}function z(t,e){return e?G(t,e)[0]:t.firstElementChild}var B=Object.keys;function H(t,e,n){return t&&(n?B(t).reverse():B(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function R(t){return y(arguments,1).forEach((function(e){H(e,(function(n,r){t[r]=e[r]}))})),t}function Y(t){return y(arguments,1).forEach((function(e){H(e,(function(e,n){S(e)?t[n]=e.slice():_(e)?t[n]=Y({},_(t[n])?t[n]:{},e):t[n]=e}))})),t}function W(t,e){A(e||B(t),(function(e){delete t[e]}))}function X(t,e){A(t,(function(t){A(e,(function(e){t&&t.removeAttribute(e)}))}))}function V(t,e,n){_(e)?H(e,(function(e,n){V(t,n,e)})):A(t,(function(t){P(n)||""===n?X(t,e):t.setAttribute(e,String(n))}))}function U(t,e,n){var r=document.createElement(t);return e&&(k(e)?T(r,e):V(r,e)),n&&I(n,r),r}function J(t,e,n){if(C(n))return getComputedStyle(t)[e];P(n)||(t.style[e]=""+n)}function K(t,e){J(t,"display",e)}function Q(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function $(t,e){return t.getAttribute(e)}function Z(t,e){return t&&t.classList.contains(e)}function tt(t){return t.getBoundingClientRect()}function et(t){A(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function nt(t){return z((new DOMParser).parseFromString(t,"text/html").body)}function rt(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function ot(t,e){return t&&t.querySelector(e)}function it(t,e){return e?y(t.querySelectorAll(e)):[]}function at(t,e){q(t,e,!1)}function ct(t){return t.timeStamp}function ut(t){return k(t)?t:t?t+"px":""}var st="splide",lt="data-"+st;function ft(t,e){if(!t)throw new Error("["+st+"] "+(e||""))}var dt=Math.min,ht=Math.max,pt=Math.floor,vt=Math.ceil,mt=Math.abs;function yt(t,e,n){return mt(t-e)<n}function gt(t,e,n,r){var o=dt(e,n),i=ht(e,n);return r?o<t&&t<i:o<=t&&t<=i}function wt(t,e,n){var r=dt(e,n),o=ht(e,n);return dt(ht(r,t),o)}function bt(t){return+(t>0)-+(t<0)}function Lt(t,e){return A(e,(function(e){t=t.replace("%s",""+e)})),t}function Et(t){return t<10?"0"+t:""+t}var _t={};function St(){var t=[];function e(t,e,n){A(t,(function(t){t&&A(e,(function(e){e.split(" ").forEach((function(e){var r=e.split(".");n(t,r[0],r[1])}))}))}))}return{bind:function(n,r,o,i){e(n,r,(function(e,n,r){var a="addEventListener"in e,c=a?e.removeEventListener.bind(e,n,o,i):e.removeListener.bind(e,o);a?e.addEventListener(n,o,i):e.addListener(o),t.push([e,n,r,o,c])}))},unbind:function(n,r,o){e(n,r,(function(e,n,r){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==r||o&&t[3]!==o)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var r;return"function"==typeof CustomEvent?r=new CustomEvent(e,{bubbles:!0,detail:n}):(r=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(r),r},destroy:function(){t.forEach((function(t){t[4]()})),m(t)}}}var xt="mounted",kt="ready",Ct="move",Pt="moved",Ot="click",Mt="refresh",At="updated",jt="resize",Nt="resized",qt="scroll",Tt="scrolled",It="destroy",Dt="navigation:mounted",Ft="autoplay:play",Gt="autoplay:pause",zt="lazyload:loaded",Bt="ei";function Ht(t){var e=t?t.event.bus:document.createDocumentFragment(),n=St();return t&&t.event.on(It,n.destroy),R(n,{bus:e,on:function(t,r){n.bind(e,M(t).join(" "),(function(t){r.apply(r,S(t.detail)?t.detail:[])}))},off:g(n.unbind,e),emit:function(t){n.dispatch(e,t,y(arguments,1))}})}function Rt(t,e,n,r){var o,i,a=Date.now,c=0,u=!0,s=0;function l(){if(!u){if(c=t?dt((a()-o)/t,1):1,n&&n(c),c>=1&&(e(),o=a(),r&&++s>=r))return f();i=L(l)}}function f(){u=!0}function d(){i&&cancelAnimationFrame(i),c=0,i=0,u=!0}return{start:function(e){e||d(),o=a()-(e?c*t:0),u=!1,i=L(l)},rewind:function(){o=a(),c=0,n&&n(c)},pause:f,cancel:d,set:function(e){t=e},isPaused:function(){return u}}}var Yt="Arrow",Wt=Yt+"Left",Xt=Yt+"Right",Vt=Yt+"Up",Ut=Yt+"Down",Jt="ttb",Kt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Vt,Xt],ArrowRight:[Ut,Wt]};var Qt="role",$t="tabindex",Zt="aria-",te=Zt+"controls",ee=Zt+"current",ne=Zt+"selected",re=Zt+"label",oe=Zt+"labelledby",ie=Zt+"hidden",ae=Zt+"orientation",ce=Zt+"roledescription",ue=Zt+"live",se=Zt+"busy",le=Zt+"atomic",fe=[Qt,$t,"disabled",te,ee,re,oe,ie,ae,ce],de=st+"__",he="is-",pe=st,ve=de+"track",me=de+"list",ye=de+"slide",ge=ye+"--clone",we=ye+"__container",be=de+"arrows",Le=de+"arrow",Ee=Le+"--prev",_e=Le+"--next",Se=de+"pagination",xe=Se+"__page",ke=de+"progress__bar",Ce=de+"toggle",Pe=de+"sr",Oe=he+"initialized",Me=he+"active",Ae=he+"prev",je=he+"next",Ne=he+"visible",qe=he+"loading",Te=he+"focus-in",Ie=he+"overflow",De=[Me,Ne,Ae,je,qe,Te,Ie],Fe={slide:ye,clone:ge,arrows:be,arrow:Le,prev:Ee,next:_e,pagination:Se,page:xe,spinner:de+"spinner"},Ge="touchstart mousedown",ze="touchmove mousemove",Be="touchend touchcancel mouseup click",He="slide",Re="loop",Ye="fade";var We=lt+"-interval",Xe={passive:!1,capture:!0},Ve={Spacebar:" ",Right:Xt,Left:Wt,Up:Vt,Down:Ut};function Ue(t){return t=k(t)?t:t.key,Ve[t]||t}var Je="keydown",Ke=lt+"-lazy",Qe=Ke+"-srcset",$e="["+Ke+"], ["+Qe+"]",Ze=[" ","Enter"],tn=Object.freeze({__proto__:null,Media:function(t,e,n){var r=t.state,o=n.breakpoints||{},i=n.reducedMotion||{},a=St(),c=[];function u(t){t&&a.destroy()}function s(t,e){var n=matchMedia(e);a.bind(n,"change",l),c.push([t,n])}function l(){var e=r.is(7),o=n.direction,i=c.reduce((function(t,e){return Y(t,e[1].matches?e[0]:{})}),{});W(n),f(i),n.destroy?t.destroy("completely"===n.destroy):e?(u(!0),t.mount()):o!==n.direction&&t.refresh()}function f(e,o,i){Y(n,e),o&&Y(Object.getPrototypeOf(n),e),!i&&r.is(1)||t.emit(At,n)}return{setup:function(){var t="min"===n.mediaQuery;B(o).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){s(o[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),s(i,p),l()},destroy:u,reduce:function(t){matchMedia(p).matches&&(t?Y(n,i):W(n,B(i)))},set:f}},Direction:function(t,e,n){return{resolve:function(t,e,r){var o="rtl"!==(r=r||n.direction)||e?r===Jt?0:-1:1;return Kt[t]&&Kt[t][o]||t.replace(/width|left|right/i,(function(t,e){var n=Kt[t.toLowerCase()][o]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var r,o,i,a=Ht(t),c=a.on,u=a.bind,s=t.root,l=n.i18n,f={},d=[],h=[],p=[];function v(){var t,e,i;r=w("."+ve),o=z(r,"."+me),ft(r&&o,"A track/list element is missing."),N(d,G(o,"."+ye+":not(."+ge+")")),H({arrows:be,pagination:Se,prev:Ee,next:_e,bar:ke,toggle:Ce},(function(t,e){f[e]=w("."+t)})),R(f,{root:s,track:r,list:o,slides:d}),e=s.id||""+(t=st)+Et(_t[t]=(_t[t]||0)+1),i=n.role,s.id=e,r.id=r.id||e+"-track",o.id=o.id||e+"-list",!$(s,Qt)&&"SECTION"!==s.tagName&&i&&V(s,Qt,i),V(s,ce,l.carousel),V(o,Qt,"presentation"),g()}function y(t){var e=fe.concat("style");m(d),at(s,h),at(r,p),X([r,o],e),X(s,t?e:["style",ce])}function g(){at(s,h),at(r,p),h=b(pe),p=b(ve),T(s,h),T(r,p),V(s,re,n.label),V(s,oe,n.labelledby)}function w(t){var e=ot(s,t);return e&&function(t,e){if(x(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!F(n,e);)n=n.parentElement;return n}(e,"."+pe)===s?e:void 0}function b(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===pe&&Me]}return R(f,{setup:v,mount:function(){c(Mt,y),c(Mt,v),c(At,g),u(document,Ge+" keydown",(function(t){i="keydown"===t.type}),{capture:!0}),u(s,"focusin",(function(){q(s,Te,!!i)}))},destroy:y})},Slides:function(t,e,n){var r=Ht(t),o=r.on,i=r.emit,a=r.bind,c=e.Elements,u=c.slides,s=c.list,l=[];function f(){u.forEach((function(t,e){h(t,e,-1)}))}function d(){v((function(t){t.destroy()})),m(l)}function h(e,n,r){var o=function(t,e,n,r){var o,i=Ht(t),a=i.on,c=i.emit,u=i.bind,s=t.Components,l=t.root,f=t.options,d=f.isNavigation,h=f.updateOnMove,p=f.i18n,v=f.pagination,m=f.slideFocus,y=s.Direction.resolve,w=$(r,"style"),b=$(r,re),L=n>-1,E=z(r,"."+we);function _(){var o=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");V(r,re,Lt(p.slideX,(L?n:e)+1)),V(r,te,o),V(r,Qt,m?"button":""),m&&X(r,ce)}function S(){o||x()}function x(){if(!o){var n=t.index;(i=k())!==Z(r,Me)&&(q(r,Me,i),V(r,ee,d&&i||""),c(i?"active":"inactive",C)),function(){var e=function(){if(t.is(Ye))return k();var e=tt(s.Elements.track),n=tt(r),o=y("left",!0),i=y("right",!0);return pt(e[o])<=vt(n[o])&&pt(n[i])<=vt(e[i])}(),n=!e&&(!k()||L);if(t.state.is([4,5])||V(r,ie,n||""),V(it(r,f.focusableNodes||""),$t,n?-1:""),m&&V(r,$t,n?-1:0),e!==Z(r,Ne)&&(q(r,Ne,e),c(e?"visible":"hidden",C)),!e&&document.activeElement===r){var o=s.Slides.getAt(t.index);o&&Q(o.slide)}}(),q(r,Ae,e===n-1),q(r,je,e===n+1)}var i}function k(){var r=t.index;return r===e||f.cloneStatus&&r===n}var C={index:e,slideIndex:n,slide:r,container:E,isClone:L,mount:function(){L||(r.id=l.id+"-slide"+Et(e+1),V(r,Qt,v?"tabpanel":"group"),V(r,ce,p.slide),V(r,re,b||Lt(p.slideLabel,[e+1,t.length]))),u(r,"click",g(c,Ot,C)),u(r,"keydown",g(c,"sk",C)),a([Pt,"sh",Tt],x),a(Dt,_),h&&a(Ct,S)},destroy:function(){o=!0,i.destroy(),at(r,De),X(r,fe),V(r,"style",w),V(r,re,b||"")},update:x,style:function(t,e,n){J(n&&E||r,t,e)},isWithin:function(n,r){var o=mt(n-e);return L||!f.rewind&&!t.is(Re)||(o=dt(o,t.length-o)),o<=r}};return C}(t,n,r,e);o.mount(),l.push(o),l.sort((function(t,e){return t.index-e.index}))}function p(t){return t?y((function(t){return!t.isClone})):l}function v(t,e){p(e).forEach(t)}function y(t){return l.filter(x(t)?t:function(e){return k(t)?F(e.slide,t):j(M(t),e.index)})}return{mount:function(){f(),o(Mt,d),o(Mt,f)},destroy:d,update:function(){v((function(t){t.update()}))},register:h,get:p,getIn:function(t){var r=e.Controller,o=r.toIndex(t),i=r.hasFocus()?1:n.perPage;return y((function(t){return gt(t.index,o,o+i-1)}))},getAt:function(t){return y(t)[0]},add:function(t,e){A(t,(function(t){if(k(t)&&(t=nt(t)),O(t)){var r=u[e];r?D(t,r):I(s,t),T(t,n.classes.slide),o=t,c=g(i,jt),l=it(o,"img"),(f=l.length)?l.forEach((function(t){a(t,"load error",(function(){--f||c()}))})):c()}var o,c,l,f})),i(Mt)},remove:function(t){et(y(t).map((function(t){return t.slide}))),i(Mt)},forEach:v,filter:y,style:function(t,e,n){v((function(r){r.style(t,e,n)}))},getLength:function(t){return t?u.length:l.length},isEnough:function(){return l.length>n.perPage}}},Layout:function(t,e,n){var r,o,i,a=Ht(t),c=a.on,u=a.bind,s=a.emit,l=e.Slides,f=e.Direction.resolve,d=e.Elements,h=d.root,p=d.track,v=d.list,m=l.getAt,y=l.style;function w(){r=n.direction===Jt,J(h,"maxWidth",ut(n.width)),J(p,f("paddingLeft"),L(!1)),J(p,f("paddingRight"),L(!0)),b(!0)}function b(t){var e,a=tt(h);(t||o.width!==a.width||o.height!==a.height)&&(J(p,"height",(e="",r&&(ft(e=E(),"height or heightRatio is missing."),e="calc("+e+" - "+L(!1)+" - "+L(!0)+")"),e)),y(f("marginRight"),ut(n.gap)),y("width",n.autoWidth?null:ut(n.fixedWidth)||(r?"":S())),y("height",ut(n.fixedHeight)||(r?n.autoHeight?null:S():E()),!0),o=a,s(Nt),i!==(i=M())&&(q(h,Ie,i),s("overflow",i)))}function L(t){var e=n.padding,r=f(t?"right":"left");return e&&ut(e[r]||(_(e)?0:e))||"0px"}function E(){return ut(n.height||tt(v).width*n.heightRatio)}function S(){var t=ut(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function x(){return tt(v)[f("width")]}function k(t,e){var n=m(t||0);return n?tt(n.slide)[f("width")]+(e?0:O()):0}function C(t,e){var n=m(t);if(n){var r=tt(n.slide)[f("right")],o=tt(v)[f("left")];return mt(r-o)+(e?0:O())}return 0}function P(e){return C(t.length-1)-C(0)+k(0,e)}function O(){var t=m(0);return t&&parseFloat(J(t.slide,f("marginRight")))||0}function M(){return t.is(Ye)||P(!0)>x()}return{mount:function(){var t,e;w(),u(window,"resize load",(t=g(s,jt),e=Rt(0,t,null,1),function(){e.isPaused()&&e.start()})),c([At,Mt],w),c(jt,b)},resize:b,listSize:x,slideSize:k,sliderSize:P,totalSize:C,getPadding:function(t){return parseFloat(J(p,f("padding"+(t?"Right":"Left"))))||0},isOverflow:M}},Clones:function(t,e,n){var r,o=Ht(t),i=o.on,a=e.Elements,c=e.Slides,u=e.Direction.resolve,s=[];function l(){i(Mt,f),i([At,jt],h),(r=p())&&(function(e){var r=c.get().slice(),o=r.length;if(o){for(;r.length<e;)N(r,r);N(r.slice(-e),r.slice(0,e)).forEach((function(i,u){var l=u<e,f=function(e,r){var o=e.cloneNode(!0);return T(o,n.classes.clone),o.id=t.root.id+"-clone"+Et(r+1),o}(i.slide,u);l?D(f,r[0].slide):I(a.list,f),N(s,f),c.register(f,u-e+(l?0:o),i.index)}))}}(r),e.Layout.resize(!0))}function f(){d(),l()}function d(){et(s),m(s),o.destroy()}function h(){var t=p();r!==t&&(r<t||!t)&&o.emit(Mt)}function p(){var r=n.clones;if(t.is(Re)){if(C(r)){var o=n[u("fixedWidth")]&&e.Layout.slideSize(0);r=o&&vt(tt(a.track)[u("width")]/o)||n[u("autoWidth")]&&t.length||2*n.perPage}}else r=0;return r}return{mount:l,destroy:d}},Move:function(t,e,n){var r,o=Ht(t),i=o.on,a=o.emit,c=t.state.set,u=e.Layout,s=u.slideSize,l=u.getPadding,f=u.totalSize,d=u.listSize,h=u.sliderSize,p=e.Direction,v=p.resolve,m=p.orient,y=e.Elements,g=y.list,w=y.track;function b(){e.Controller.isBusy()||(e.Scroll.cancel(),L(t.index),e.Slides.update())}function L(t){E(k(t,!0))}function E(n,r){if(!t.is(Ye)){var o=r?n:function(n){if(t.is(Re)){var r=x(n),o=r>e.Controller.getEnd();(r<0||o)&&(n=_(n,o))}return n}(n);J(g,"transform","translate"+v("X")+"("+o+"px)"),n!==o&&a("sh")}}function _(t,e){var n=t-O(e),r=h();return t-m(r*(vt(mt(n)/r)||1))*(e?1:-1)}function S(){E(P(),!0),r.cancel()}function x(t){for(var n=e.Slides.get(),r=0,o=1/0,i=0;i<n.length;i++){var a=n[i].index,c=mt(k(a,!0)-t);if(!(c<=o))break;o=c,r=a}return r}function k(e,r){var o=m(f(e-1)-function(t){var e=n.focus;return"center"===e?(d()-s(t,!0))/2:+e*s(t)||0}(e));return r?function(e){return n.trimSpace&&t.is(He)&&(e=wt(e,0,m(h(!0)-d()))),e}(o):o}function P(){var t=v("left");return tt(g)[t]-tt(w)[t]+m(l(!1))}function O(t){return k(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){r=e.Transition,i([xt,Nt,At,Mt],b)},move:function(t,e,n,o){var i,u;t!==e&&(i=t>n,u=m(_(P(),i)),i?u>=0:u<=g[v("scrollWidth")]-tt(w)[v("width")])&&(S(),E(_(P(),t>n),!0)),c(4),a(Ct,e,n,t),r.start(e,(function(){c(3),a(Pt,e,n,t),o&&o()}))},jump:L,translate:E,shift:_,cancel:S,toIndex:x,toPosition:k,getPosition:P,getLimit:O,exceededLimit:function(t,e){e=C(e)?P():e;var n=!0!==t&&m(e)<m(O(!1)),r=!1!==t&&m(e)>m(O(!0));return n||r},reposition:b}},Controller:function(t,e,n){var r,o,i,a,c=Ht(t),u=c.on,s=c.emit,l=e.Move,f=l.getPosition,d=l.getLimit,h=l.toPosition,p=e.Slides,v=p.isEnough,m=p.getLength,y=n.omitEnd,w=t.is(Re),b=t.is(He),L=g(O,!1),E=g(O,!0),_=n.start||0,S=_;function x(){o=m(!0),i=n.perMove,a=n.perPage,r=j();var t=wt(_,0,y?r:o-1);t!==_&&(_=t,l.reposition())}function P(){r!==j()&&s(Bt)}function O(t,e){var n=i||(I()?1:a),o=M(_+n*(t?-1:1),_,!(i||I()));return-1===o&&b&&!yt(f(),d(!t),1)?t?0:r:e?o:A(o)}function M(e,c,u){if(v()||I()){var s=function(e){if(b&&"move"===n.trimSpace&&e!==_)for(var r=f();r===h(e,!0)&&gt(e,0,t.length-1,!n.rewind);)e<_?--e:++e;return e}(e);s!==e&&(c=e,e=s,u=!1),e<0||e>r?e=i||!gt(0,e,c,!0)&&!gt(r,c,e,!0)?w?u?e<0?-(o%a||a):o:e:n.rewind?e<0?r:0:-1:N(q(e)):u&&e!==c&&(e=N(q(c)+(e<c?-1:1)))}else e=-1;return e}function A(t){return w?(t+o)%o||0:t}function j(){for(var t=o-(I()||w&&i?1:a);y&&t-- >0;)if(h(o-1,!0)!==h(t,!0)){t++;break}return wt(t,0,o-1)}function N(t){return wt(I()?t:a*t,0,r)}function q(t){return I()?dt(t,r):pt((t>=r?o-1:t)/a)}function T(t){t!==_&&(S=_,_=t)}function I(){return!C(n.focus)||n.isNavigation}function D(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){x(),u([At,Mt,Bt],x),u(Nt,P)},go:function(t,e,n){if(!D()){var o=function(t){var e=_;if(k(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],o=n[1],i=n[2];"+"===o||"-"===o?e=M(_+ +(""+o+(+i||1)),_):">"===o?e=i?N(+i):L(!0):"<"===o&&(e=E(!0))}else e=w?t:wt(t,0,r);return e}(t),i=A(o);i>-1&&(e||i!==_)&&(T(i),l.move(o,i,S,n))}},scroll:function(t,n,o,i){e.Scroll.scroll(t,n,o,(function(){var t=A(l.toIndex(f()));T(y?dt(t,r):t),i&&i()}))},getNext:L,getPrev:E,getAdjacent:O,getEnd:j,setIndex:T,getIndex:function(t){return t?S:_},toIndex:N,toPage:q,toDest:function(t){var e=l.toIndex(t);return b?wt(e,0,r):e},hasFocus:I,isBusy:D}},Arrows:function(t,e,n){var r,o,i=Ht(t),a=i.on,c=i.bind,u=i.emit,s=n.classes,l=n.i18n,f=e.Elements,d=e.Controller,h=f.arrows,p=f.track,v=h,m=f.prev,y=f.next,w={};function b(){var t;!(t=n.arrows)||m&&y||(v=h||U("div",s.arrows),m=S(!0),y=S(!1),r=!0,I(v,[m,y]),!h&&D(v,p)),m&&y&&(R(w,{prev:m,next:y}),K(v,t?"":"none"),T(v,o=be+"--"+n.direction),t&&(a([xt,Pt,Mt,Tt,Bt],x),c(y,"click",g(_,">")),c(m,"click",g(_,"<")),x(),V([m,y],te,p.id),u("arrows:mounted",m,y))),a(At,L)}function L(){E(),b()}function E(){i.destroy(),at(v,o),r?(et(h?[m,y]:v),m=y=null):X([m,y],fe)}function _(t){d.go(t,!0)}function S(t){return nt('<button class="'+s.arrow+" "+(t?s.prev:s.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function x(){if(m&&y){var e=t.index,n=d.getPrev(),r=d.getNext(),o=n>-1&&e<n?l.last:l.prev,i=r>-1&&e>r?l.first:l.next;m.disabled=n<0,y.disabled=r<0,V(m,re,o),V(y,re,i),u("arrows:updated",m,y,n,r)}}return{arrows:w,mount:b,destroy:E,update:x}},Autoplay:function(t,e,n){var r,o,i=Ht(t),a=i.on,c=i.bind,u=i.emit,s=Rt(n.interval,t.go.bind(t,">"),(function(t){var e=f.bar;e&&J(e,"width",100*t+"%"),u("autoplay:playing",t)})),l=s.isPaused,f=e.Elements,d=e.Elements,h=d.root,p=d.toggle,v=n.autoplay,m="pause"===v;function y(){l()&&e.Slides.isEnough()&&(s.start(!n.resetProgress),o=r=m=!1,b(),u(Ft))}function g(t){void 0===t&&(t=!0),m=!!t,b(),l()||(s.pause(),u(Gt))}function w(){m||(r||o?g(!1):y())}function b(){p&&(q(p,Me,!m),V(p,re,n.i18n[m?"play":"pause"]))}function L(t){var r=e.Slides.getAt(t);s.set(r&&+$(r.slide,We)||n.interval)}return{mount:function(){v&&(n.pauseOnHover&&c(h,"mouseenter mouseleave",(function(t){r="mouseenter"===t.type,w()})),n.pauseOnFocus&&c(h,"focusin focusout",(function(t){o="focusin"===t.type,w()})),p&&c(p,"click",(function(){m?y():g(!0)})),a([Ct,qt,Mt],s.rewind),a(Ct,L),p&&V(p,te,f.track.id),m||y(),b())},destroy:s.cancel,play:y,pause:g,isPaused:l}},Cover:function(t,e,n){var r=Ht(t).on;function o(t){e.Slides.forEach((function(e){var n=z(e.container||e.slide,"img");n&&n.src&&i(t,n,e)}))}function i(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),K(e,t?"none":"")}return{mount:function(){n.cover&&(r(zt,g(i,!0)),r([xt,At,Mt],g(o,!0)))},destroy:g(o,!1)}},Scroll:function(t,e,n){var r,o,i=Ht(t),a=i.on,c=i.emit,u=t.state.set,s=e.Move,l=s.getPosition,f=s.getLimit,d=s.exceededLimit,h=s.translate,p=t.is(He),v=1;function m(t,n,i,a,f){var h=l();if(b(),i&&(!p||!d())){var m=e.Layout.sliderSize(),L=bt(t)*m*pt(mt(t)/m)||0;t=s.toPosition(e.Controller.toDest(t%m))+L}var E=yt(h,t,1);v=1,n=E?0:n||ht(mt(t-h)/1.5,800),o=a,r=Rt(n,y,g(w,h,t,f),1),u(5),c(qt),r.start()}function y(){u(3),o&&o(),c(Tt)}function w(t,e,r,i){var a,c,u=l(),s=(t+(e-t)*(a=i,(c=n.easingFunc)?c(a):1-Math.pow(1-a,4))-u)*v;h(u+s),p&&!r&&d()&&(v*=.6,mt(s)<10&&m(f(d(!0)),600,!1,o,!0))}function b(){r&&r.cancel()}function L(){r&&!r.isPaused()&&(b(),y())}return{mount:function(){a(Ct,b),a([At,Mt],L)},destroy:b,scroll:m,cancel:L}},Drag:function(t,e,n){var r,o,i,a,c,u,s,l,f=Ht(t),d=f.on,h=f.emit,p=f.bind,v=f.unbind,m=t.state,y=e.Move,g=e.Scroll,w=e.Controller,L=e.Elements.track,E=e.Media.reduce,S=e.Direction,x=S.resolve,k=S.orient,C=y.getPosition,P=y.exceededLimit,O=!1;function M(){var t=n.drag;H(!t),a="free"===t}function A(t){if(u=!1,!s){var e=B(t);r=t.target,o=n.noDrag,F(r,"."+xe+", ."+Le)||o&&F(r,o)||!e&&t.button||(w.isBusy()?rt(t,!0):(l=e?L:window,c=m.is([4,5]),i=null,p(l,ze,j,Xe),p(l,Be,N,Xe),y.cancel(),g.cancel(),T(t)))}var r,o}function j(e){if(m.is(6)||(m.set(6),h("drag")),e.cancelable)if(c){y.translate(r+I(e)/(O&&t.is(He)?5:1));var o=D(e)>200,i=O!==(O=P());(o||i)&&T(e),u=!0,h("dragging"),rt(e)}else(function(t){return mt(I(t))>mt(I(t,!0))})(e)&&(c=function(t){var e=n.dragMinThreshold,r=_(e),o=r&&e.mouse||0,i=(r?e.touch:+e)||10;return mt(I(t))>(B(t)?i:o)}(e),rt(e))}function N(r){m.is(6)&&(m.set(3),h("dragged")),c&&(function(r){var o=function(e){if(t.is(Re)||!O){var n=D(e);if(n&&n<200)return I(e)/n}return 0}(r),i=function(t){return C()+bt(t)*dt(mt(t)*(n.flickPower||600),a?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(o),c=n.rewind&&n.rewindByDrag;E(!1),a?w.scroll(i,0,n.snap):t.is(Ye)?w.go(k(bt(o))<0?c?"<":"-":c?">":"+"):t.is(He)&&O&&c?w.go(P(!0)?">":"<"):w.go(w.toDest(i),!0),E(!0)}(r),rt(r)),v(l,ze,j),v(l,Be,N),c=!1}function q(t){!s&&u&&rt(t,!0)}function T(t){i=o,o=t,r=C()}function I(t,e){return z(t,e)-z(G(t),e)}function D(t){return ct(t)-ct(G(t))}function G(t){return o===t&&i||o}function z(t,e){return(B(t)?t.changedTouches[0]:t)["page"+x(e?"Y":"X")]}function B(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function H(t){s=t}return{mount:function(){p(L,ze,b,Xe),p(L,Be,b,Xe),p(L,Ge,A,Xe),p(L,"click",q,{capture:!0}),p(L,"dragstart",rt),d([xt,At],M)},disable:H,isDragging:function(){return c}}},Keyboard:function(t,e,n){var r,o,i=Ht(t),a=i.on,c=i.bind,u=i.unbind,s=t.root,l=e.Direction.resolve;function f(){var t=n.keyboard;t&&(r="global"===t?window:s,c(r,Je,p))}function d(){u(r,Je)}function h(){var t=o;o=!0,w((function(){o=t}))}function p(e){if(!o){var n=Ue(e);n===l(Wt)?t.go("<"):n===l(Xt)&&t.go(">")}}return{mount:function(){f(),a(At,d),a(At,f),a(Ct,h)},destroy:d,disable:function(t){o=t}}},LazyLoad:function(t,e,n){var r=Ht(t),o=r.on,i=r.off,a=r.bind,c=r.emit,u="sequential"===n.lazyLoad,s=[Pt,Tt],l=[];function f(){m(l),e.Slides.forEach((function(t){it(t.slide,$e).forEach((function(e){var r=$(e,Ke),o=$(e,Qe);if(r!==e.src||o!==e.srcset){var i=n.classes.spinner,a=e.parentElement,c=z(a,"."+i)||U("span",i,a);l.push([e,t,c]),e.src||K(e,"none")}}))})),u?v():(i(s),o(s,d),d())}function d(){(l=l.filter((function(e){var r=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,r)||h(e)}))).length||i(s)}function h(t){var e=t[0];T(t[1].slide,qe),a(e,"load error",g(p,t)),V(e,"src",$(e,Ke)),V(e,"srcset",$(e,Qe)),X(e,Ke),X(e,Qe)}function p(t,e){var n=t[0],r=t[1];at(r.slide,qe),"error"!==e.type&&(et(t[2]),K(n,""),c(zt,n,r),c(jt)),u&&v()}function v(){l.length&&h(l.shift())}return{mount:function(){n.lazyLoad&&(f(),o(Mt,f))},destroy:g(m,l),check:d}},Pagination:function(t,e,n){var r,o,i=Ht(t),a=i.on,c=i.emit,u=i.bind,s=e.Slides,l=e.Elements,f=e.Controller,d=f.hasFocus,h=f.getIndex,p=f.go,v=e.Direction.resolve,w=l.pagination,b=[];function L(){r&&(et(w?y(r.children):r),at(r,o),m(b),r=null),i.destroy()}function E(t){p(">"+t,!0)}function _(t,e){var n=b.length,r=Ue(e),o=S(),i=-1;r===v(Xt,!1,o)?i=++t%n:r===v(Wt,!1,o)?i=(--t+n)%n:"Home"===r?i=0:"End"===r&&(i=n-1);var a=b[i];a&&(Q(a.button),p(">"+i),rt(e,!0))}function S(){return n.paginationDirection||n.direction}function x(t){return b[f.toPage(t)]}function k(){var t=x(h(!0)),e=x(h());if(t){var n=t.button;at(n,Me),X(n,ne),V(n,$t,-1)}if(e){var o=e.button;T(o,Me),V(o,ne,!0),V(o,$t,"")}c("pagination:updated",{list:r,items:b},t,e)}return{items:b,mount:function e(){L(),a([At,Mt,Bt],e);var i=n.pagination;w&&K(w,i?"":"none"),i&&(a([Ct,qt,Tt],k),function(){var e=t.length,i=n.classes,a=n.i18n,c=n.perPage,h=d()?f.getEnd()+1:vt(e/c);T(r=w||U("ul",i.pagination,l.track.parentElement),o=Se+"--"+S()),V(r,Qt,"tablist"),V(r,re,a.select),V(r,ae,S()===Jt?"vertical":"");for(var p=0;p<h;p++){var v=U("li",null,r),m=U("button",{class:i.page,type:"button"},v),y=s.getIn(p).map((function(t){return t.slide.id})),L=!d()&&c>1?a.pageX:a.slideX;u(m,"click",g(E,p)),n.paginationKeyboard&&u(m,"keydown",g(_,p)),V(v,Qt,"presentation"),V(m,Qt,"tab"),V(m,te,y.join(" ")),V(m,re,Lt(L,p+1)),V(m,$t,-1),b.push({li:v,button:m,page:p})}}(),k(),c("pagination:mounted",{list:r,items:b},x(t.index)))},destroy:L,getAt:x,update:k}},Sync:function(t,e,n){var r=n.isNavigation,o=n.slideFocus,i=[];function a(){var e,n;t.splides.forEach((function(e){e.isParent||(u(t,e.splide),u(e.splide,t))})),r&&((n=(e=Ht(t)).on)(Ot,l),n("sk",f),n([xt,At],s),i.push(e),e.emit(Dt,t.splides))}function c(){i.forEach((function(t){t.destroy()})),m(i)}function u(t,e){var n=Ht(t);n.on(Ct,(function(t,n,r){e.go(e.is(Re)?r:t)})),i.push(n)}function s(){V(e.Elements.list,ae,n.direction===Jt?"vertical":"")}function l(e){t.go(e.index)}function f(t,e){j(Ze,Ue(e))&&(l(t),rt(e))}return{setup:g(e.Media.set,{slideFocus:C(o)?r:o},!0),mount:a,destroy:c,remount:function(){c(),a()}}},Wheel:function(t,e,n){var r=Ht(t).bind,o=0;function i(r){if(r.cancelable){var i=r.deltaY,a=i<0,c=ct(r),u=n.wheelMinThreshold||0,s=n.wheelSleep||0;mt(i)>u&&c-o>s&&(t.go(a?"<":">"),o=c),function(r){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(r)}(a)&&rt(r)}}return{mount:function(){n.wheel&&r(e.Elements.track,"wheel",i,Xe)}}},Live:function(t,e,n){var r=Ht(t).on,o=e.Elements.track,i=n.live&&!n.isNavigation,a=U("span",Pe),c=Rt(90,g(u,!1));function u(t){V(o,se,t),t?(I(o,a),c.start()):(et(a),c.cancel())}function s(t){i&&V(o,ue,t?"off":"polite")}return{mount:function(){i&&(s(!e.Autoplay.isPaused()),V(o,le,!0),a.textContent="…",r(Ft,g(s,!0)),r(Gt,g(s,!1)),r([Pt,Tt],g(u,!0)))},disable:s,destroy:function(){X(o,[ue,le,se]),et(a)}}}}),en={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Fe,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function nn(t,e,n){var r=e.Slides;function o(){r.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){Ht(t).on([xt,Mt],o)},start:function(t,e){r.style("transition","opacity "+n.speed+"ms "+n.easing),w(e)},cancel:b}}function rn(t,e,n){var r,o=e.Move,i=e.Controller,a=e.Scroll,c=e.Elements.list,u=g(J,c,"transition");function s(){u(""),a.cancel()}return{mount:function(){Ht(t).bind(c,"transitionend",(function(t){t.target===c&&r&&(s(),r())}))},start:function(e,c){var s=o.toPosition(e,!0),l=o.getPosition(),f=function(e){var r=n.rewindSpeed;if(t.is(He)&&r){var o=i.getIndex(!0),a=i.getEnd();if(0===o&&e>=a||o>=a&&0===e)return r}return n.speed}(e);mt(s-l)>=1&&f>=1?n.useScroll?a.scroll(s,f,!1,c):(u("transform "+f+"ms "+n.easing),o.translate(s,!0),r=c):(o.jump(e),c())},cancel:s}}var on=function(){function t(e,n){var r;this.event=Ht(),this.Components={},this.state=(r=1,{set:function(t){r=t},is:function(t){return j(M(t),r)}}),this.splides=[],this._o={},this._E={};var o=k(e)?ot(document,e):e;ft(o,o+" is invalid."),this.root=o,n=Y({label:$(o,re)||"",labelledby:$(o,oe)||""},en,t.defaults,n||{});try{Y(n,JSON.parse($(o,lt)))}catch(t){ft(!1,"Invalid JSON")}this._o=Object.create(Y({},n))}var e,n,r=t.prototype;return r.mount=function(t,e){var n=this,r=this.state,o=this.Components;return ft(r.is([1,7]),"Already mounted!"),r.set(1),this._C=o,this._T=e||this._T||(this.is(Ye)?nn:rn),this._E=t||this._E,H(R({},tn,this._E,{Transition:this._T}),(function(t,e){var r=t(n,o,n._o);o[e]=r,r.setup&&r.setup()})),H(o,(function(t){t.mount&&t.mount()})),this.emit(xt),T(this.root,Oe),r.set(3),this.emit(kt),this},r.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},r.go=function(t){return this._C.Controller.go(t),this},r.on=function(t,e){return this.event.on(t,e),this},r.off=function(t){return this.event.off(t),this},r.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(y(arguments,1))),this},r.add=function(t,e){return this._C.Slides.add(t,e),this},r.remove=function(t){return this._C.Slides.remove(t),this},r.is=function(t){return this._o.type===t},r.refresh=function(){return this.emit(Mt),this},r.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?Ht(this).on(kt,this.destroy.bind(this,t)):(H(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(It),e.destroy(),t&&m(this.splides),n.set(7)),this},e=t,(n=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&h(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),an=on;an.defaults={},an.STATES=v;var cn=function(t){null!==t&&new an(".splide",{type:"slide",rewind:!0,autoplay:!1,perPage:3,arrows:!1,pagination:!1,pauseOnFocus:!0,updateOnMove:!0,drag:!0,swipe:!0,gap:72,focus:"left",breakpoints:{1120:{perPage:2},992:{perPage:1}}}).mount()};function un(t){var e=document.createElement("li");return e.className="splide__slide",e.innerHTML="\n        <a href='/news/".concat(t.id,'\'>\n            <div class="news__image" style="background-image: url(\'').concat(t.image,'\');"></div>\n            <h3 class="news__heading typography typography__subtitle">').concat(t.title,'</h3>\n            <div class="news__wrapper">\n                <p class="typography news__data">').concat(t.pub_date,'</p>\n                <p class="typography news__time">').concat(t.read_time,' min reading</p>\n            </div>\n            <p class="typography news__text">').concat(t.content,'</p>\n            <p class="typography news__theme">').concat(t.theme,"</p>\n        </a>"),e}function sn(t){return sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sn(t)}function ln(){ln=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof y?e:y,a=Object.create(i.prototype),c=new M(r||[]);return o(a,"_invoke",{value:k(t,n,c)}),a}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var d="suspendedStart",h="suspendedYield",p="executing",v="completed",m={};function y(){}function g(){}function w(){}var b={};s(b,a,(function(){return this}));var L=Object.getPrototypeOf,E=L&&L(L(A([])));E&&E!==n&&r.call(E,a)&&(b=E);var _=w.prototype=y.prototype=Object.create(b);function S(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function n(o,i,a,c){var u=f(t[o],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==sn(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return n("throw",t,a,c)}))}c(u.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,n,r){var o=d;return function(i,a){if(o===p)throw new Error("Generator is already running");if(o===v){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=C(c,r);if(u){if(u===m)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=f(e,n,r);if("normal"===s.type){if(o=r.done?v:h,s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=v,r.method="throw",r.arg=s.arg)}}}function C(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function A(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(sn(e)+" is not iterable")}return g.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:g,configurable:!0}),g.displayName=s(w,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,s(t,u,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},S(x.prototype),s(x.prototype,c,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new x(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(_),s(_,u,"Generator"),s(_,a,(function(){return this})),s(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=A,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function fn(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return dn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dn(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function dn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function hn(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function pn(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){hn(i,r,o,a,c,"next",t)}function c(t){hn(i,r,o,a,c,"throw",t)}a(void 0)}))}}document.addEventListener("DOMContentLoaded",pn(ln().mark((function t(){var e,n,r,o,i,a,c,u,s,l,h,p,v,m,y,g,w,b,L,E,_;return ln().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return _=function(t){var e=s.filter((function(e){return e.title.toLowerCase().includes(t.toLowerCase())||e.content.toLowerCase().includes(t.toLowerCase())||e.theme.toLowerCase().includes(t.toLowerCase())}));p(e)},E=function(){return(E=pn(ln().mark((function t(e){var n;return ln().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=s.filter((function(t){return t.theme===e})),p(n);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)},L=function(t){return E.apply(this,arguments)},b=function(){v(),p(s)},w=function(){n.innerHTML="",v(),c&&n&&cn();var t,e=o.value.trim();_(e),""!==e&&(o.classList.add("newsSection__input_open"),null===(t=u)||void 0===t||t.classList.remove("newsSection__theme_active"),null==r||r.classList.remove("d-none"))},g=function(t,e){n.innerHTML="",u&&u.classList.remove("newsSection__theme_active"),u=e,e.classList.add("newsSection__theme_active"),null==r||r.classList.remove("d-none"),L(t),m()},y=function(){v(),m(),p(s)},m=function(){o.value="",o.classList.remove("newsSection__input_open"),o.blur()},v=function(){u&&u.classList.remove("newsSection__theme_active"),u=null,null==r||r.classList.add("d-none")},p=function(t){if(n.innerHTML="",0===t.length)a.classList.remove("d-none");else{var e,r=fn(t);try{for(r.s();!(e=r.n()).done;){var o=un(e.value);n.appendChild(o),a.classList.add("d-none"),c&&n&&cn()}}catch(t){r.e(t)}finally{r.f()}}},h=function(t){if(t&&t.themes&&Array.isArray(t.themes)){var n,r=fn(t.themes);try{var o=function(){var t=n.value,r=document.createElement("li");r.className="newsSection__themeWrapper";var o=document.createElement("button");o.className="typography newsSection__theme",o.textContent=t,o.addEventListener("click",(function(){return g(t,o)})),r.appendChild(o),e.appendChild(r)};for(r.s();!(n=r.n()).done;)o()}catch(t){r.e(t)}finally{r.f()}}else console.error("Invalid themes data in themes.json")},e=document.querySelector(".newsSection__themes"),n=document.querySelector(".newsSection__list"),r=document.getElementById("resetFilter"),o=document.querySelector(".newsSection__input"),i=document.querySelector(".newsSection__cross"),a=document.querySelector(".newsSection__noResult"),c=document.querySelector(".splide"),u=null,s=[],l=[],t.prev=21,t.next=24,f();case 24:return s=t.sent,t.next=27,d();case 27:l=t.sent,h(l),null==r||r.addEventListener("click",y),o.addEventListener("input",w),o.addEventListener("focus",b),i.addEventListener("click",y),p(s),t.next=39;break;case 36:t.prev=36,t.t0=t.catch(21),console.error("Error in ExampleFile:",t.t0);case 39:case"end":return t.stop()}}),t,null,[[21,36]])}))));function vn(){var t,e,n,r=this;this.buttonsModal.forEach((function(t){t.addEventListener("click",r.handlerOpen)})),this.close.forEach((function(t){t.addEventListener("click",r.handlerClose)})),this.form.forEach((function(t){t.addEventListener("submit",r.handlerClose)})),t=this.form,e=this.handlerBackdropClick,n=function(n){var r=n.target;t instanceof NodeList&&Array.from(t).some((function(t){return t.contains(r)}))||t instanceof Element&&t.contains(r)||null==e||e(n,t)},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function mn(){this.node.classList.contains("modalw_is-open")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function yn(t){var e,n=t.target.classList.contains("buttonModalw"),r=t.target.classList.contains("button__hr");n&&(r?this.formGeneral.classList.add("d-none"):null===(e=this.formHr)||void 0===e||e.classList.add("d-none"),this.node.classList.add("modalw_is-open"),this.toggleVerticalScroll())}function gn(){var t;this.node.classList.remove("modalw_is-open"),null===(t=this.formHr)||void 0===t||t.classList.remove("d-none"),this.formGeneral.classList.remove("d-none"),this.toggleVerticalScroll()}function wn(t){this.node.classList.contains("modalw_is-open")&&!t.target.classList.contains("buttonModalw")&&this.handlerClose()}var bn=document.querySelector(".modalw");function Ln(t){var e=document.querySelector(t),n=e.querySelector(".telegram"),r=e.querySelector(".skype"),o=e.querySelector(".form__info_one");document.addEventListener("focusout",(function(t){"INPUT"===t.target.tagName&&(t.target.validity.valid?t.target.classList.remove("invalid"):t.target.classList.add("invalid"),""===n.value.trim()&&""===r.value.trim()||(o.style.opacity="0"))})),e.addEventListener("submit",(function(t){if(""===n.value.trim()&&""===r.value.trim())t.preventDefault(),o.style.opacity="1";else{t.preventDefault();var i=new FormData(e),a={};i.forEach((function(t,e){a[e]=t})),fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then((function(t){return t.json()})).then((function(t){console.log("Success:",t),e.reset();var n=document.querySelector(".successMessage");n.classList.remove("successMessage_hidden"),setTimeout((function(){n.classList.add("successMessage_hidden")}),1e3)})).catch((function(t){console.error("Error:",t)}))}}))}bn&&new function(t){this.node=t,this.body=document.querySelector("body"),this.form=document.querySelectorAll(".modalwForm"),this.formHr=t.querySelector(".formHr"),this.formGeneral=document.querySelector(".formGeneral"),this.buttonsModal=document.querySelectorAll(".buttonModalw"),this.close=document.querySelectorAll(".modalw__close"),this.handlerOpen=yn.bind(this),this.handlerClose=gn.bind(this),this.listeners=vn.bind(this),this.handlerBackdropClick=wn.bind(this),this.toggleVerticalScroll=mn.bind(this),this.listeners()}(bn),n(120),n(236),n(368),n(416),Ln(".formGeneral"),Ln(".bizdevForm"),Ln(".affiliateForm"),Ln(".formHr")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,