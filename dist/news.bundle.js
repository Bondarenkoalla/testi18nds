/*! For license information please see news.bundle.js.LICENSE.txt */
(()=>{var t={368:()=>{document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".form__affiliates"),e=document.querySelector(".form__advertisers"),n=document.getElementsByName("purpose");document.getElementById("advertiseModal").checked&&(t.style.display="none"),document.getElementById("affiliateModal").checked&&(e.style.display="none"),n.forEach((function(n){n.addEventListener("change",(function(){document.getElementById("advertiseModal").checked?(t.style.display="none",e.style.display="block"):document.getElementById("affiliateModal").checked?(e.style.display="none",t.style.display="block"):(t.style.display="block",e.style.display="block")}))}))}))},416:()=>{var t=document.querySelector(".formGeneral"),e=t.querySelectorAll(".form__radio"),n=t.querySelector(".location"),r=t.querySelector(".email");e.forEach((function(t){t.addEventListener("change",(function(){"affiliateModal"===t.value?(n.required=!1,r.required=!1):"advertiseModal"===t.value&&(n.required=!0,r.required=!0)}))}))},120:()=>{window.addEventListener("load",(function(){document.querySelector("body").classList.add("loaded")}))}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(){e=function(){return r};var n,r={},o=Object.prototype,i=o.hasOwnProperty,a=Object.defineProperty||function(t,e,n){t[e]=n.value},c="function"==typeof Symbol?Symbol:{},u=c.iterator||"@@iterator",s=c.asyncIterator||"@@asyncIterator",l=c.toStringTag||"@@toStringTag";function f(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{f({},"")}catch(n){f=function(t,e,n){return t[e]=n}}function d(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,i=Object.create(o.prototype),c=new A(r||[]);return a(i,"_invoke",{value:P(t,n,c)}),i}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}r.wrap=d;var p="suspendedStart",v="suspendedYield",y="executing",m="completed",g={};function w(){}function b(){}function E(){}var L={};f(L,u,(function(){return this}));var _=Object.getPrototypeOf,S=_&&_(_(N([])));S&&S!==o&&i.call(S,u)&&(L=S);var x=E.prototype=w.prototype=Object.create(L);function k(t){["next","throw","return"].forEach((function(e){f(t,e,(function(t){return this._invoke(e,t)}))}))}function C(e,n){function r(o,a,c,u){var s=h(e[o],e,a);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==t(f)&&i.call(f,"__await")?n.resolve(f.__await).then((function(t){r("next",t,c,u)}),(function(t){r("throw",t,c,u)})):n.resolve(f).then((function(t){l.value=t,c(l)}),(function(t){return r("throw",t,c,u)}))}u(s.arg)}var o;a(this,"_invoke",{value:function(t,e){function i(){return new n((function(n,o){r(t,e,n,o)}))}return o=o?o.then(i,i):i()}})}function P(t,e,r){var o=p;return function(i,a){if(o===y)throw new Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:n,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=O(c,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===p)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=y;var s=h(t,e,r);if("normal"===s.type){if(o=r.done?m:v,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function O(t,e){var r=e.method,o=t.iterator[r];if(o===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=h(o,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,g;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,g):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function M(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function N(e){if(e||""===e){var r=e[u];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function t(){for(;++o<e.length;)if(i.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=n,t.done=!0,t};return a.next=a}}throw new TypeError(t(e)+" is not iterable")}return b.prototype=E,a(x,"constructor",{value:E,configurable:!0}),a(E,"constructor",{value:b,configurable:!0}),b.displayName=f(E,l,"GeneratorFunction"),r.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},r.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,f(t,l,"GeneratorFunction")),t.prototype=Object.create(x),t},r.awrap=function(t){return{__await:t}},k(C.prototype),f(C.prototype,s,(function(){return this})),r.AsyncIterator=C,r.async=function(t,e,n,o,i){void 0===i&&(i=Promise);var a=new C(d(t,e,n,o),i);return r.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},k(x),f(x,l,"Generator"),f(x,u,(function(){return this})),f(x,"toString",(function(){return"[object Generator]"})),r.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},r.values=N,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],c=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),s=i.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),j(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:N(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),g}},r}function r(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function o(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function c(t){r(a,o,i,c,u,"next",t)}function u(t){r(a,o,i,c,u,"throw",t)}c(void 0)}))}}var i=function(){var t=o(e().mark((function t(){var n,r;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://dspartners.pro/api/news");case 3:if((n=t.sent).ok){t.next=6;break}throw new Error("Network response was not ok");case 6:return t.next=8,n.json();case 8:return r=t.sent,t.abrupt("return",r);case 12:throw t.prev=12,t.t0=t.catch(0),console.error("Error fetching data:",t.t0),t.t0;case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}(),a=function(){var t=o(e().mark((function t(){var n,r;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://dspartners.pro/api/themes");case 3:if((n=t.sent).ok){t.next=6;break}throw new Error("Network response was not ok");case 6:return t.next=8,n.json();case 8:return r=t.sent,t.abrupt("return",r);case 12:throw t.prev=12,t.t0=t.catch(0),console.error("Error fetching data:",t.t0),t.t0;case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}();function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u="(prefers-reduced-motion: reduce)",s={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function l(t){t.length=0}function f(t,e,n){return Array.prototype.slice.call(t,e,n)}function d(t){return t.bind.apply(t,[null].concat(f(arguments,1)))}var h=setTimeout,p=function(){};function v(t){return requestAnimationFrame(t)}function y(t,e){return typeof e===t}function m(t){return!L(t)&&y("object",t)}var g=Array.isArray,w=d(y,"function"),b=d(y,"string"),E=d(y,"undefined");function L(t){return null===t}function _(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function S(t){return g(t)?t:[t]}function x(t,e){S(t).forEach(e)}function k(t,e){return t.indexOf(e)>-1}function C(t,e){return t.push.apply(t,S(e)),t}function P(t,e,n){t&&x(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function O(t,e){P(t,b(e)?e.split(" "):e,!0)}function M(t,e){x(e,t.appendChild.bind(t))}function j(t,e){x(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function A(t,e){return _(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function N(t,e){var n=t?f(t.children):[];return e?n.filter((function(t){return A(t,e)})):n}function T(t,e){return e?N(t,e)[0]:t.firstElementChild}var q=Object.keys;function I(t,e,n){return t&&(n?q(t).reverse():q(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function D(t){return f(arguments,1).forEach((function(e){I(e,(function(n,r){t[r]=e[r]}))})),t}function F(t){return f(arguments,1).forEach((function(e){I(e,(function(e,n){g(e)?t[n]=e.slice():m(e)?t[n]=F({},m(t[n])?t[n]:{},e):t[n]=e}))})),t}function G(t,e){x(e||q(t),(function(e){delete t[e]}))}function z(t,e){x(t,(function(t){x(e,(function(e){t&&t.removeAttribute(e)}))}))}function B(t,e,n){m(e)?I(e,(function(e,n){B(t,n,e)})):x(t,(function(t){L(n)||""===n?z(t,e):t.setAttribute(e,String(n))}))}function R(t,e,n){var r=document.createElement(t);return e&&(b(e)?O(r,e):B(r,e)),n&&M(n,r),r}function H(t,e,n){if(E(n))return getComputedStyle(t)[e];L(n)||(t.style[e]=""+n)}function Y(t,e){H(t,"display",e)}function W(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function X(t,e){return t.getAttribute(e)}function V(t,e){return t&&t.classList.contains(e)}function U(t){return t.getBoundingClientRect()}function J(t){x(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function K(t){return T((new DOMParser).parseFromString(t,"text/html").body)}function Q(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function $(t,e){return t&&t.querySelector(e)}function Z(t,e){return e?f(t.querySelectorAll(e)):[]}function tt(t,e){P(t,e,!1)}function et(t){return t.timeStamp}function nt(t){return b(t)?t:t?t+"px":""}var rt="splide",ot="data-"+rt;function it(t,e){if(!t)throw new Error("["+rt+"] "+(e||""))}var at=Math.min,ct=Math.max,ut=Math.floor,st=Math.ceil,lt=Math.abs;function ft(t,e,n){return lt(t-e)<n}function dt(t,e,n,r){var o=at(e,n),i=ct(e,n);return r?o<t&&t<i:o<=t&&t<=i}function ht(t,e,n){var r=at(e,n),o=ct(e,n);return at(ct(r,t),o)}function pt(t){return+(t>0)-+(t<0)}function vt(t,e){return x(e,(function(e){t=t.replace("%s",""+e)})),t}function yt(t){return t<10?"0"+t:""+t}var mt={};function gt(){var t=[];function e(t,e,n){x(t,(function(t){t&&x(e,(function(e){e.split(" ").forEach((function(e){var r=e.split(".");n(t,r[0],r[1])}))}))}))}return{bind:function(n,r,o,i){e(n,r,(function(e,n,r){var a="addEventListener"in e,c=a?e.removeEventListener.bind(e,n,o,i):e.removeListener.bind(e,o);a?e.addEventListener(n,o,i):e.addListener(o),t.push([e,n,r,o,c])}))},unbind:function(n,r,o){e(n,r,(function(e,n,r){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==r||o&&t[3]!==o)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var r;return"function"==typeof CustomEvent?r=new CustomEvent(e,{bubbles:!0,detail:n}):(r=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(r),r},destroy:function(){t.forEach((function(t){t[4]()})),l(t)}}}var wt="mounted",bt="ready",Et="move",Lt="moved",_t="click",St="refresh",xt="updated",kt="resize",Ct="resized",Pt="scroll",Ot="scrolled",Mt="destroy",jt="navigation:mounted",At="autoplay:play",Nt="autoplay:pause",Tt="lazyload:loaded",qt="ei";function It(t){var e=t?t.event.bus:document.createDocumentFragment(),n=gt();return t&&t.event.on(Mt,n.destroy),D(n,{bus:e,on:function(t,r){n.bind(e,S(t).join(" "),(function(t){r.apply(r,g(t.detail)?t.detail:[])}))},off:d(n.unbind,e),emit:function(t){n.dispatch(e,t,f(arguments,1))}})}function Dt(t,e,n,r){var o,i,a=Date.now,c=0,u=!0,s=0;function l(){if(!u){if(c=t?at((a()-o)/t,1):1,n&&n(c),c>=1&&(e(),o=a(),r&&++s>=r))return f();i=v(l)}}function f(){u=!0}function d(){i&&cancelAnimationFrame(i),c=0,i=0,u=!0}return{start:function(e){e||d(),o=a()-(e?c*t:0),u=!1,i=v(l)},rewind:function(){o=a(),c=0,n&&n(c)},pause:f,cancel:d,set:function(e){t=e},isPaused:function(){return u}}}var Ft="Arrow",Gt=Ft+"Left",zt=Ft+"Right",Bt=Ft+"Up",Rt=Ft+"Down",Ht="ttb",Yt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Bt,zt],ArrowRight:[Rt,Gt]};var Wt="role",Xt="tabindex",Vt="aria-",Ut=Vt+"controls",Jt=Vt+"current",Kt=Vt+"selected",Qt=Vt+"label",$t=Vt+"labelledby",Zt=Vt+"hidden",te=Vt+"orientation",ee=Vt+"roledescription",ne=Vt+"live",re=Vt+"busy",oe=Vt+"atomic",ie=[Wt,Xt,"disabled",Ut,Jt,Qt,$t,Zt,te,ee],ae=rt+"__",ce="is-",ue=rt,se=ae+"track",le=ae+"list",fe=ae+"slide",de=fe+"--clone",he=fe+"__container",pe=ae+"arrows",ve=ae+"arrow",ye=ve+"--prev",me=ve+"--next",ge=ae+"pagination",we=ge+"__page",be=ae+"progress__bar",Ee=ae+"toggle",Le=ae+"sr",_e=ce+"initialized",Se=ce+"active",xe=ce+"prev",ke=ce+"next",Ce=ce+"visible",Pe=ce+"loading",Oe=ce+"focus-in",Me=ce+"overflow",je=[Se,Ce,xe,ke,Pe,Oe,Me],Ae={slide:fe,clone:de,arrows:pe,arrow:ve,prev:ye,next:me,pagination:ge,page:we,spinner:ae+"spinner"},Ne="touchstart mousedown",Te="touchmove mousemove",qe="touchend touchcancel mouseup click",Ie="slide",De="loop",Fe="fade";var Ge=ot+"-interval",ze={passive:!1,capture:!0},Be={Spacebar:" ",Right:zt,Left:Gt,Up:Bt,Down:Rt};function Re(t){return t=b(t)?t:t.key,Be[t]||t}var He="keydown",Ye=ot+"-lazy",We=Ye+"-srcset",Xe="["+Ye+"], ["+We+"]",Ve=[" ","Enter"],Ue=Object.freeze({__proto__:null,Media:function(t,e,n){var r=t.state,o=n.breakpoints||{},i=n.reducedMotion||{},a=gt(),c=[];function s(t){t&&a.destroy()}function l(t,e){var n=matchMedia(e);a.bind(n,"change",f),c.push([t,n])}function f(){var e=r.is(7),o=n.direction,i=c.reduce((function(t,e){return F(t,e[1].matches?e[0]:{})}),{});G(n),d(i),n.destroy?t.destroy("completely"===n.destroy):e?(s(!0),t.mount()):o!==n.direction&&t.refresh()}function d(e,o,i){F(n,e),o&&F(Object.getPrototypeOf(n),e),!i&&r.is(1)||t.emit(xt,n)}return{setup:function(){var t="min"===n.mediaQuery;q(o).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){l(o[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),l(i,u),f()},destroy:s,reduce:function(t){matchMedia(u).matches&&(t?F(n,i):G(n,q(i)))},set:d}},Direction:function(t,e,n){return{resolve:function(t,e,r){var o="rtl"!==(r=r||n.direction)||e?r===Ht?0:-1:1;return Yt[t]&&Yt[t][o]||t.replace(/width|left|right/i,(function(t,e){var n=Yt[t.toLowerCase()][o]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var r,o,i,a=It(t),c=a.on,u=a.bind,s=t.root,f=n.i18n,d={},h=[],p=[],v=[];function y(){var t,e,i;r=b("."+se),o=T(r,"."+le),it(r&&o,"A track/list element is missing."),C(h,N(o,"."+fe+":not(."+de+")")),I({arrows:pe,pagination:ge,prev:ye,next:me,bar:be,toggle:Ee},(function(t,e){d[e]=b("."+t)})),D(d,{root:s,track:r,list:o,slides:h}),e=s.id||""+(t=rt)+yt(mt[t]=(mt[t]||0)+1),i=n.role,s.id=e,r.id=r.id||e+"-track",o.id=o.id||e+"-list",!X(s,Wt)&&"SECTION"!==s.tagName&&i&&B(s,Wt,i),B(s,ee,f.carousel),B(o,Wt,"presentation"),g()}function m(t){var e=ie.concat("style");l(h),tt(s,p),tt(r,v),z([r,o],e),z(s,t?e:["style",ee])}function g(){tt(s,p),tt(r,v),p=E(ue),v=E(se),O(s,p),O(r,v),B(s,Qt,n.label),B(s,$t,n.labelledby)}function b(t){var e=$(s,t);return e&&function(t,e){if(w(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!A(n,e);)n=n.parentElement;return n}(e,"."+ue)===s?e:void 0}function E(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===ue&&Se]}return D(d,{setup:y,mount:function(){c(St,m),c(St,y),c(xt,g),u(document,Ne+" keydown",(function(t){i="keydown"===t.type}),{capture:!0}),u(s,"focusin",(function(){P(s,Oe,!!i)}))},destroy:m})},Slides:function(t,e,n){var r=It(t),o=r.on,i=r.emit,a=r.bind,c=e.Elements,u=c.slides,s=c.list,f=[];function h(){u.forEach((function(t,e){v(t,e,-1)}))}function p(){m((function(t){t.destroy()})),l(f)}function v(e,n,r){var o=function(t,e,n,r){var o,i=It(t),a=i.on,c=i.emit,u=i.bind,s=t.Components,l=t.root,f=t.options,h=f.isNavigation,p=f.updateOnMove,v=f.i18n,y=f.pagination,m=f.slideFocus,g=s.Direction.resolve,w=X(r,"style"),b=X(r,Qt),E=n>-1,L=T(r,"."+he);function _(){var o=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");B(r,Qt,vt(v.slideX,(E?n:e)+1)),B(r,Ut,o),B(r,Wt,m?"button":""),m&&z(r,ee)}function S(){o||x()}function x(){if(!o){var n=t.index;(i=k())!==V(r,Se)&&(P(r,Se,i),B(r,Jt,h&&i||""),c(i?"active":"inactive",C)),function(){var e=function(){if(t.is(Fe))return k();var e=U(s.Elements.track),n=U(r),o=g("left",!0),i=g("right",!0);return ut(e[o])<=st(n[o])&&ut(n[i])<=st(e[i])}(),n=!e&&(!k()||E);if(t.state.is([4,5])||B(r,Zt,n||""),B(Z(r,f.focusableNodes||""),Xt,n?-1:""),m&&B(r,Xt,n?-1:0),e!==V(r,Ce)&&(P(r,Ce,e),c(e?"visible":"hidden",C)),!e&&document.activeElement===r){var o=s.Slides.getAt(t.index);o&&W(o.slide)}}(),P(r,xe,e===n-1),P(r,ke,e===n+1)}var i}function k(){var r=t.index;return r===e||f.cloneStatus&&r===n}var C={index:e,slideIndex:n,slide:r,container:L,isClone:E,mount:function(){E||(r.id=l.id+"-slide"+yt(e+1),B(r,Wt,y?"tabpanel":"group"),B(r,ee,v.slide),B(r,Qt,b||vt(v.slideLabel,[e+1,t.length]))),u(r,"click",d(c,_t,C)),u(r,"keydown",d(c,"sk",C)),a([Lt,"sh",Ot],x),a(jt,_),p&&a(Et,S)},destroy:function(){o=!0,i.destroy(),tt(r,je),z(r,ie),B(r,"style",w),B(r,Qt,b||"")},update:x,style:function(t,e,n){H(n&&L||r,t,e)},isWithin:function(n,r){var o=lt(n-e);return E||!f.rewind&&!t.is(De)||(o=at(o,t.length-o)),o<=r}};return C}(t,n,r,e);o.mount(),f.push(o),f.sort((function(t,e){return t.index-e.index}))}function y(t){return t?g((function(t){return!t.isClone})):f}function m(t,e){y(e).forEach(t)}function g(t){return f.filter(w(t)?t:function(e){return b(t)?A(e.slide,t):k(S(t),e.index)})}return{mount:function(){h(),o(St,p),o(St,h)},destroy:p,update:function(){m((function(t){t.update()}))},register:v,get:y,getIn:function(t){var r=e.Controller,o=r.toIndex(t),i=r.hasFocus()?1:n.perPage;return g((function(t){return dt(t.index,o,o+i-1)}))},getAt:function(t){return g(t)[0]},add:function(t,e){x(t,(function(t){if(b(t)&&(t=K(t)),_(t)){var r=u[e];r?j(t,r):M(s,t),O(t,n.classes.slide),o=t,c=d(i,kt),l=Z(o,"img"),(f=l.length)?l.forEach((function(t){a(t,"load error",(function(){--f||c()}))})):c()}var o,c,l,f})),i(St)},remove:function(t){J(g(t).map((function(t){return t.slide}))),i(St)},forEach:m,filter:g,style:function(t,e,n){m((function(r){r.style(t,e,n)}))},getLength:function(t){return t?u.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(t,e,n){var r,o,i,a=It(t),c=a.on,u=a.bind,s=a.emit,l=e.Slides,f=e.Direction.resolve,h=e.Elements,p=h.root,v=h.track,y=h.list,g=l.getAt,w=l.style;function b(){r=n.direction===Ht,H(p,"maxWidth",nt(n.width)),H(v,f("paddingLeft"),L(!1)),H(v,f("paddingRight"),L(!0)),E(!0)}function E(t){var e,a=U(p);(t||o.width!==a.width||o.height!==a.height)&&(H(v,"height",(e="",r&&(it(e=_(),"height or heightRatio is missing."),e="calc("+e+" - "+L(!1)+" - "+L(!0)+")"),e)),w(f("marginRight"),nt(n.gap)),w("width",n.autoWidth?null:nt(n.fixedWidth)||(r?"":S())),w("height",nt(n.fixedHeight)||(r?n.autoHeight?null:S():_()),!0),o=a,s(Ct),i!==(i=j())&&(P(p,Me,i),s("overflow",i)))}function L(t){var e=n.padding,r=f(t?"right":"left");return e&&nt(e[r]||(m(e)?0:e))||"0px"}function _(){return nt(n.height||U(y).width*n.heightRatio)}function S(){var t=nt(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function x(){return U(y)[f("width")]}function k(t,e){var n=g(t||0);return n?U(n.slide)[f("width")]+(e?0:M()):0}function C(t,e){var n=g(t);if(n){var r=U(n.slide)[f("right")],o=U(y)[f("left")];return lt(r-o)+(e?0:M())}return 0}function O(e){return C(t.length-1)-C(0)+k(0,e)}function M(){var t=g(0);return t&&parseFloat(H(t.slide,f("marginRight")))||0}function j(){return t.is(Fe)||O(!0)>x()}return{mount:function(){var t,e;b(),u(window,"resize load",(t=d(s,kt),e=Dt(0,t,null,1),function(){e.isPaused()&&e.start()})),c([xt,St],b),c(kt,E)},resize:E,listSize:x,slideSize:k,sliderSize:O,totalSize:C,getPadding:function(t){return parseFloat(H(v,f("padding"+(t?"Right":"Left"))))||0},isOverflow:j}},Clones:function(t,e,n){var r,o=It(t),i=o.on,a=e.Elements,c=e.Slides,u=e.Direction.resolve,s=[];function f(){i(St,d),i([xt,kt],p),(r=v())&&(function(e){var r=c.get().slice(),o=r.length;if(o){for(;r.length<e;)C(r,r);C(r.slice(-e),r.slice(0,e)).forEach((function(i,u){var l=u<e,f=function(e,r){var o=e.cloneNode(!0);return O(o,n.classes.clone),o.id=t.root.id+"-clone"+yt(r+1),o}(i.slide,u);l?j(f,r[0].slide):M(a.list,f),C(s,f),c.register(f,u-e+(l?0:o),i.index)}))}}(r),e.Layout.resize(!0))}function d(){h(),f()}function h(){J(s),l(s),o.destroy()}function p(){var t=v();r!==t&&(r<t||!t)&&o.emit(St)}function v(){var r=n.clones;if(t.is(De)){if(E(r)){var o=n[u("fixedWidth")]&&e.Layout.slideSize(0);r=o&&st(U(a.track)[u("width")]/o)||n[u("autoWidth")]&&t.length||2*n.perPage}}else r=0;return r}return{mount:f,destroy:h}},Move:function(t,e,n){var r,o=It(t),i=o.on,a=o.emit,c=t.state.set,u=e.Layout,s=u.slideSize,l=u.getPadding,f=u.totalSize,d=u.listSize,h=u.sliderSize,p=e.Direction,v=p.resolve,y=p.orient,m=e.Elements,g=m.list,w=m.track;function b(){e.Controller.isBusy()||(e.Scroll.cancel(),L(t.index),e.Slides.update())}function L(t){_(C(t,!0))}function _(n,r){if(!t.is(Fe)){var o=r?n:function(n){if(t.is(De)){var r=k(n),o=r>e.Controller.getEnd();(r<0||o)&&(n=S(n,o))}return n}(n);H(g,"transform","translate"+v("X")+"("+o+"px)"),n!==o&&a("sh")}}function S(t,e){var n=t-O(e),r=h();return t-y(r*(st(lt(n)/r)||1))*(e?1:-1)}function x(){_(P(),!0),r.cancel()}function k(t){for(var n=e.Slides.get(),r=0,o=1/0,i=0;i<n.length;i++){var a=n[i].index,c=lt(C(a,!0)-t);if(!(c<=o))break;o=c,r=a}return r}function C(e,r){var o=y(f(e-1)-function(t){var e=n.focus;return"center"===e?(d()-s(t,!0))/2:+e*s(t)||0}(e));return r?function(e){return n.trimSpace&&t.is(Ie)&&(e=ht(e,0,y(h(!0)-d()))),e}(o):o}function P(){var t=v("left");return U(g)[t]-U(w)[t]+y(l(!1))}function O(t){return C(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){r=e.Transition,i([wt,Ct,xt,St],b)},move:function(t,e,n,o){var i,u;t!==e&&(i=t>n,u=y(S(P(),i)),i?u>=0:u<=g[v("scrollWidth")]-U(w)[v("width")])&&(x(),_(S(P(),t>n),!0)),c(4),a(Et,e,n,t),r.start(e,(function(){c(3),a(Lt,e,n,t),o&&o()}))},jump:L,translate:_,shift:S,cancel:x,toIndex:k,toPosition:C,getPosition:P,getLimit:O,exceededLimit:function(t,e){e=E(e)?P():e;var n=!0!==t&&y(e)<y(O(!1)),r=!1!==t&&y(e)>y(O(!0));return n||r},reposition:b}},Controller:function(t,e,n){var r,o,i,a,c=It(t),u=c.on,s=c.emit,l=e.Move,f=l.getPosition,h=l.getLimit,p=l.toPosition,v=e.Slides,y=v.isEnough,m=v.getLength,g=n.omitEnd,w=t.is(De),L=t.is(Ie),_=d(O,!1),S=d(O,!0),x=n.start||0,k=x;function C(){o=m(!0),i=n.perMove,a=n.perPage,r=A();var t=ht(x,0,g?r:o-1);t!==x&&(x=t,l.reposition())}function P(){r!==A()&&s(qt)}function O(t,e){var n=i||(I()?1:a),o=M(x+n*(t?-1:1),x,!(i||I()));return-1===o&&L&&!ft(f(),h(!t),1)?t?0:r:e?o:j(o)}function M(e,c,u){if(y()||I()){var s=function(e){if(L&&"move"===n.trimSpace&&e!==x)for(var r=f();r===p(e,!0)&&dt(e,0,t.length-1,!n.rewind);)e<x?--e:++e;return e}(e);s!==e&&(c=e,e=s,u=!1),e<0||e>r?e=i||!dt(0,e,c,!0)&&!dt(r,c,e,!0)?w?u?e<0?-(o%a||a):o:e:n.rewind?e<0?r:0:-1:N(T(e)):u&&e!==c&&(e=N(T(c)+(e<c?-1:1)))}else e=-1;return e}function j(t){return w?(t+o)%o||0:t}function A(){for(var t=o-(I()||w&&i?1:a);g&&t-- >0;)if(p(o-1,!0)!==p(t,!0)){t++;break}return ht(t,0,o-1)}function N(t){return ht(I()?t:a*t,0,r)}function T(t){return I()?at(t,r):ut((t>=r?o-1:t)/a)}function q(t){t!==x&&(k=x,x=t)}function I(){return!E(n.focus)||n.isNavigation}function D(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){C(),u([xt,St,qt],C),u(Ct,P)},go:function(t,e,n){if(!D()){var o=function(t){var e=x;if(b(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],o=n[1],i=n[2];"+"===o||"-"===o?e=M(x+ +(""+o+(+i||1)),x):">"===o?e=i?N(+i):_(!0):"<"===o&&(e=S(!0))}else e=w?t:ht(t,0,r);return e}(t),i=j(o);i>-1&&(e||i!==x)&&(q(i),l.move(o,i,k,n))}},scroll:function(t,n,o,i){e.Scroll.scroll(t,n,o,(function(){var t=j(l.toIndex(f()));q(g?at(t,r):t),i&&i()}))},getNext:_,getPrev:S,getAdjacent:O,getEnd:A,setIndex:q,getIndex:function(t){return t?k:x},toIndex:N,toPage:T,toDest:function(t){var e=l.toIndex(t);return L?ht(e,0,r):e},hasFocus:I,isBusy:D}},Arrows:function(t,e,n){var r,o,i=It(t),a=i.on,c=i.bind,u=i.emit,s=n.classes,l=n.i18n,f=e.Elements,h=e.Controller,p=f.arrows,v=f.track,y=p,m=f.prev,g=f.next,w={};function b(){var t;!(t=n.arrows)||m&&g||(y=p||R("div",s.arrows),m=S(!0),g=S(!1),r=!0,M(y,[m,g]),!p&&j(y,v)),m&&g&&(D(w,{prev:m,next:g}),Y(y,t?"":"none"),O(y,o=pe+"--"+n.direction),t&&(a([wt,Lt,St,Ot,qt],x),c(g,"click",d(_,">")),c(m,"click",d(_,"<")),x(),B([m,g],Ut,v.id),u("arrows:mounted",m,g))),a(xt,E)}function E(){L(),b()}function L(){i.destroy(),tt(y,o),r?(J(p?[m,g]:y),m=g=null):z([m,g],ie)}function _(t){h.go(t,!0)}function S(t){return K('<button class="'+s.arrow+" "+(t?s.prev:s.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function x(){if(m&&g){var e=t.index,n=h.getPrev(),r=h.getNext(),o=n>-1&&e<n?l.last:l.prev,i=r>-1&&e>r?l.first:l.next;m.disabled=n<0,g.disabled=r<0,B(m,Qt,o),B(g,Qt,i),u("arrows:updated",m,g,n,r)}}return{arrows:w,mount:b,destroy:L,update:x}},Autoplay:function(t,e,n){var r,o,i=It(t),a=i.on,c=i.bind,u=i.emit,s=Dt(n.interval,t.go.bind(t,">"),(function(t){var e=f.bar;e&&H(e,"width",100*t+"%"),u("autoplay:playing",t)})),l=s.isPaused,f=e.Elements,d=e.Elements,h=d.root,p=d.toggle,v=n.autoplay,y="pause"===v;function m(){l()&&e.Slides.isEnough()&&(s.start(!n.resetProgress),o=r=y=!1,b(),u(At))}function g(t){void 0===t&&(t=!0),y=!!t,b(),l()||(s.pause(),u(Nt))}function w(){y||(r||o?g(!1):m())}function b(){p&&(P(p,Se,!y),B(p,Qt,n.i18n[y?"play":"pause"]))}function E(t){var r=e.Slides.getAt(t);s.set(r&&+X(r.slide,Ge)||n.interval)}return{mount:function(){v&&(n.pauseOnHover&&c(h,"mouseenter mouseleave",(function(t){r="mouseenter"===t.type,w()})),n.pauseOnFocus&&c(h,"focusin focusout",(function(t){o="focusin"===t.type,w()})),p&&c(p,"click",(function(){y?m():g(!0)})),a([Et,Pt,St],s.rewind),a(Et,E),p&&B(p,Ut,f.track.id),y||m(),b())},destroy:s.cancel,play:m,pause:g,isPaused:l}},Cover:function(t,e,n){var r=It(t).on;function o(t){e.Slides.forEach((function(e){var n=T(e.container||e.slide,"img");n&&n.src&&i(t,n,e)}))}function i(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),Y(e,t?"none":"")}return{mount:function(){n.cover&&(r(Tt,d(i,!0)),r([wt,xt,St],d(o,!0)))},destroy:d(o,!1)}},Scroll:function(t,e,n){var r,o,i=It(t),a=i.on,c=i.emit,u=t.state.set,s=e.Move,l=s.getPosition,f=s.getLimit,h=s.exceededLimit,p=s.translate,v=t.is(Ie),y=1;function m(t,n,i,a,f){var p=l();if(b(),i&&(!v||!h())){var m=e.Layout.sliderSize(),E=pt(t)*m*ut(lt(t)/m)||0;t=s.toPosition(e.Controller.toDest(t%m))+E}var L=ft(p,t,1);y=1,n=L?0:n||ct(lt(t-p)/1.5,800),o=a,r=Dt(n,g,d(w,p,t,f),1),u(5),c(Pt),r.start()}function g(){u(3),o&&o(),c(Ot)}function w(t,e,r,i){var a,c,u=l(),s=(t+(e-t)*(a=i,(c=n.easingFunc)?c(a):1-Math.pow(1-a,4))-u)*y;p(u+s),v&&!r&&h()&&(y*=.6,lt(s)<10&&m(f(h(!0)),600,!1,o,!0))}function b(){r&&r.cancel()}function E(){r&&!r.isPaused()&&(b(),g())}return{mount:function(){a(Et,b),a([xt,St],E)},destroy:b,scroll:m,cancel:E}},Drag:function(t,e,n){var r,o,i,a,c,u,s,l,f=It(t),d=f.on,h=f.emit,v=f.bind,y=f.unbind,g=t.state,w=e.Move,b=e.Scroll,E=e.Controller,L=e.Elements.track,_=e.Media.reduce,S=e.Direction,x=S.resolve,k=S.orient,C=w.getPosition,P=w.exceededLimit,O=!1;function M(){var t=n.drag;R(!t),a="free"===t}function j(t){if(u=!1,!s){var e=B(t);r=t.target,o=n.noDrag,A(r,"."+we+", ."+ve)||o&&A(r,o)||!e&&t.button||(E.isBusy()?Q(t,!0):(l=e?L:window,c=g.is([4,5]),i=null,v(l,Te,N,ze),v(l,qe,T,ze),w.cancel(),b.cancel(),I(t)))}var r,o}function N(e){if(g.is(6)||(g.set(6),h("drag")),e.cancelable)if(c){w.translate(r+D(e)/(O&&t.is(Ie)?5:1));var o=F(e)>200,i=O!==(O=P());(o||i)&&I(e),u=!0,h("dragging"),Q(e)}else(function(t){return lt(D(t))>lt(D(t,!0))})(e)&&(c=function(t){var e=n.dragMinThreshold,r=m(e),o=r&&e.mouse||0,i=(r?e.touch:+e)||10;return lt(D(t))>(B(t)?i:o)}(e),Q(e))}function T(r){g.is(6)&&(g.set(3),h("dragged")),c&&(function(r){var o=function(e){if(t.is(De)||!O){var n=F(e);if(n&&n<200)return D(e)/n}return 0}(r),i=function(t){return C()+pt(t)*at(lt(t)*(n.flickPower||600),a?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(o),c=n.rewind&&n.rewindByDrag;_(!1),a?E.scroll(i,0,n.snap):t.is(Fe)?E.go(k(pt(o))<0?c?"<":"-":c?">":"+"):t.is(Ie)&&O&&c?E.go(P(!0)?">":"<"):E.go(E.toDest(i),!0),_(!0)}(r),Q(r)),y(l,Te,N),y(l,qe,T),c=!1}function q(t){!s&&u&&Q(t,!0)}function I(t){i=o,o=t,r=C()}function D(t,e){return z(t,e)-z(G(t),e)}function F(t){return et(t)-et(G(t))}function G(t){return o===t&&i||o}function z(t,e){return(B(t)?t.changedTouches[0]:t)["page"+x(e?"Y":"X")]}function B(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function R(t){s=t}return{mount:function(){v(L,Te,p,ze),v(L,qe,p,ze),v(L,Ne,j,ze),v(L,"click",q,{capture:!0}),v(L,"dragstart",Q),d([wt,xt],M)},disable:R,isDragging:function(){return c}}},Keyboard:function(t,e,n){var r,o,i=It(t),a=i.on,c=i.bind,u=i.unbind,s=t.root,l=e.Direction.resolve;function f(){var t=n.keyboard;t&&(r="global"===t?window:s,c(r,He,v))}function d(){u(r,He)}function p(){var t=o;o=!0,h((function(){o=t}))}function v(e){if(!o){var n=Re(e);n===l(Gt)?t.go("<"):n===l(zt)&&t.go(">")}}return{mount:function(){f(),a(xt,d),a(xt,f),a(Et,p)},destroy:d,disable:function(t){o=t}}},LazyLoad:function(t,e,n){var r=It(t),o=r.on,i=r.off,a=r.bind,c=r.emit,u="sequential"===n.lazyLoad,s=[Lt,Ot],f=[];function h(){l(f),e.Slides.forEach((function(t){Z(t.slide,Xe).forEach((function(e){var r=X(e,Ye),o=X(e,We);if(r!==e.src||o!==e.srcset){var i=n.classes.spinner,a=e.parentElement,c=T(a,"."+i)||R("span",i,a);f.push([e,t,c]),e.src||Y(e,"none")}}))})),u?m():(i(s),o(s,p),p())}function p(){(f=f.filter((function(e){var r=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,r)||v(e)}))).length||i(s)}function v(t){var e=t[0];O(t[1].slide,Pe),a(e,"load error",d(y,t)),B(e,"src",X(e,Ye)),B(e,"srcset",X(e,We)),z(e,Ye),z(e,We)}function y(t,e){var n=t[0],r=t[1];tt(r.slide,Pe),"error"!==e.type&&(J(t[2]),Y(n,""),c(Tt,n,r),c(kt)),u&&m()}function m(){f.length&&v(f.shift())}return{mount:function(){n.lazyLoad&&(h(),o(St,h))},destroy:d(l,f),check:p}},Pagination:function(t,e,n){var r,o,i=It(t),a=i.on,c=i.emit,u=i.bind,s=e.Slides,h=e.Elements,p=e.Controller,v=p.hasFocus,y=p.getIndex,m=p.go,g=e.Direction.resolve,w=h.pagination,b=[];function E(){r&&(J(w?f(r.children):r),tt(r,o),l(b),r=null),i.destroy()}function L(t){m(">"+t,!0)}function _(t,e){var n=b.length,r=Re(e),o=S(),i=-1;r===g(zt,!1,o)?i=++t%n:r===g(Gt,!1,o)?i=(--t+n)%n:"Home"===r?i=0:"End"===r&&(i=n-1);var a=b[i];a&&(W(a.button),m(">"+i),Q(e,!0))}function S(){return n.paginationDirection||n.direction}function x(t){return b[p.toPage(t)]}function k(){var t=x(y(!0)),e=x(y());if(t){var n=t.button;tt(n,Se),z(n,Kt),B(n,Xt,-1)}if(e){var o=e.button;O(o,Se),B(o,Kt,!0),B(o,Xt,"")}c("pagination:updated",{list:r,items:b},t,e)}return{items:b,mount:function e(){E(),a([xt,St,qt],e);var i=n.pagination;w&&Y(w,i?"":"none"),i&&(a([Et,Pt,Ot],k),function(){var e=t.length,i=n.classes,a=n.i18n,c=n.perPage,l=v()?p.getEnd()+1:st(e/c);O(r=w||R("ul",i.pagination,h.track.parentElement),o=ge+"--"+S()),B(r,Wt,"tablist"),B(r,Qt,a.select),B(r,te,S()===Ht?"vertical":"");for(var f=0;f<l;f++){var y=R("li",null,r),m=R("button",{class:i.page,type:"button"},y),g=s.getIn(f).map((function(t){return t.slide.id})),E=!v()&&c>1?a.pageX:a.slideX;u(m,"click",d(L,f)),n.paginationKeyboard&&u(m,"keydown",d(_,f)),B(y,Wt,"presentation"),B(m,Wt,"tab"),B(m,Ut,g.join(" ")),B(m,Qt,vt(E,f+1)),B(m,Xt,-1),b.push({li:y,button:m,page:f})}}(),k(),c("pagination:mounted",{list:r,items:b},x(t.index)))},destroy:E,getAt:x,update:k}},Sync:function(t,e,n){var r=n.isNavigation,o=n.slideFocus,i=[];function a(){var e,n;t.splides.forEach((function(e){e.isParent||(u(t,e.splide),u(e.splide,t))})),r&&((n=(e=It(t)).on)(_t,f),n("sk",h),n([wt,xt],s),i.push(e),e.emit(jt,t.splides))}function c(){i.forEach((function(t){t.destroy()})),l(i)}function u(t,e){var n=It(t);n.on(Et,(function(t,n,r){e.go(e.is(De)?r:t)})),i.push(n)}function s(){B(e.Elements.list,te,n.direction===Ht?"vertical":"")}function f(e){t.go(e.index)}function h(t,e){k(Ve,Re(e))&&(f(t),Q(e))}return{setup:d(e.Media.set,{slideFocus:E(o)?r:o},!0),mount:a,destroy:c,remount:function(){c(),a()}}},Wheel:function(t,e,n){var r=It(t).bind,o=0;function i(r){if(r.cancelable){var i=r.deltaY,a=i<0,c=et(r),u=n.wheelMinThreshold||0,s=n.wheelSleep||0;lt(i)>u&&c-o>s&&(t.go(a?"<":">"),o=c),function(r){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(r)}(a)&&Q(r)}}return{mount:function(){n.wheel&&r(e.Elements.track,"wheel",i,ze)}}},Live:function(t,e,n){var r=It(t).on,o=e.Elements.track,i=n.live&&!n.isNavigation,a=R("span",Le),c=Dt(90,d(u,!1));function u(t){B(o,re,t),t?(M(o,a),c.start()):(J(a),c.cancel())}function s(t){i&&B(o,ne,t?"off":"polite")}return{mount:function(){i&&(s(!e.Autoplay.isPaused()),B(o,oe,!0),a.textContent="…",r(At,d(s,!0)),r(Nt,d(s,!1)),r([Lt,Ot],d(u,!0)))},disable:s,destroy:function(){z(o,[ne,oe,re]),J(a)}}}}),Je={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Ae,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Ke(t,e,n){var r=e.Slides;function o(){r.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){It(t).on([wt,St],o)},start:function(t,e){r.style("transition","opacity "+n.speed+"ms "+n.easing),h(e)},cancel:p}}function Qe(t,e,n){var r,o=e.Move,i=e.Controller,a=e.Scroll,c=e.Elements.list,u=d(H,c,"transition");function s(){u(""),a.cancel()}return{mount:function(){It(t).bind(c,"transitionend",(function(t){t.target===c&&r&&(s(),r())}))},start:function(e,c){var s=o.toPosition(e,!0),l=o.getPosition(),f=function(e){var r=n.rewindSpeed;if(t.is(Ie)&&r){var o=i.getIndex(!0),a=i.getEnd();if(0===o&&e>=a||o>=a&&0===e)return r}return n.speed}(e);lt(s-l)>=1&&f>=1?n.useScroll?a.scroll(s,f,!1,c):(u("transform "+f+"ms "+n.easing),o.translate(s,!0),r=c):(o.jump(e),c())},cancel:s}}var $e=function(){function t(e,n){var r;this.event=It(),this.Components={},this.state=(r=1,{set:function(t){r=t},is:function(t){return k(S(t),r)}}),this.splides=[],this._o={},this._E={};var o=b(e)?$(document,e):e;it(o,o+" is invalid."),this.root=o,n=F({label:X(o,Qt)||"",labelledby:X(o,$t)||""},Je,t.defaults,n||{});try{F(n,JSON.parse(X(o,ot)))}catch(t){it(!1,"Invalid JSON")}this._o=Object.create(F({},n))}var e,n,r=t.prototype;return r.mount=function(t,e){var n=this,r=this.state,o=this.Components;return it(r.is([1,7]),"Already mounted!"),r.set(1),this._C=o,this._T=e||this._T||(this.is(Fe)?Ke:Qe),this._E=t||this._E,I(D({},Ue,this._E,{Transition:this._T}),(function(t,e){var r=t(n,o,n._o);o[e]=r,r.setup&&r.setup()})),I(o,(function(t){t.mount&&t.mount()})),this.emit(wt),O(this.root,_e),r.set(3),this.emit(bt),this},r.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},r.go=function(t){return this._C.Controller.go(t),this},r.on=function(t,e){return this.event.on(t,e),this},r.off=function(t){return this.event.off(t),this},r.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(f(arguments,1))),this},r.add=function(t,e){return this._C.Slides.add(t,e),this},r.remove=function(t){return this._C.Slides.remove(t),this},r.is=function(t){return this._o.type===t},r.refresh=function(){return this.emit(St),this},r.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?It(this).on(bt,this.destroy.bind(this,t)):(I(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(Mt),e.destroy(),t&&l(this.splides),n.set(7)),this},e=t,(n=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&c(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Ze=$e;Ze.defaults={},Ze.STATES=s;var tn=function(t){null!==t&&new Ze(".splide",{type:"slide",rewind:!0,autoplay:!1,perPage:3,arrows:!1,pagination:!1,pauseOnFocus:!0,updateOnMove:!0,drag:!0,swipe:!0,gap:72,focus:"left",breakpoints:{1120:{perPage:2},992:{perPage:1}}}).mount()};function en(t){var e=document.createElement("li");return e.className="splide__slide",e.innerHTML="\n        <a href='/news/".concat(t.id,'\'>\n            <div class="news__image" style="background-image: url(\'').concat(t.image,'\');"></div>\n            <h3 class="news__heading typography typography__subtitle">').concat(t.title,'</h3>\n            <div class="news__wrapper">\n                <p class="typography news__data">').concat(t.pub_date,'</p>\n                <p class="typography news__time">').concat(t.read_time,' min reading</p>\n            </div>\n            <p class="typography news__text">').concat(t.content,'</p>\n            <p class="typography news__theme">').concat(t.theme,"</p>\n        </a>"),e}function nn(t){return nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},nn(t)}function rn(){rn=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof m?e:m,a=Object.create(i.prototype),c=new M(r||[]);return o(a,"_invoke",{value:k(t,n,c)}),a}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var d="suspendedStart",h="suspendedYield",p="executing",v="completed",y={};function m(){}function g(){}function w(){}var b={};s(b,a,(function(){return this}));var E=Object.getPrototypeOf,L=E&&E(E(j([])));L&&L!==n&&r.call(L,a)&&(b=L);var _=w.prototype=m.prototype=Object.create(b);function S(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function n(o,i,a,c){var u=f(t[o],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==nn(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return n("throw",t,a,c)}))}c(u.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,n,r){var o=d;return function(i,a){if(o===p)throw new Error("Generator is already running");if(o===v){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=C(c,r);if(u){if(u===y)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=f(e,n,r);if("normal"===s.type){if(o=r.done?v:h,s.arg===y)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=v,r.method="throw",r.arg=s.arg)}}}function C(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,y;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,y):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function j(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(nn(e)+" is not iterable")}return g.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:g,configurable:!0}),g.displayName=s(w,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,s(t,u,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},S(x.prototype),s(x.prototype,c,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new x(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(_),s(_,u,"Generator"),s(_,a,(function(){return this})),s(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=j,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:j(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),y}},e}function on(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return an(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?an(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function an(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function cn(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function un(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){cn(i,r,o,a,c,"next",t)}function c(t){cn(i,r,o,a,c,"throw",t)}a(void 0)}))}}document.addEventListener("DOMContentLoaded",un(rn().mark((function t(){var e,n,r,o,c,u,s,l,f,d,h,p,v,y,m,g,w,b,E,L,_;return rn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return _=function(t){var e=f.filter((function(e){return e.title.toLowerCase().includes(t.toLowerCase())||e.content.toLowerCase().includes(t.toLowerCase())||e.theme.toLowerCase().includes(t.toLowerCase())}));p(e)},L=function(){return(L=un(rn().mark((function t(e){var n;return rn().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=f.filter((function(t){return t.theme===e})),p(n);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)},E=function(t){return L.apply(this,arguments)},b=function(){v(),p(f)},w=function(){n.innerHTML="",v(),s&&n&&tn();var t,e=o.value.trim();_(e),""!==e&&(o.classList.add("newsSection__input_open"),null===(t=l)||void 0===t||t.classList.remove("newsSection__theme_active"),null==r||r.classList.remove("d-none"))},g=function(t,e){n.innerHTML="",l&&l.classList.remove("newsSection__theme_active"),l=e,e.classList.add("newsSection__theme_active"),null==r||r.classList.remove("d-none"),E(t),y()},m=function(){v(),y(),p(f)},y=function(){o.value="",o.classList.remove("newsSection__input_open"),o.blur()},v=function(){l&&l.classList.remove("newsSection__theme_active"),l=null,null==r||r.classList.add("d-none")},p=function(t){if(n.innerHTML="",0===t.length)u.classList.remove("d-none");else{var e,r=on(t);try{for(r.s();!(e=r.n()).done;){var o=en(e.value);n.appendChild(o),u.classList.add("d-none"),s&&n&&tn()}}catch(t){r.e(t)}finally{r.f()}}},h=function(t){if(t&&t.themes&&Array.isArray(t.themes)){var n,r=on(t.themes);try{var o=function(){var t=n.value,r=document.createElement("li");r.className="newsSection__themeWrapper";var o=document.createElement("button");o.className="typography newsSection__theme",o.textContent=t,o.addEventListener("click",(function(){return g(t,o)})),r.appendChild(o),e.appendChild(r)};for(r.s();!(n=r.n()).done;)o()}catch(t){r.e(t)}finally{r.f()}}else console.error("Invalid themes data in themes.json")},e=document.querySelector(".newsSection__themes"),n=document.querySelector(".newsSection__list"),r=document.getElementById("resetFilter"),o=document.querySelector(".newsSection__input"),c=document.querySelector(".newsSection__cross"),u=document.querySelector(".newsSection__noResult"),s=document.querySelector(".splide"),l=null,f=[],d=[],t.prev=21,t.next=24,i();case 24:return f=t.sent,t.next=27,a();case 27:d=t.sent,h(d),null==r||r.addEventListener("click",m),o.addEventListener("input",w),o.addEventListener("focus",b),c.addEventListener("click",m),p(f),t.next=39;break;case 36:t.prev=36,t.t0=t.catch(21),console.error("Error in ExampleFile:",t.t0);case 39:case"end":return t.stop()}}),t,null,[[21,36]])}))));function sn(){var t,e,n;this.burger.addEventListener("click",this.handlerOpen),t=this.headerMenu,e=this.handlerBackdropClick,n=function(n){var r=n.target;t&&!t.contains(r)&&(null==e||e(n,t))},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function ln(){this.headerMenu.classList.contains("visible")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function fn(){this.headerMenu.classList.toggle("visible"),this.burger.classList.toggle("active"),this.toggleVerticalScroll()}function dn(){this.headerMenu.classList.remove("visible"),this.burger.classList.remove("active"),this.toggleVerticalScroll()}function hn(t){!this.headerMenu.classList.contains("visible")||t.target.closest(".header__mobile")||t.target.closest(".header__menu")||t.target.closest(".header-menu__top")||t.target.closest(".header-lang__wrapper")||this.handlerClose()}var pn=document.querySelector(".header");pn&&new function(t){this.node=t,this.body=document.querySelector("body"),this.burger=document.querySelector(".header__menu"),this.headerMenu=document.querySelector(".navigationPanel"),this.menuList=document.querySelector(".header-menu__List"),this.lang=document.querySelectorAll(".header__lang"),this.handlerOpen=fn.bind(this),this.handlerClose=dn.bind(this),this.listeners=sn.bind(this),this.handlerBackdropClick=hn.bind(this),this.toggleVerticalScroll=ln.bind(this),this.listeners()}(pn);function vn(){var t,e,n,r=this;this.buttonsModal.forEach((function(t){t.addEventListener("click",r.handlerOpen)})),this.close.forEach((function(t){t.addEventListener("click",r.handlerClose)})),this.form.forEach((function(t){t.addEventListener("submit",r.handlerClose)})),t=this.form,e=this.handlerBackdropClick,n=function(n){var r=n.target;t instanceof NodeList&&Array.from(t).some((function(t){return t.contains(r)}))||t instanceof Element&&t.contains(r)||null==e||e(n,t)},document.addEventListener("click",n),document.addEventListener("ontouchstart",n)}function yn(){this.node.classList.contains("modalw_is-open")?this.body.style.overflowY="hidden":this.body.style.overflowY="visible"}function mn(t){var e,n=t.target.classList.contains("buttonModalw"),r=t.target.classList.contains("button__hr");n&&(r?this.formGeneral.classList.add("d-none"):null===(e=this.formHr)||void 0===e||e.classList.add("d-none"),this.node.classList.add("modalw_is-open"),this.toggleVerticalScroll())}function gn(){var t;this.node.classList.remove("modalw_is-open"),null===(t=this.formHr)||void 0===t||t.classList.remove("d-none"),this.formGeneral.classList.remove("d-none"),this.toggleVerticalScroll()}function wn(t){this.node.classList.contains("modalw_is-open")&&!t.target.classList.contains("buttonModalw")&&this.handlerClose()}var bn,En,Ln,_n,Sn=document.querySelector(".modalw");Sn&&new function(t){this.node=t,this.body=document.querySelector("body"),this.form=document.querySelectorAll(".modalwForm"),this.formHr=t.querySelector(".formHr"),this.formGeneral=document.querySelector(".formGeneral"),this.buttonsModal=document.querySelectorAll(".buttonModalw"),this.close=document.querySelectorAll(".modalw__close"),this.handlerOpen=mn.bind(this),this.handlerClose=gn.bind(this),this.listeners=vn.bind(this),this.handlerBackdropClick=wn.bind(this),this.toggleVerticalScroll=yn.bind(this),this.listeners()}(Sn),n(120),n(368),n(416),bn=document.querySelector(".formGeneral"),En=bn.querySelector(".telegram"),Ln=bn.querySelector(".skype"),_n=bn.querySelector(".form__info_one"),document.addEventListener("focusout",(function(t){"INPUT"===t.target.tagName&&(t.target.validity.valid?t.target.classList.remove("invalid"):t.target.classList.add("invalid"),""===En.value.trim()&&""===Ln.value.trim()||(_n.style.opacity="0"))})),bn.addEventListener("submit",(function(t){if(""===En.value.trim()&&""===Ln.value.trim())t.preventDefault(),_n.style.opacity="1";else{t.preventDefault();var e=new FormData(bn),n={};e.forEach((function(t,e){n[e]=t})),fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then((function(t){return t.json()})).then((function(t){console.log("Success:",t),bn.reset();var e=document.querySelector(".successMessage");e.classList.remove("successMessage_hidden"),setTimeout((function(){e.classList.add("successMessage_hidden")}),1e3)})).catch((function(t){console.error("Error:",t)}))}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,